
shush.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b4  0800c3b4  000203c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3b4  0800c3b4  0001c3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3bc  0800c3bc  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3bc  0800c3bc  0001c3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3c0  0800c3c0  0001c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  0800c3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001170  200003c8  0800c78c  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001538  0800c78c  00021538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b02a  00000000  00000000  000203f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f5  00000000  00000000  0003b41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0003f610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  00040ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfea  00000000  00000000  00042640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecc6  00000000  00000000  0005f62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aab2  00000000  00000000  0007e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118da2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  00118df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003c8 	.word	0x200003c8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1a8 	.word	0x0800c1a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003cc 	.word	0x200003cc
 800014c:	0800c1a8 	.word	0x0800c1a8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_dmul>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800017a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000182:	bf1d      	ittte	ne
 8000184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000188:	ea94 0f0c 	teqne	r4, ip
 800018c:	ea95 0f0c 	teqne	r5, ip
 8000190:	f000 f8de 	bleq	8000350 <__aeabi_dmul+0x1dc>
 8000194:	442c      	add	r4, r5
 8000196:	ea81 0603 	eor.w	r6, r1, r3
 800019a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a6:	bf18      	it	ne
 80001a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b4:	d038      	beq.n	8000228 <__aeabi_dmul+0xb4>
 80001b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ba:	f04f 0500 	mov.w	r5, #0
 80001be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ca:	f04f 0600 	mov.w	r6, #0
 80001ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d2:	f09c 0f00 	teq	ip, #0
 80001d6:	bf18      	it	ne
 80001d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e8:	d204      	bcs.n	80001f4 <__aeabi_dmul+0x80>
 80001ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ee:	416d      	adcs	r5, r5
 80001f0:	eb46 0606 	adc.w	r6, r6, r6
 80001f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000208:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800020c:	bf88      	it	hi
 800020e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000212:	d81e      	bhi.n	8000252 <__aeabi_dmul+0xde>
 8000214:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000218:	bf08      	it	eq
 800021a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021e:	f150 0000 	adcs.w	r0, r0, #0
 8000222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800022c:	ea46 0101 	orr.w	r1, r6, r1
 8000230:	ea40 0002 	orr.w	r0, r0, r2
 8000234:	ea81 0103 	eor.w	r1, r1, r3
 8000238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800023c:	bfc2      	ittt	gt
 800023e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000246:	bd70      	popgt	{r4, r5, r6, pc}
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800024c:	f04f 0e00 	mov.w	lr, #0
 8000250:	3c01      	subs	r4, #1
 8000252:	f300 80ab 	bgt.w	80003ac <__aeabi_dmul+0x238>
 8000256:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800025a:	bfde      	ittt	le
 800025c:	2000      	movle	r0, #0
 800025e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000262:	bd70      	pople	{r4, r5, r6, pc}
 8000264:	f1c4 0400 	rsb	r4, r4, #0
 8000268:	3c20      	subs	r4, #32
 800026a:	da35      	bge.n	80002d8 <__aeabi_dmul+0x164>
 800026c:	340c      	adds	r4, #12
 800026e:	dc1b      	bgt.n	80002a8 <__aeabi_dmul+0x134>
 8000270:	f104 0414 	add.w	r4, r4, #20
 8000274:	f1c4 0520 	rsb	r5, r4, #32
 8000278:	fa00 f305 	lsl.w	r3, r0, r5
 800027c:	fa20 f004 	lsr.w	r0, r0, r4
 8000280:	fa01 f205 	lsl.w	r2, r1, r5
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800028c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000294:	fa21 f604 	lsr.w	r6, r1, r4
 8000298:	eb42 0106 	adc.w	r1, r2, r6
 800029c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a0:	bf08      	it	eq
 80002a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f1c4 040c 	rsb	r4, r4, #12
 80002ac:	f1c4 0520 	rsb	r5, r4, #32
 80002b0:	fa00 f304 	lsl.w	r3, r0, r4
 80002b4:	fa20 f005 	lsr.w	r0, r0, r5
 80002b8:	fa01 f204 	lsl.w	r2, r1, r4
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f205 	lsl.w	r2, r0, r5
 80002e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e4:	fa20 f304 	lsr.w	r3, r0, r4
 80002e8:	fa01 f205 	lsl.w	r2, r1, r5
 80002ec:	ea43 0302 	orr.w	r3, r3, r2
 80002f0:	fa21 f004 	lsr.w	r0, r1, r4
 80002f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	fa21 f204 	lsr.w	r2, r1, r4
 80002fc:	ea20 0002 	bic.w	r0, r0, r2
 8000300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000308:	bf08      	it	eq
 800030a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f094 0f00 	teq	r4, #0
 8000314:	d10f      	bne.n	8000336 <__aeabi_dmul+0x1c2>
 8000316:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	eb41 0101 	adc.w	r1, r1, r1
 8000320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000324:	bf08      	it	eq
 8000326:	3c01      	subeq	r4, #1
 8000328:	d0f7      	beq.n	800031a <__aeabi_dmul+0x1a6>
 800032a:	ea41 0106 	orr.w	r1, r1, r6
 800032e:	f095 0f00 	teq	r5, #0
 8000332:	bf18      	it	ne
 8000334:	4770      	bxne	lr
 8000336:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	eb43 0303 	adc.w	r3, r3, r3
 8000340:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000344:	bf08      	it	eq
 8000346:	3d01      	subeq	r5, #1
 8000348:	d0f7      	beq.n	800033a <__aeabi_dmul+0x1c6>
 800034a:	ea43 0306 	orr.w	r3, r3, r6
 800034e:	4770      	bx	lr
 8000350:	ea94 0f0c 	teq	r4, ip
 8000354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000358:	bf18      	it	ne
 800035a:	ea95 0f0c 	teqne	r5, ip
 800035e:	d00c      	beq.n	800037a <__aeabi_dmul+0x206>
 8000360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000364:	bf18      	it	ne
 8000366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036a:	d1d1      	bne.n	8000310 <__aeabi_dmul+0x19c>
 800036c:	ea81 0103 	eor.w	r1, r1, r3
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	f04f 0000 	mov.w	r0, #0
 8000378:	bd70      	pop	{r4, r5, r6, pc}
 800037a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037e:	bf06      	itte	eq
 8000380:	4610      	moveq	r0, r2
 8000382:	4619      	moveq	r1, r3
 8000384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000388:	d019      	beq.n	80003be <__aeabi_dmul+0x24a>
 800038a:	ea94 0f0c 	teq	r4, ip
 800038e:	d102      	bne.n	8000396 <__aeabi_dmul+0x222>
 8000390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000394:	d113      	bne.n	80003be <__aeabi_dmul+0x24a>
 8000396:	ea95 0f0c 	teq	r5, ip
 800039a:	d105      	bne.n	80003a8 <__aeabi_dmul+0x234>
 800039c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a0:	bf1c      	itt	ne
 80003a2:	4610      	movne	r0, r2
 80003a4:	4619      	movne	r1, r3
 80003a6:	d10a      	bne.n	80003be <__aeabi_dmul+0x24a>
 80003a8:	ea81 0103 	eor.w	r1, r1, r3
 80003ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
 80003be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c6:	bd70      	pop	{r4, r5, r6, pc}

080003c8 <__aeabi_drsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	e002      	b.n	80003d4 <__adddf3>
 80003ce:	bf00      	nop

080003d0 <__aeabi_dsub>:
 80003d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d4 <__adddf3>:
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	bf1f      	itttt	ne
 80003ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fa:	f000 80e2 	beq.w	80005c2 <__adddf3+0x1ee>
 80003fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000402:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000406:	bfb8      	it	lt
 8000408:	426d      	neglt	r5, r5
 800040a:	dd0c      	ble.n	8000426 <__adddf3+0x52>
 800040c:	442c      	add	r4, r5
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	ea82 0000 	eor.w	r0, r2, r0
 800041a:	ea83 0101 	eor.w	r1, r3, r1
 800041e:	ea80 0202 	eor.w	r2, r0, r2
 8000422:	ea81 0303 	eor.w	r3, r1, r3
 8000426:	2d36      	cmp	r5, #54	; 0x36
 8000428:	bf88      	it	hi
 800042a:	bd30      	pophi	{r4, r5, pc}
 800042c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000430:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000434:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000438:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x70>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800044c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x84>
 8000452:	4252      	negs	r2, r2
 8000454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000458:	ea94 0f05 	teq	r4, r5
 800045c:	f000 80a7 	beq.w	80005ae <__adddf3+0x1da>
 8000460:	f1a4 0401 	sub.w	r4, r4, #1
 8000464:	f1d5 0e20 	rsbs	lr, r5, #32
 8000468:	db0d      	blt.n	8000486 <__adddf3+0xb2>
 800046a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046e:	fa22 f205 	lsr.w	r2, r2, r5
 8000472:	1880      	adds	r0, r0, r2
 8000474:	f141 0100 	adc.w	r1, r1, #0
 8000478:	fa03 f20e 	lsl.w	r2, r3, lr
 800047c:	1880      	adds	r0, r0, r2
 800047e:	fa43 f305 	asr.w	r3, r3, r5
 8000482:	4159      	adcs	r1, r3
 8000484:	e00e      	b.n	80004a4 <__adddf3+0xd0>
 8000486:	f1a5 0520 	sub.w	r5, r5, #32
 800048a:	f10e 0e20 	add.w	lr, lr, #32
 800048e:	2a01      	cmp	r2, #1
 8000490:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000494:	bf28      	it	cs
 8000496:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	d507      	bpl.n	80004ba <__adddf3+0xe6>
 80004aa:	f04f 0e00 	mov.w	lr, #0
 80004ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004be:	d31b      	bcc.n	80004f8 <__adddf3+0x124>
 80004c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c4:	d30c      	bcc.n	80004e0 <__adddf3+0x10c>
 80004c6:	0849      	lsrs	r1, r1, #1
 80004c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d0:	f104 0401 	add.w	r4, r4, #1
 80004d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004dc:	f080 809a 	bcs.w	8000614 <__adddf3+0x240>
 80004e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e4:	bf08      	it	eq
 80004e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ea:	f150 0000 	adcs.w	r0, r0, #0
 80004ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f2:	ea41 0105 	orr.w	r1, r1, r5
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004fc:	4140      	adcs	r0, r0
 80004fe:	eb41 0101 	adc.w	r1, r1, r1
 8000502:	3c01      	subs	r4, #1
 8000504:	bf28      	it	cs
 8000506:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800050a:	d2e9      	bcs.n	80004e0 <__adddf3+0x10c>
 800050c:	f091 0f00 	teq	r1, #0
 8000510:	bf04      	itt	eq
 8000512:	4601      	moveq	r1, r0
 8000514:	2000      	moveq	r0, #0
 8000516:	fab1 f381 	clz	r3, r1
 800051a:	bf08      	it	eq
 800051c:	3320      	addeq	r3, #32
 800051e:	f1a3 030b 	sub.w	r3, r3, #11
 8000522:	f1b3 0220 	subs.w	r2, r3, #32
 8000526:	da0c      	bge.n	8000542 <__adddf3+0x16e>
 8000528:	320c      	adds	r2, #12
 800052a:	dd08      	ble.n	800053e <__adddf3+0x16a>
 800052c:	f102 0c14 	add.w	ip, r2, #20
 8000530:	f1c2 020c 	rsb	r2, r2, #12
 8000534:	fa01 f00c 	lsl.w	r0, r1, ip
 8000538:	fa21 f102 	lsr.w	r1, r1, r2
 800053c:	e00c      	b.n	8000558 <__adddf3+0x184>
 800053e:	f102 0214 	add.w	r2, r2, #20
 8000542:	bfd8      	it	le
 8000544:	f1c2 0c20 	rsble	ip, r2, #32
 8000548:	fa01 f102 	lsl.w	r1, r1, r2
 800054c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000550:	bfdc      	itt	le
 8000552:	ea41 010c 	orrle.w	r1, r1, ip
 8000556:	4090      	lslle	r0, r2
 8000558:	1ae4      	subs	r4, r4, r3
 800055a:	bfa2      	ittt	ge
 800055c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000560:	4329      	orrge	r1, r5
 8000562:	bd30      	popge	{r4, r5, pc}
 8000564:	ea6f 0404 	mvn.w	r4, r4
 8000568:	3c1f      	subs	r4, #31
 800056a:	da1c      	bge.n	80005a6 <__adddf3+0x1d2>
 800056c:	340c      	adds	r4, #12
 800056e:	dc0e      	bgt.n	800058e <__adddf3+0x1ba>
 8000570:	f104 0414 	add.w	r4, r4, #20
 8000574:	f1c4 0220 	rsb	r2, r4, #32
 8000578:	fa20 f004 	lsr.w	r0, r0, r4
 800057c:	fa01 f302 	lsl.w	r3, r1, r2
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	fa21 f304 	lsr.w	r3, r1, r4
 8000588:	ea45 0103 	orr.w	r1, r5, r3
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f1c4 040c 	rsb	r4, r4, #12
 8000592:	f1c4 0220 	rsb	r2, r4, #32
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	ea40 0003 	orr.w	r0, r0, r3
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	fa21 f004 	lsr.w	r0, r1, r4
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f094 0f00 	teq	r4, #0
 80005b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b6:	bf06      	itte	eq
 80005b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005bc:	3401      	addeq	r4, #1
 80005be:	3d01      	subne	r5, #1
 80005c0:	e74e      	b.n	8000460 <__adddf3+0x8c>
 80005c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c6:	bf18      	it	ne
 80005c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005cc:	d029      	beq.n	8000622 <__adddf3+0x24e>
 80005ce:	ea94 0f05 	teq	r4, r5
 80005d2:	bf08      	it	eq
 80005d4:	ea90 0f02 	teqeq	r0, r2
 80005d8:	d005      	beq.n	80005e6 <__adddf3+0x212>
 80005da:	ea54 0c00 	orrs.w	ip, r4, r0
 80005de:	bf04      	itt	eq
 80005e0:	4619      	moveq	r1, r3
 80005e2:	4610      	moveq	r0, r2
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	ea91 0f03 	teq	r1, r3
 80005ea:	bf1e      	ittt	ne
 80005ec:	2100      	movne	r1, #0
 80005ee:	2000      	movne	r0, #0
 80005f0:	bd30      	popne	{r4, r5, pc}
 80005f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f6:	d105      	bne.n	8000604 <__adddf3+0x230>
 80005f8:	0040      	lsls	r0, r0, #1
 80005fa:	4149      	adcs	r1, r1
 80005fc:	bf28      	it	cs
 80005fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000608:	bf3c      	itt	cc
 800060a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060e:	bd30      	popcc	{r4, r5, pc}
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000618:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf1a      	itte	ne
 8000628:	4619      	movne	r1, r3
 800062a:	4610      	movne	r0, r2
 800062c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000630:	bf1c      	itt	ne
 8000632:	460b      	movne	r3, r1
 8000634:	4602      	movne	r2, r0
 8000636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063a:	bf06      	itte	eq
 800063c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000640:	ea91 0f03 	teqeq	r1, r3
 8000644:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop

0800064c <__aeabi_ui2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f04f 0500 	mov.w	r5, #0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e750      	b.n	800050c <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_i2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000680:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000684:	bf48      	it	mi
 8000686:	4240      	negmi	r0, r0
 8000688:	f04f 0100 	mov.w	r1, #0
 800068c:	e73e      	b.n	800050c <__adddf3+0x138>
 800068e:	bf00      	nop

08000690 <__aeabi_f2d>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000696:	ea4f 0131 	mov.w	r1, r1, rrx
 800069a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069e:	bf1f      	itttt	ne
 80006a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006ac:	4770      	bxne	lr
 80006ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006b2:	bf08      	it	eq
 80006b4:	4770      	bxeq	lr
 80006b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ba:	bf04      	itt	eq
 80006bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e71c      	b.n	800050c <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_ul2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	e00a      	b.n	80006fa <__aeabi_l2d+0x16>

080006e4 <__aeabi_l2d>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006f2:	d502      	bpl.n	80006fa <__aeabi_l2d+0x16>
 80006f4:	4240      	negs	r0, r0
 80006f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000702:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000706:	f43f aed8 	beq.w	80004ba <__adddf3+0xe6>
 800070a:	f04f 0203 	mov.w	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	fa00 fc03 	lsl.w	ip, r0, r3
 800072a:	fa20 f002 	lsr.w	r0, r0, r2
 800072e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000732:	ea40 000e 	orr.w	r0, r0, lr
 8000736:	fa21 f102 	lsr.w	r1, r1, r2
 800073a:	4414      	add	r4, r2
 800073c:	e6bd      	b.n	80004ba <__adddf3+0xe6>
 800073e:	bf00      	nop

08000740 <__aeabi_d2f>:
 8000740:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000744:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000748:	bf24      	itt	cs
 800074a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800074e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000752:	d90d      	bls.n	8000770 <__aeabi_d2f+0x30>
 8000754:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000758:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800075c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000760:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000764:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000768:	bf08      	it	eq
 800076a:	f020 0001 	biceq.w	r0, r0, #1
 800076e:	4770      	bx	lr
 8000770:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000774:	d121      	bne.n	80007ba <__aeabi_d2f+0x7a>
 8000776:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800077a:	bfbc      	itt	lt
 800077c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000780:	4770      	bxlt	lr
 8000782:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000786:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800078a:	f1c2 0218 	rsb	r2, r2, #24
 800078e:	f1c2 0c20 	rsb	ip, r2, #32
 8000792:	fa10 f30c 	lsls.w	r3, r0, ip
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	bf18      	it	ne
 800079c:	f040 0001 	orrne.w	r0, r0, #1
 80007a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007ac:	ea40 000c 	orr.w	r0, r0, ip
 80007b0:	fa23 f302 	lsr.w	r3, r3, r2
 80007b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b8:	e7cc      	b.n	8000754 <__aeabi_d2f+0x14>
 80007ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007be:	d107      	bne.n	80007d0 <__aeabi_d2f+0x90>
 80007c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007c4:	bf1e      	ittt	ne
 80007c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ce:	4770      	bxne	lr
 80007d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <__aeabi_frsub>:
 80007e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007e4:	e002      	b.n	80007ec <__addsf3>
 80007e6:	bf00      	nop

080007e8 <__aeabi_fsub>:
 80007e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007ec <__addsf3>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	bf1f      	itttt	ne
 80007f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007f4:	ea92 0f03 	teqne	r2, r3
 80007f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000800:	d06a      	beq.n	80008d8 <__addsf3+0xec>
 8000802:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000806:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800080a:	bfc1      	itttt	gt
 800080c:	18d2      	addgt	r2, r2, r3
 800080e:	4041      	eorgt	r1, r0
 8000810:	4048      	eorgt	r0, r1
 8000812:	4041      	eorgt	r1, r0
 8000814:	bfb8      	it	lt
 8000816:	425b      	neglt	r3, r3
 8000818:	2b19      	cmp	r3, #25
 800081a:	bf88      	it	hi
 800081c:	4770      	bxhi	lr
 800081e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000822:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000826:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800082a:	bf18      	it	ne
 800082c:	4240      	negne	r0, r0
 800082e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000832:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000836:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800083a:	bf18      	it	ne
 800083c:	4249      	negne	r1, r1
 800083e:	ea92 0f03 	teq	r2, r3
 8000842:	d03f      	beq.n	80008c4 <__addsf3+0xd8>
 8000844:	f1a2 0201 	sub.w	r2, r2, #1
 8000848:	fa41 fc03 	asr.w	ip, r1, r3
 800084c:	eb10 000c 	adds.w	r0, r0, ip
 8000850:	f1c3 0320 	rsb	r3, r3, #32
 8000854:	fa01 f103 	lsl.w	r1, r1, r3
 8000858:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800085c:	d502      	bpl.n	8000864 <__addsf3+0x78>
 800085e:	4249      	negs	r1, r1
 8000860:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000864:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000868:	d313      	bcc.n	8000892 <__addsf3+0xa6>
 800086a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800086e:	d306      	bcc.n	800087e <__addsf3+0x92>
 8000870:	0840      	lsrs	r0, r0, #1
 8000872:	ea4f 0131 	mov.w	r1, r1, rrx
 8000876:	f102 0201 	add.w	r2, r2, #1
 800087a:	2afe      	cmp	r2, #254	; 0xfe
 800087c:	d251      	bcs.n	8000922 <__addsf3+0x136>
 800087e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000882:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000886:	bf08      	it	eq
 8000888:	f020 0001 	biceq.w	r0, r0, #1
 800088c:	ea40 0003 	orr.w	r0, r0, r3
 8000890:	4770      	bx	lr
 8000892:	0049      	lsls	r1, r1, #1
 8000894:	eb40 0000 	adc.w	r0, r0, r0
 8000898:	3a01      	subs	r2, #1
 800089a:	bf28      	it	cs
 800089c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008a0:	d2ed      	bcs.n	800087e <__addsf3+0x92>
 80008a2:	fab0 fc80 	clz	ip, r0
 80008a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80008aa:	ebb2 020c 	subs.w	r2, r2, ip
 80008ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80008b2:	bfaa      	itet	ge
 80008b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008b8:	4252      	neglt	r2, r2
 80008ba:	4318      	orrge	r0, r3
 80008bc:	bfbc      	itt	lt
 80008be:	40d0      	lsrlt	r0, r2
 80008c0:	4318      	orrlt	r0, r3
 80008c2:	4770      	bx	lr
 80008c4:	f092 0f00 	teq	r2, #0
 80008c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008cc:	bf06      	itte	eq
 80008ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008d2:	3201      	addeq	r2, #1
 80008d4:	3b01      	subne	r3, #1
 80008d6:	e7b5      	b.n	8000844 <__addsf3+0x58>
 80008d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008e0:	bf18      	it	ne
 80008e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008e6:	d021      	beq.n	800092c <__addsf3+0x140>
 80008e8:	ea92 0f03 	teq	r2, r3
 80008ec:	d004      	beq.n	80008f8 <__addsf3+0x10c>
 80008ee:	f092 0f00 	teq	r2, #0
 80008f2:	bf08      	it	eq
 80008f4:	4608      	moveq	r0, r1
 80008f6:	4770      	bx	lr
 80008f8:	ea90 0f01 	teq	r0, r1
 80008fc:	bf1c      	itt	ne
 80008fe:	2000      	movne	r0, #0
 8000900:	4770      	bxne	lr
 8000902:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000906:	d104      	bne.n	8000912 <__addsf3+0x126>
 8000908:	0040      	lsls	r0, r0, #1
 800090a:	bf28      	it	cs
 800090c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000916:	bf3c      	itt	cc
 8000918:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800091c:	4770      	bxcc	lr
 800091e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000922:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000926:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800092a:	4770      	bx	lr
 800092c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000930:	bf16      	itet	ne
 8000932:	4608      	movne	r0, r1
 8000934:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000938:	4601      	movne	r1, r0
 800093a:	0242      	lsls	r2, r0, #9
 800093c:	bf06      	itte	eq
 800093e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000942:	ea90 0f01 	teqeq	r0, r1
 8000946:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800094a:	4770      	bx	lr

0800094c <__aeabi_ui2f>:
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	e004      	b.n	800095c <__aeabi_i2f+0x8>
 8000952:	bf00      	nop

08000954 <__aeabi_i2f>:
 8000954:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000958:	bf48      	it	mi
 800095a:	4240      	negmi	r0, r0
 800095c:	ea5f 0c00 	movs.w	ip, r0
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000968:	4601      	mov	r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	e01c      	b.n	80009aa <__aeabi_l2f+0x2a>

08000970 <__aeabi_ul2f>:
 8000970:	ea50 0201 	orrs.w	r2, r0, r1
 8000974:	bf08      	it	eq
 8000976:	4770      	bxeq	lr
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	e00a      	b.n	8000994 <__aeabi_l2f+0x14>
 800097e:	bf00      	nop

08000980 <__aeabi_l2f>:
 8000980:	ea50 0201 	orrs.w	r2, r0, r1
 8000984:	bf08      	it	eq
 8000986:	4770      	bxeq	lr
 8000988:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800098c:	d502      	bpl.n	8000994 <__aeabi_l2f+0x14>
 800098e:	4240      	negs	r0, r0
 8000990:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000994:	ea5f 0c01 	movs.w	ip, r1
 8000998:	bf02      	ittt	eq
 800099a:	4684      	moveq	ip, r0
 800099c:	4601      	moveq	r1, r0
 800099e:	2000      	moveq	r0, #0
 80009a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009a4:	bf08      	it	eq
 80009a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ae:	fabc f28c 	clz	r2, ip
 80009b2:	3a08      	subs	r2, #8
 80009b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009b8:	db10      	blt.n	80009dc <__aeabi_l2f+0x5c>
 80009ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80009be:	4463      	add	r3, ip
 80009c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80009c4:	f1c2 0220 	rsb	r2, r2, #32
 80009c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009cc:	fa20 f202 	lsr.w	r2, r0, r2
 80009d0:	eb43 0002 	adc.w	r0, r3, r2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f102 0220 	add.w	r2, r2, #32
 80009e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80009e4:	f1c2 0220 	rsb	r2, r2, #32
 80009e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009ec:	fa21 f202 	lsr.w	r2, r1, r2
 80009f0:	eb43 0002 	adc.w	r0, r3, r2
 80009f4:	bf08      	it	eq
 80009f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fmul>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d06f      	beq.n	8000af4 <__aeabi_fmul+0xf8>
 8000a14:	441a      	add	r2, r3
 8000a16:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1a:	0240      	lsls	r0, r0, #9
 8000a1c:	bf18      	it	ne
 8000a1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a22:	d01e      	beq.n	8000a62 <__aeabi_fmul+0x66>
 8000a24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a30:	fba0 3101 	umull	r3, r1, r0, r1
 8000a34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a3c:	bf3e      	ittt	cc
 8000a3e:	0049      	lslcc	r1, r1, #1
 8000a40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a44:	005b      	lslcc	r3, r3, #1
 8000a46:	ea40 0001 	orr.w	r0, r0, r1
 8000a4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a4e:	2afd      	cmp	r2, #253	; 0xfd
 8000a50:	d81d      	bhi.n	8000a8e <__aeabi_fmul+0x92>
 8000a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	4770      	bx	lr
 8000a62:	f090 0f00 	teq	r0, #0
 8000a66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a6a:	bf08      	it	eq
 8000a6c:	0249      	lsleq	r1, r1, #9
 8000a6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a76:	3a7f      	subs	r2, #127	; 0x7f
 8000a78:	bfc2      	ittt	gt
 8000a7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a82:	4770      	bxgt	lr
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	3a01      	subs	r2, #1
 8000a8e:	dc5d      	bgt.n	8000b4c <__aeabi_fmul+0x150>
 8000a90:	f112 0f19 	cmn.w	r2, #25
 8000a94:	bfdc      	itt	le
 8000a96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bxle	lr
 8000a9c:	f1c2 0200 	rsb	r2, r2, #0
 8000aa0:	0041      	lsls	r1, r0, #1
 8000aa2:	fa21 f102 	lsr.w	r1, r1, r2
 8000aa6:	f1c2 0220 	rsb	r2, r2, #32
 8000aaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ab2:	f140 0000 	adc.w	r0, r0, #0
 8000ab6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000aba:	bf08      	it	eq
 8000abc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ac0:	4770      	bx	lr
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aca:	bf02      	ittt	eq
 8000acc:	0040      	lsleq	r0, r0, #1
 8000ace:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ad2:	3a01      	subeq	r2, #1
 8000ad4:	d0f9      	beq.n	8000aca <__aeabi_fmul+0xce>
 8000ad6:	ea40 000c 	orr.w	r0, r0, ip
 8000ada:	f093 0f00 	teq	r3, #0
 8000ade:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae2:	bf02      	ittt	eq
 8000ae4:	0049      	lsleq	r1, r1, #1
 8000ae6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000aea:	3b01      	subeq	r3, #1
 8000aec:	d0f9      	beq.n	8000ae2 <__aeabi_fmul+0xe6>
 8000aee:	ea41 010c 	orr.w	r1, r1, ip
 8000af2:	e78f      	b.n	8000a14 <__aeabi_fmul+0x18>
 8000af4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000af8:	ea92 0f0c 	teq	r2, ip
 8000afc:	bf18      	it	ne
 8000afe:	ea93 0f0c 	teqne	r3, ip
 8000b02:	d00a      	beq.n	8000b1a <__aeabi_fmul+0x11e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1d8      	bne.n	8000ac2 <__aeabi_fmul+0xc6>
 8000b10:	ea80 0001 	eor.w	r0, r0, r1
 8000b14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	4770      	bx	lr
 8000b1a:	f090 0f00 	teq	r0, #0
 8000b1e:	bf17      	itett	ne
 8000b20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b24:	4608      	moveq	r0, r1
 8000b26:	f091 0f00 	teqne	r1, #0
 8000b2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b2e:	d014      	beq.n	8000b5a <__aeabi_fmul+0x15e>
 8000b30:	ea92 0f0c 	teq	r2, ip
 8000b34:	d101      	bne.n	8000b3a <__aeabi_fmul+0x13e>
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	d10f      	bne.n	8000b5a <__aeabi_fmul+0x15e>
 8000b3a:	ea93 0f0c 	teq	r3, ip
 8000b3e:	d103      	bne.n	8000b48 <__aeabi_fmul+0x14c>
 8000b40:	024b      	lsls	r3, r1, #9
 8000b42:	bf18      	it	ne
 8000b44:	4608      	movne	r0, r1
 8000b46:	d108      	bne.n	8000b5a <__aeabi_fmul+0x15e>
 8000b48:	ea80 0001 	eor.w	r0, r0, r1
 8000b4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_fdiv>:
 8000b64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b72:	ea92 0f0c 	teqne	r2, ip
 8000b76:	ea93 0f0c 	teqne	r3, ip
 8000b7a:	d069      	beq.n	8000c50 <__aeabi_fdiv+0xec>
 8000b7c:	eba2 0203 	sub.w	r2, r2, r3
 8000b80:	ea80 0c01 	eor.w	ip, r0, r1
 8000b84:	0249      	lsls	r1, r1, #9
 8000b86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b8a:	d037      	beq.n	8000bfc <__aeabi_fdiv+0x98>
 8000b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	bf38      	it	cc
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ba6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000baa:	428b      	cmp	r3, r1
 8000bac:	bf24      	itt	cs
 8000bae:	1a5b      	subcs	r3, r3, r1
 8000bb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bb8:	bf24      	itt	cs
 8000bba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bc6:	bf24      	itt	cs
 8000bc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bd4:	bf24      	itt	cs
 8000bd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	bf18      	it	ne
 8000be2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000be6:	d1e0      	bne.n	8000baa <__aeabi_fdiv+0x46>
 8000be8:	2afd      	cmp	r2, #253	; 0xfd
 8000bea:	f63f af50 	bhi.w	8000a8e <__aeabi_fmul+0x92>
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c00:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c04:	327f      	adds	r2, #127	; 0x7f
 8000c06:	bfc2      	ittt	gt
 8000c08:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c0c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c10:	4770      	bxgt	lr
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	3a01      	subs	r2, #1
 8000c1c:	e737      	b.n	8000a8e <__aeabi_fmul+0x92>
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fdiv+0xc2>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fdiv+0xda>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e795      	b.n	8000b7c <__aeabi_fdiv+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	d108      	bne.n	8000c6c <__aeabi_fdiv+0x108>
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	f47f af7d 	bne.w	8000b5a <__aeabi_fmul+0x15e>
 8000c60:	ea93 0f0c 	teq	r3, ip
 8000c64:	f47f af70 	bne.w	8000b48 <__aeabi_fmul+0x14c>
 8000c68:	4608      	mov	r0, r1
 8000c6a:	e776      	b.n	8000b5a <__aeabi_fmul+0x15e>
 8000c6c:	ea93 0f0c 	teq	r3, ip
 8000c70:	d104      	bne.n	8000c7c <__aeabi_fdiv+0x118>
 8000c72:	024b      	lsls	r3, r1, #9
 8000c74:	f43f af4c 	beq.w	8000b10 <__aeabi_fmul+0x114>
 8000c78:	4608      	mov	r0, r1
 8000c7a:	e76e      	b.n	8000b5a <__aeabi_fmul+0x15e>
 8000c7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c80:	bf18      	it	ne
 8000c82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c86:	d1ca      	bne.n	8000c1e <__aeabi_fdiv+0xba>
 8000c88:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c8c:	f47f af5c 	bne.w	8000b48 <__aeabi_fmul+0x14c>
 8000c90:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	f47f af3c 	bne.w	8000b10 <__aeabi_fmul+0x114>
 8000c98:	e75f      	b.n	8000b5a <__aeabi_fmul+0x15e>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_f2iz>:
 8000c9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ca4:	d30f      	bcc.n	8000cc6 <__aeabi_f2iz+0x2a>
 8000ca6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000caa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cae:	d90d      	bls.n	8000ccc <__aeabi_f2iz+0x30>
 8000cb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000cc0:	bf18      	it	ne
 8000cc2:	4240      	negne	r0, r0
 8000cc4:	4770      	bx	lr
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	4770      	bx	lr
 8000ccc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cd0:	d101      	bne.n	8000cd6 <__aeabi_f2iz+0x3a>
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	d105      	bne.n	8000ce2 <__aeabi_f2iz+0x46>
 8000cd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000cda:	bf08      	it	eq
 8000cdc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b996 	b.w	800102c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f826 	bl	8000d58 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_f2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	f7ff fcb9 	bl	8000690 <__aeabi_f2d>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <__aeabi_f2ulz+0x38>)
 8000d22:	4606      	mov	r6, r0
 8000d24:	460f      	mov	r7, r1
 8000d26:	f7ff fa25 	bl	8000174 <__aeabi_dmul>
 8000d2a:	f000 f981 	bl	8001030 <__aeabi_d2uiz>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	f7ff fc8c 	bl	800064c <__aeabi_ui2d>
 8000d34:	2200      	movs	r2, #0
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <__aeabi_f2ulz+0x3c>)
 8000d38:	f7ff fa1c 	bl	8000174 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4630      	mov	r0, r6
 8000d42:	4639      	mov	r1, r7
 8000d44:	f7ff fb44 	bl	80003d0 <__aeabi_dsub>
 8000d48:	f000 f972 	bl	8001030 <__aeabi_d2uiz>
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d50:	3df00000 	.word	0x3df00000
 8000d54:	41f00000 	.word	0x41f00000

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	4688      	mov	r8, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14d      	bne.n	8000e04 <__udivmoddi4+0xac>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d968      	bls.n	8000e40 <__udivmoddi4+0xe8>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b152      	cbz	r2, 8000d8a <__udivmoddi4+0x32>
 8000d74:	fa01 f302 	lsl.w	r3, r1, r2
 8000d78:	f1c2 0120 	rsb	r1, r2, #32
 8000d7c:	fa20 f101 	lsr.w	r1, r0, r1
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	ea41 0803 	orr.w	r8, r1, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d8e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb01 8817 	mls	r8, r1, r7, r8
 8000d9a:	fb07 f00e 	mul.w	r0, r7, lr
 8000d9e:	0c23      	lsrs	r3, r4, #16
 8000da0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da4:	4298      	cmp	r0, r3
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x66>
 8000da8:	eb1c 0303 	adds.w	r3, ip, r3
 8000dac:	f107 35ff 	add.w	r5, r7, #4294967295
 8000db0:	f080 811e 	bcs.w	8000ff0 <__udivmoddi4+0x298>
 8000db4:	4298      	cmp	r0, r3
 8000db6:	f240 811b 	bls.w	8000ff0 <__udivmoddi4+0x298>
 8000dba:	3f02      	subs	r7, #2
 8000dbc:	4463      	add	r3, ip
 8000dbe:	1a1b      	subs	r3, r3, r0
 8000dc0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000dc4:	fb01 3310 	mls	r3, r1, r0, r3
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	b2a4      	uxth	r4, r4
 8000dce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dde:	f080 8109 	bcs.w	8000ff4 <__udivmoddi4+0x29c>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	f240 8106 	bls.w	8000ff4 <__udivmoddi4+0x29c>
 8000de8:	4464      	add	r4, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	2100      	movs	r1, #0
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000df6:	b11e      	cbz	r6, 8000e00 <__udivmoddi4+0xa8>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	40d4      	lsrs	r4, r2
 8000dfc:	e9c6 4300 	strd	r4, r3, [r6]
 8000e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0xc2>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	f000 80ee 	beq.w	8000fea <__udivmoddi4+0x292>
 8000e0e:	2100      	movs	r1, #0
 8000e10:	e9c6 0500 	strd	r0, r5, [r6]
 8000e14:	4608      	mov	r0, r1
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x160>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd4>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80fc 	bhi.w	8001024 <__udivmoddi4+0x2cc>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb65 0303 	sbc.w	r3, r5, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4698      	mov	r8, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d0e2      	beq.n	8000e00 <__udivmoddi4+0xa8>
 8000e3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3e:	e7df      	b.n	8000e00 <__udivmoddi4+0xa8>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xec>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 8091 	bne.w	8000f70 <__udivmoddi4+0x218>
 8000e4e:	eba1 000c 	sub.w	r0, r1, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e60:	fb07 0013 	mls	r0, r7, r3, r0
 8000e64:	0c25      	lsrs	r5, r4, #16
 8000e66:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e6a:	fb0e f003 	mul.w	r0, lr, r3
 8000e6e:	42a8      	cmp	r0, r5
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x12c>
 8000e72:	eb1c 0505 	adds.w	r5, ip, r5
 8000e76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x12a>
 8000e7c:	42a8      	cmp	r0, r5
 8000e7e:	f200 80ce 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000e82:	4643      	mov	r3, r8
 8000e84:	1a2d      	subs	r5, r5, r0
 8000e86:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e8a:	fb07 5510 	mls	r5, r7, r0, r5
 8000e8e:	fb0e fe00 	mul.w	lr, lr, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x156>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ea4:	d202      	bcs.n	8000eac <__udivmoddi4+0x154>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f200 80b6 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000eac:	4628      	mov	r0, r5
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb6:	e79e      	b.n	8000df6 <__udivmoddi4+0x9e>
 8000eb8:	f1c1 0720 	rsb	r7, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000eca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ece:	fbba f8f9 	udiv	r8, sl, r9
 8000ed2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed6:	fb09 aa18 	mls	sl, r9, r8, sl
 8000eda:	408d      	lsls	r5, r1
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	431d      	orrs	r5, r3
 8000ee2:	fa00 f301 	lsl.w	r3, r0, r1
 8000ee6:	fb08 f00e 	mul.w	r0, r8, lr
 8000eea:	0c2c      	lsrs	r4, r5, #16
 8000eec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000ef0:	42a0      	cmp	r0, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d90b      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f00:	f080 8088 	bcs.w	8001014 <__udivmoddi4+0x2bc>
 8000f04:	42a0      	cmp	r0, r4
 8000f06:	f240 8085 	bls.w	8001014 <__udivmoddi4+0x2bc>
 8000f0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0e:	4464      	add	r4, ip
 8000f10:	1a24      	subs	r4, r4, r0
 8000f12:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f16:	fb09 4410 	mls	r4, r9, r0, r4
 8000f1a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f1e:	b2ad      	uxth	r5, r5
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	45a6      	cmp	lr, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1e2>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f30:	d26c      	bcs.n	800100c <__udivmoddi4+0x2b4>
 8000f32:	45a6      	cmp	lr, r4
 8000f34:	d96a      	bls.n	800100c <__udivmoddi4+0x2b4>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4464      	add	r4, ip
 8000f3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3e:	fba0 9502 	umull	r9, r5, r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	42ac      	cmp	r4, r5
 8000f48:	46c8      	mov	r8, r9
 8000f4a:	46ae      	mov	lr, r5
 8000f4c:	d356      	bcc.n	8000ffc <__udivmoddi4+0x2a4>
 8000f4e:	d053      	beq.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d069      	beq.n	8001028 <__udivmoddi4+0x2d0>
 8000f54:	ebb3 0208 	subs.w	r2, r3, r8
 8000f58:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5c:	fa22 f301 	lsr.w	r3, r2, r1
 8000f60:	fa04 f707 	lsl.w	r7, r4, r7
 8000f64:	431f      	orrs	r7, r3
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e747      	b.n	8000e00 <__udivmoddi4+0xa8>
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	f1c2 0120 	rsb	r1, r2, #32
 8000f78:	fa25 f301 	lsr.w	r3, r5, r1
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa20 f101 	lsr.w	r1, r0, r1
 8000f84:	4095      	lsls	r5, r2
 8000f86:	430d      	orrs	r5, r1
 8000f88:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f8c:	fb07 3311 	mls	r3, r7, r1, r3
 8000f90:	fa1f fe8c 	uxth.w	lr, ip
 8000f94:	0c28      	lsrs	r0, r5, #16
 8000f96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f9a:	fb01 f30e 	mul.w	r3, r1, lr
 8000f9e:	4283      	cmp	r3, r0
 8000fa0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x260>
 8000fa6:	eb1c 0000 	adds.w	r0, ip, r0
 8000faa:	f101 38ff 	add.w	r8, r1, #4294967295
 8000fae:	d22f      	bcs.n	8001010 <__udivmoddi4+0x2b8>
 8000fb0:	4283      	cmp	r3, r0
 8000fb2:	d92d      	bls.n	8001010 <__udivmoddi4+0x2b8>
 8000fb4:	3902      	subs	r1, #2
 8000fb6:	4460      	add	r0, ip
 8000fb8:	1ac0      	subs	r0, r0, r3
 8000fba:	fbb0 f3f7 	udiv	r3, r0, r7
 8000fbe:	fb07 0013 	mls	r0, r7, r3, r0
 8000fc2:	b2ad      	uxth	r5, r5
 8000fc4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000fc8:	fb03 f00e 	mul.w	r0, r3, lr
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x28a>
 8000fd0:	eb1c 0505 	adds.w	r5, ip, r5
 8000fd4:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd8:	d216      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fda:	42a8      	cmp	r0, r5
 8000fdc:	d914      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fde:	3b02      	subs	r3, #2
 8000fe0:	4465      	add	r5, ip
 8000fe2:	1a28      	subs	r0, r5, r0
 8000fe4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe8:	e738      	b.n	8000e5c <__udivmoddi4+0x104>
 8000fea:	4631      	mov	r1, r6
 8000fec:	4630      	mov	r0, r6
 8000fee:	e707      	b.n	8000e00 <__udivmoddi4+0xa8>
 8000ff0:	462f      	mov	r7, r5
 8000ff2:	e6e4      	b.n	8000dbe <__udivmoddi4+0x66>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6f9      	b.n	8000dec <__udivmoddi4+0x94>
 8000ff8:	454b      	cmp	r3, r9
 8000ffa:	d2a9      	bcs.n	8000f50 <__udivmoddi4+0x1f8>
 8000ffc:	ebb9 0802 	subs.w	r8, r9, r2
 8001000:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001004:	3801      	subs	r0, #1
 8001006:	e7a3      	b.n	8000f50 <__udivmoddi4+0x1f8>
 8001008:	4643      	mov	r3, r8
 800100a:	e7ea      	b.n	8000fe2 <__udivmoddi4+0x28a>
 800100c:	4628      	mov	r0, r5
 800100e:	e794      	b.n	8000f3a <__udivmoddi4+0x1e2>
 8001010:	4641      	mov	r1, r8
 8001012:	e7d1      	b.n	8000fb8 <__udivmoddi4+0x260>
 8001014:	46d0      	mov	r8, sl
 8001016:	e77b      	b.n	8000f10 <__udivmoddi4+0x1b8>
 8001018:	4464      	add	r4, ip
 800101a:	3802      	subs	r0, #2
 800101c:	e747      	b.n	8000eae <__udivmoddi4+0x156>
 800101e:	3b02      	subs	r3, #2
 8001020:	4465      	add	r5, ip
 8001022:	e72f      	b.n	8000e84 <__udivmoddi4+0x12c>
 8001024:	4608      	mov	r0, r1
 8001026:	e706      	b.n	8000e36 <__udivmoddi4+0xde>
 8001028:	4631      	mov	r1, r6
 800102a:	e6e9      	b.n	8000e00 <__udivmoddi4+0xa8>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <__aeabi_d2uiz>:
 8001030:	004a      	lsls	r2, r1, #1
 8001032:	d211      	bcs.n	8001058 <__aeabi_d2uiz+0x28>
 8001034:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001038:	d211      	bcs.n	800105e <__aeabi_d2uiz+0x2e>
 800103a:	d50d      	bpl.n	8001058 <__aeabi_d2uiz+0x28>
 800103c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001040:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001044:	d40e      	bmi.n	8001064 <__aeabi_d2uiz+0x34>
 8001046:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800104a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001052:	fa23 f002 	lsr.w	r0, r3, r2
 8001056:	4770      	bx	lr
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	4770      	bx	lr
 800105e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001062:	d102      	bne.n	800106a <__aeabi_d2uiz+0x3a>
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 fc29 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f839 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 f9d3 	bl	8001428 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001082:	f000 f897 	bl	80011b4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001086:	f000 f8e7 	bl	8001258 <MX_I2C1_Init>
  MX_RTC_Init();
 800108a:	f000 f913 	bl	80012b4 <MX_RTC_Init>
  MX_CRC_Init();
 800108e:	f000 f8cf 	bl	8001230 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001092:	f000 f99f 	bl	80013d4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001096:	f000 f929 	bl	80012ec <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800109a:	f009 fc91 	bl	800a9c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //int i = HAL_I2C_IsDeviceReady(&hi2c1, SI5351_ADDRESS, 10, 1);
  //__NOP();

  si5351_Init(0);
 800109e:	2000      	movs	r0, #0
 80010a0:	f00a f886 	bl	800b1b0 <si5351_Init>
  si5351_EnableOutputs(0);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f00a fa6d 	bl	800b584 <si5351_EnableOutputs>
  HAL_Delay(300);
 80010aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ae:	f000 fc6f 	bl	8001990 <HAL_Delay>
  char A[1];
  nmeaProcessString(A, 0);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00a fc2a 	bl	800b910 <nmeaProcessString>

  wsprInit(hzToFreq(28000000.0f));
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <main+0x78>)
 80010be:	f00a fe9f 	bl	800be00 <hzToFreq>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f00a feff 	bl	800becc <wsprInit>

  wsprStartTx();
 80010ce:	f00a fe79 	bl	800bdc4 <wsprStartTx>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <main+0x7c>)
 80010d8:	f001 f956 	bl	8002388 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80010dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e0:	f000 fc56 	bl	8001990 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010e4:	e7f5      	b.n	80010d2 <main+0x62>
 80010e6:	bf00      	nop
 80010e8:	4bd59f80 	.word	0x4bd59f80
 80010ec:	40011000 	.word	0x40011000

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b094      	sub	sp, #80	; 0x50
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00a ffa8 	bl	800c054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001120:	2309      	movs	r3, #9
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112e:	2301      	movs	r3, #1
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001132:	2301      	movs	r3, #1
 8001134:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001140:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fb54 	bl	80047f8 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001156:	f000 f9e9 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fdc0 	bl	8004cfc <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001182:	f000 f9d3 	bl	800152c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8001186:	2313      	movs	r3, #19
 8001188:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800118a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001194:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4618      	mov	r0, r3
 800119e:	f003 ff45 	bl	800502c <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80011a8:	f000 f9c0 	bl	800152c <Error_Handler>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3750      	adds	r7, #80	; 0x50
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_ADC1_Init+0x74>)
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <MX_ADC1_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_ADC1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_ADC1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_ADC1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_ADC1_Init+0x74>)
 80011de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_ADC1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_ADC1_Init+0x74>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <MX_ADC1_Init+0x74>)
 80011f2:	f000 fbf1 	bl	80019d8 <HAL_ADC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011fc:	f000 f996 	bl	800152c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001204:	2301      	movs	r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_ADC1_Init+0x74>)
 8001212:	f000 fcb9 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800121c:	f000 f986 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200003e4 	.word	0x200003e4
 800122c:	40012400 	.word	0x40012400

08001230 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_CRC_Init+0x20>)
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <MX_CRC_Init+0x24>)
 8001238:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_CRC_Init+0x20>)
 800123c:	f000 feeb 	bl	8002016 <HAL_CRC_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001246:	f000 f971 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000414 	.word	0x20000414
 8001254:	40023000 	.word	0x40023000

08001258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f001 f891 	bl	80023bc <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 f944 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000041c 	.word	0x2000041c
 80012ac:	40005400 	.word	0x40005400
 80012b0:	00061a80 	.word	0x00061a80

080012b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_RTC_Init+0x30>)
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <MX_RTC_Init+0x34>)
 80012bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_RTC_Init+0x30>)
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_RTC_Init+0x30>)
 80012c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012cc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_RTC_Init+0x30>)
 80012d0:	f004 f822 	bl	8005318 <HAL_RTC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80012da:	f000 f927 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000470 	.word	0x20000470
 80012e8:	40002800 	.word	0x40002800

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_TIM3_Init+0xe0>)
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <MX_TIM3_Init+0xe4>)
 8001320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM1_PSC;
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_TIM3_Init+0xe0>)
 8001324:	f242 720f 	movw	r2, #9999	; 0x270f
 8001328:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <MX_TIM3_Init+0xe0>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM1_ARR;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_TIM3_Init+0xe0>)
 8001332:	f241 3232 	movw	r2, #4914	; 0x1332
 8001336:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_TIM3_Init+0xe0>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_TIM3_Init+0xe0>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001344:	4821      	ldr	r0, [pc, #132]	; (80013cc <MX_TIM3_Init+0xe0>)
 8001346:	f004 f8fa 	bl	800553e <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001350:	f000 f8ec 	bl	800152c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	4619      	mov	r1, r3
 8001360:	481a      	ldr	r0, [pc, #104]	; (80013cc <MX_TIM3_Init+0xe0>)
 8001362:	f004 fb73 	bl	8005a4c <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800136c:	f000 f8de 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <MX_TIM3_Init+0xe0>)
 8001372:	f004 f9b3 	bl	80056dc <HAL_TIM_OC_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800137c:	f000 f8d6 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001380:	2320      	movs	r3, #32
 8001382:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4619      	mov	r1, r3
 800138e:	480f      	ldr	r0, [pc, #60]	; (80013cc <MX_TIM3_Init+0xe0>)
 8001390:	f004 fece 	bl	8006130 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800139a:	f000 f8c7 	bl	800152c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM3_Init+0xe0>)
 80013b6:	f004 faf1 	bl	800599c <HAL_TIM_OC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013c0:	f000 f8b4 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3738      	adds	r7, #56	; 0x38
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000484 	.word	0x20000484
 80013d0:	40000400 	.word	0x40000400

080013d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_USART1_UART_Init+0x50>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USART1_UART_Init+0x4c>)
 800140c:	f004 ff00 	bl	8006210 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001416:	f000 f889 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200004cc 	.word	0x200004cc
 8001424:	40013800 	.word	0x40013800

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <MX_GPIO_Init+0xf8>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a37      	ldr	r2, [pc, #220]	; (8001520 <MX_GPIO_Init+0xf8>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <MX_GPIO_Init+0xf8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <MX_GPIO_Init+0xf8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a31      	ldr	r2, [pc, #196]	; (8001520 <MX_GPIO_Init+0xf8>)
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <MX_GPIO_Init+0xf8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <MX_GPIO_Init+0xf8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a2b      	ldr	r2, [pc, #172]	; (8001520 <MX_GPIO_Init+0xf8>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <MX_GPIO_Init+0xf8>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <MX_GPIO_Init+0xf8>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a25      	ldr	r2, [pc, #148]	; (8001520 <MX_GPIO_Init+0xf8>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_GPIO_Init+0xf8>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <MX_GPIO_Init+0xfc>)
 80014a4:	f000 ff58 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2120      	movs	r1, #32
 80014ac:	481e      	ldr	r0, [pc, #120]	; (8001528 <MX_GPIO_Init+0x100>)
 80014ae:	f000 ff53 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b8:	481b      	ldr	r0, [pc, #108]	; (8001528 <MX_GPIO_Init+0x100>)
 80014ba:	f000 ff4d 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014c4:	2311      	movs	r3, #17
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_GPIO_Init+0xfc>)
 80014d8:	f000 fdba 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014dc:	2320      	movs	r3, #32
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_GPIO_Init+0x100>)
 80014f4:	f000 fdac 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_GPIO_Init+0x100>)
 8001512:	f000 fd9d 	bl	8002050 <HAL_GPIO_Init>

}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40011000 	.word	0x40011000
 8001528:	40010c00 	.word	0x40010c00

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_MspInit+0x5c>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_MspInit+0x5c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x5c>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x5c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_MspInit+0x60>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_MspInit+0x60>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	40010000 	.word	0x40010000

0800159c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_ADC_MspInit+0x6c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d121      	bne.n	8001600 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_ADC_MspInit+0x70>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80015ec:	2307      	movs	r3, #7
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	2303      	movs	r3, #3
 80015f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_ADC_MspInit+0x74>)
 80015fc:	f000 fd28 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40012400 	.word	0x40012400
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_CRC_MspInit+0x34>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10b      	bne.n	800163e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_CRC_MspInit+0x38>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_CRC_MspInit+0x38>)
 800162c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_CRC_MspInit+0x38>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40023000 	.word	0x40023000
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_I2C_MspInit+0x70>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d123      	bne.n	80016b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_I2C_MspInit+0x74>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <HAL_I2C_MspInit+0x74>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_I2C_MspInit+0x74>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001688:	23c0      	movs	r3, #192	; 0xc0
 800168a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <HAL_I2C_MspInit+0x78>)
 800169c:	f000 fcd8 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_I2C_MspInit+0x74>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_I2C_MspInit+0x74>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016aa:	61d3      	str	r3, [r2, #28]
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_I2C_MspInit+0x74>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010c00 	.word	0x40010c00

080016cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_RTC_MspInit+0x3c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d110      	bne.n	8001700 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80016de:	f003 f87f 	bl	80047e0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RTC_MspInit+0x40>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_RTC_MspInit+0x40>)
 80016e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_RTC_MspInit+0x40>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_RTC_MspInit+0x44>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40002800 	.word	0x40002800
 800170c:	40021000 	.word	0x40021000
 8001710:	4242043c 	.word	0x4242043c

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_TIM_Base_MspInit+0x44>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d113      	bne.n	800174e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_TIM_Base_MspInit+0x48>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <HAL_TIM_Base_MspInit+0x48>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_TIM_Base_MspInit+0x48>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	201d      	movs	r0, #29
 8001744:	f000 fc31 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001748:	201d      	movs	r0, #29
 800174a:	f000 fc4a 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40000400 	.word	0x40000400
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_UART_MspInit+0x8c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d131      	bne.n	80017e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_UART_MspInit+0x90>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_UART_MspInit+0x90>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_UART_MspInit+0x90>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_MspInit+0x90>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_UART_MspInit+0x90>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_UART_MspInit+0x90>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	4619      	mov	r1, r3
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <HAL_UART_MspInit+0x94>)
 80017c6:	f000 fc43 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_UART_MspInit+0x94>)
 80017e0:	f000 fc36 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010800 	.word	0x40010800

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <NMI_Handler+0x4>

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183e:	f000 f88b 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800184e:	f001 fc94 	bl	800317a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000ad8 	.word	0x20000ad8

0800185c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	wsprIntCall();
 8001860:	f00a fb7a 	bl	800bf58 <wsprIntCall>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM3_IRQHandler+0x14>)
 8001866:	f003 ff91 	bl	800578c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000484 	.word	0x20000484

08001874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001882:	490d      	ldr	r1, [pc, #52]	; (80018b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001898:	4c0a      	ldr	r4, [pc, #40]	; (80018c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018a6:	f7ff ffe5 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f00a fba1 	bl	800bff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ae:	f7ff fbdf 	bl	8001070 <main>
  bx lr
 80018b2:	4770      	bx	lr
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 80018bc:	0800c3c4 	.word	0x0800c3c4
  ldr r2, =_sbss
 80018c0:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 80018c4:	20001538 	.word	0x20001538

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x28>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 fb59 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fe26 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fb71 	bl	8001ffe <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 fb39 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000000 	.word	0x20000000
 8001950:	20000008 	.word	0x20000008
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x1c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_IncTick+0x20>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_IncTick+0x20>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000008 	.word	0x20000008
 8001978:	20000510 	.word	0x20000510

0800197c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_GetTick+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000510 	.word	0x20000510

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff fff0 	bl	800197c <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d005      	beq.n	80019b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_Delay+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b6:	bf00      	nop
 80019b8:	f7ff ffe0 	bl	800197c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8f7      	bhi.n	80019b8 <HAL_Delay+0x28>
  {
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008

080019d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0be      	b.n	8001b78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fdc0 	bl	800159c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f9ab 	bl	8001d78 <ADC_ConversionStop_Disable>
 8001a22:	4603      	mov	r3, r0
 8001a24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8099 	bne.w	8001b66 <HAL_ADC_Init+0x18e>
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 8095 	bne.w	8001b66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a44:	f023 0302 	bic.w	r3, r3, #2
 8001a48:	f043 0202 	orr.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7b1b      	ldrb	r3, [r3, #12]
 8001a5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a70:	d003      	beq.n	8001a7a <HAL_ADC_Init+0xa2>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_ADC_Init+0xa8>
 8001a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7e:	e000      	b.n	8001a82 <HAL_ADC_Init+0xaa>
 8001a80:	2300      	movs	r3, #0
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7d1b      	ldrb	r3, [r3, #20]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d119      	bne.n	8001ac4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7b1b      	ldrb	r3, [r3, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	035a      	lsls	r2, r3, #13
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <HAL_ADC_Init+0x1a8>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af4:	d003      	beq.n	8001afe <HAL_ADC_Init+0x126>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d104      	bne.n	8001b08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	051b      	lsls	r3, r3, #20
 8001b06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_ADC_Init+0x1ac>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10b      	bne.n	8001b44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b42:	e018      	b.n	8001b76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f023 0312 	bic.w	r3, r3, #18
 8001b4c:	f043 0210 	orr.w	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b64:	e007      	b.n	8001b76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	f043 0210 	orr.w	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	ffe1f7fd 	.word	0xffe1f7fd
 8001b84:	ff1f0efe 	.word	0xff1f0efe

08001b88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x20>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e0dc      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x1da>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d81c      	bhi.n	8001bf2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b05      	subs	r3, #5
 8001bca:	221f      	movs	r2, #31
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4019      	ands	r1, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	fa00 f203 	lsl.w	r2, r0, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf0:	e03c      	b.n	8001c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d81c      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b23      	subs	r3, #35	; 0x23
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4019      	ands	r1, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b23      	subs	r3, #35	; 0x23
 8001c26:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
 8001c32:	e01b      	b.n	8001c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b41      	subs	r3, #65	; 0x41
 8001c46:	221f      	movs	r2, #31
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b41      	subs	r3, #65	; 0x41
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	d91c      	bls.n	8001cae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68d9      	ldr	r1, [r3, #12]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	3b1e      	subs	r3, #30
 8001c86:	2207      	movs	r2, #7
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4019      	ands	r1, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6898      	ldr	r0, [r3, #8]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b1e      	subs	r3, #30
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	e019      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6919      	ldr	r1, [r3, #16]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6898      	ldr	r0, [r3, #8]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d132      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d125      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d126      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d11a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9a      	lsrs	r2, r3, #18
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d38:	e002      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f9      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x1b2>
 8001d46:	e007      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40012400 	.word	0x40012400
 8001d70:	20000000 	.word	0x20000000
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d12e      	bne.n	8001df0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001da2:	f7ff fdeb 	bl	800197c <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001da8:	e01b      	b.n	8001de2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001daa:	f7ff fde7 	bl	800197c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d914      	bls.n	8001de2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d10d      	bne.n	8001de2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	f043 0210 	orr.w	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d0dc      	beq.n	8001daa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4906      	ldr	r1, [pc, #24]	; (8001e94 <__NVIC_EnableIRQ+0x34>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff90 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff2d 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff42 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff90 	bl	8001eec <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5f 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff35 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e00e      	b.n	8002046 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	795b      	ldrb	r3, [r3, #5]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff faeb 	bl	8001614 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	; 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002062:	e169      	b.n	8002338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002064:	2201      	movs	r2, #1
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 8158 	bne.w	8002332 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a9a      	ldr	r2, [pc, #616]	; (80022f0 <HAL_GPIO_Init+0x2a0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d05e      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 800208c:	4a98      	ldr	r2, [pc, #608]	; (80022f0 <HAL_GPIO_Init+0x2a0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d875      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 8002092:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <HAL_GPIO_Init+0x2a4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d058      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 8002098:	4a96      	ldr	r2, [pc, #600]	; (80022f4 <HAL_GPIO_Init+0x2a4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d86f      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 800209e:	4a96      	ldr	r2, [pc, #600]	; (80022f8 <HAL_GPIO_Init+0x2a8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d052      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020a4:	4a94      	ldr	r2, [pc, #592]	; (80022f8 <HAL_GPIO_Init+0x2a8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d869      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020aa:	4a94      	ldr	r2, [pc, #592]	; (80022fc <HAL_GPIO_Init+0x2ac>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04c      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020b0:	4a92      	ldr	r2, [pc, #584]	; (80022fc <HAL_GPIO_Init+0x2ac>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d863      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020b6:	4a92      	ldr	r2, [pc, #584]	; (8002300 <HAL_GPIO_Init+0x2b0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d046      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020bc:	4a90      	ldr	r2, [pc, #576]	; (8002300 <HAL_GPIO_Init+0x2b0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d85d      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d82a      	bhi.n	800211c <HAL_GPIO_Init+0xcc>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d859      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020ca:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <HAL_GPIO_Init+0x80>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	08002125 	.word	0x08002125
 80020d8:	08002137 	.word	0x08002137
 80020dc:	08002179 	.word	0x08002179
 80020e0:	0800217f 	.word	0x0800217f
 80020e4:	0800217f 	.word	0x0800217f
 80020e8:	0800217f 	.word	0x0800217f
 80020ec:	0800217f 	.word	0x0800217f
 80020f0:	0800217f 	.word	0x0800217f
 80020f4:	0800217f 	.word	0x0800217f
 80020f8:	0800217f 	.word	0x0800217f
 80020fc:	0800217f 	.word	0x0800217f
 8002100:	0800217f 	.word	0x0800217f
 8002104:	0800217f 	.word	0x0800217f
 8002108:	0800217f 	.word	0x0800217f
 800210c:	0800217f 	.word	0x0800217f
 8002110:	0800217f 	.word	0x0800217f
 8002114:	0800212d 	.word	0x0800212d
 8002118:	08002141 	.word	0x08002141
 800211c:	4a79      	ldr	r2, [pc, #484]	; (8002304 <HAL_GPIO_Init+0x2b4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002122:	e02c      	b.n	800217e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e029      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	3304      	adds	r3, #4
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e024      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	3308      	adds	r3, #8
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e01f      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	330c      	adds	r3, #12
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e01a      	b.n	8002180 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002152:	2304      	movs	r3, #4
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e013      	b.n	8002180 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	611a      	str	r2, [r3, #16]
          break;
 800216a:	e009      	b.n	8002180 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216c:	2308      	movs	r3, #8
 800216e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	615a      	str	r2, [r3, #20]
          break;
 8002176:	e003      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x130>
          break;
 800217e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2bff      	cmp	r3, #255	; 0xff
 8002184:	d801      	bhi.n	800218a <HAL_GPIO_Init+0x13a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	e001      	b.n	800218e <HAL_GPIO_Init+0x13e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2bff      	cmp	r3, #255	; 0xff
 8002194:	d802      	bhi.n	800219c <HAL_GPIO_Init+0x14c>
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x152>
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	3b08      	subs	r3, #8
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	210f      	movs	r1, #15
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80b1 	beq.w	8002332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d0:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <HAL_GPIO_Init+0x2b8>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <HAL_GPIO_Init+0x2b8>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_GPIO_Init+0x2b8>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e8:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_GPIO_Init+0x2bc>)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a40      	ldr	r2, [pc, #256]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <HAL_GPIO_Init+0x1ec>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3f      	ldr	r2, [pc, #252]	; (8002314 <HAL_GPIO_Init+0x2c4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00d      	beq.n	8002238 <HAL_GPIO_Init+0x1e8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3e      	ldr	r2, [pc, #248]	; (8002318 <HAL_GPIO_Init+0x2c8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_Init+0x1e4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3d      	ldr	r2, [pc, #244]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_GPIO_Init+0x1e0>
 800222c:	2303      	movs	r3, #3
 800222e:	e006      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002230:	2304      	movs	r3, #4
 8002232:	e004      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002234:	2302      	movs	r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_GPIO_Init+0x1ee>
 800223c:	2300      	movs	r3, #0
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	f002 0203 	and.w	r2, r2, #3
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	4093      	lsls	r3, r2
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800224e:	492f      	ldr	r1, [pc, #188]	; (800230c <HAL_GPIO_Init+0x2bc>)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	492c      	ldr	r1, [pc, #176]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4928      	ldr	r1, [pc, #160]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002280:	4013      	ands	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4922      	ldr	r1, [pc, #136]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	491e      	ldr	r1, [pc, #120]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4918      	ldr	r1, [pc, #96]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4914      	ldr	r1, [pc, #80]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d021      	beq.n	8002324 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	490e      	ldr	r1, [pc, #56]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
 80022ec:	e021      	b.n	8002332 <HAL_GPIO_Init+0x2e2>
 80022ee:	bf00      	nop
 80022f0:	10320000 	.word	0x10320000
 80022f4:	10310000 	.word	0x10310000
 80022f8:	10220000 	.word	0x10220000
 80022fc:	10210000 	.word	0x10210000
 8002300:	10120000 	.word	0x10120000
 8002304:	10110000 	.word	0x10110000
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000
 8002310:	40010800 	.word	0x40010800
 8002314:	40010c00 	.word	0x40010c00
 8002318:	40011000 	.word	0x40011000
 800231c:	40011400 	.word	0x40011400
 8002320:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_GPIO_Init+0x304>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	43db      	mvns	r3, r3
 800232c:	4909      	ldr	r1, [pc, #36]	; (8002354 <HAL_GPIO_Init+0x304>)
 800232e:	4013      	ands	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	3301      	adds	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	f47f ae8e 	bne.w	8002064 <HAL_GPIO_Init+0x14>
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	372c      	adds	r7, #44	; 0x2c
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	4613      	mov	r3, r2
 8002366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002368:	787b      	ldrb	r3, [r7, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002374:	e003      	b.n	800237e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43d9      	mvns	r1, r3
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	400b      	ands	r3, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e12b      	b.n	8002626 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff f934 	bl	8001650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2224      	movs	r2, #36	; 0x24
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800241e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002420:	f002 fdbe 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8002424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a81      	ldr	r2, [pc, #516]	; (8002630 <HAL_I2C_Init+0x274>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d807      	bhi.n	8002440 <HAL_I2C_Init+0x84>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a80      	ldr	r2, [pc, #512]	; (8002634 <HAL_I2C_Init+0x278>)
 8002434:	4293      	cmp	r3, r2
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e006      	b.n	800244e <HAL_I2C_Init+0x92>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a7d      	ldr	r2, [pc, #500]	; (8002638 <HAL_I2C_Init+0x27c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	bf94      	ite	ls
 8002448:	2301      	movls	r3, #1
 800244a:	2300      	movhi	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0e7      	b.n	8002626 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4a78      	ldr	r2, [pc, #480]	; (800263c <HAL_I2C_Init+0x280>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0c9b      	lsrs	r3, r3, #18
 8002460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_I2C_Init+0x274>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d802      	bhi.n	8002490 <HAL_I2C_Init+0xd4>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3301      	adds	r3, #1
 800248e:	e009      	b.n	80024a4 <HAL_I2C_Init+0xe8>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	4a69      	ldr	r2, [pc, #420]	; (8002640 <HAL_I2C_Init+0x284>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	3301      	adds	r3, #1
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	495c      	ldr	r1, [pc, #368]	; (8002630 <HAL_I2C_Init+0x274>)
 80024c0:	428b      	cmp	r3, r1
 80024c2:	d819      	bhi.n	80024f8 <HAL_I2C_Init+0x13c>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e59      	subs	r1, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d2:	1c59      	adds	r1, r3, #1
 80024d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024d8:	400b      	ands	r3, r1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_I2C_Init+0x138>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1e59      	subs	r1, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f2:	e051      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e04f      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <HAL_I2C_Init+0x168>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e012      	b.n	800254a <HAL_I2C_Init+0x18e>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e58      	subs	r0, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	0099      	lsls	r1, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Init+0x196>
 800254e:	2301      	movs	r3, #1
 8002550:	e022      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10e      	bne.n	8002578 <HAL_I2C_Init+0x1bc>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1e58      	subs	r0, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	440b      	add	r3, r1
 8002568:	fbb0 f3f3 	udiv	r3, r0, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002576:	e00f      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	0099      	lsls	r1, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	fbb0 f3f3 	udiv	r3, r0, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	6809      	ldr	r1, [r1, #0]
 800259c:	4313      	orrs	r3, r2
 800259e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6911      	ldr	r1, [r2, #16]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	430b      	orrs	r3, r1
 80025da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	000186a0 	.word	0x000186a0
 8002634:	001e847f 	.word	0x001e847f
 8002638:	003d08ff 	.word	0x003d08ff
 800263c:	431bde83 	.word	0x431bde83
 8002640:	10624dd3 	.word	0x10624dd3

08002644 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	4608      	mov	r0, r1
 800264e:	4611      	mov	r1, r2
 8002650:	461a      	mov	r2, r3
 8002652:	4603      	mov	r3, r0
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	460b      	mov	r3, r1
 8002658:	813b      	strh	r3, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800265e:	f7ff f98d 	bl	800197c <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	f040 80d9 	bne.w	8002824 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2319      	movs	r3, #25
 8002678:	2201      	movs	r2, #1
 800267a:	496d      	ldr	r1, [pc, #436]	; (8002830 <HAL_I2C_Mem_Write+0x1ec>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fa9f 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
 800268a:	e0cc      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_I2C_Mem_Write+0x56>
 8002696:	2302      	movs	r3, #2
 8002698:	e0c5      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d007      	beq.n	80026c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2221      	movs	r2, #33	; 0x21
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <HAL_I2C_Mem_Write+0x1f0>)
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002702:	88f8      	ldrh	r0, [r7, #6]
 8002704:	893a      	ldrh	r2, [r7, #8]
 8002706:	8979      	ldrh	r1, [r7, #10]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4603      	mov	r3, r0
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f9be 	bl	8002a94 <I2C_RequestMemoryWrite>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d052      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e081      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fb20 	bl	8002d6c <I2C_WaitOnTXEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b04      	cmp	r3, #4
 8002738:	d107      	bne.n	800274a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_I2C_Mem_Write+0x180>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1aa      	bne.n	8002722 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fb0c 	bl	8002dee <I2C_WaitOnBTFFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d107      	bne.n	80027f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e016      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	00100002 	.word	0x00100002
 8002834:	ffff0000 	.word	0xffff0000

08002838 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff f898 	bl	800197c <HAL_GetTick>
 800284c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 8111 	bne.w	8002a82 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2319      	movs	r3, #25
 8002866:	2201      	movs	r2, #1
 8002868:	4988      	ldr	r1, [pc, #544]	; (8002a8c <HAL_I2C_IsDeviceReady+0x254>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f9a8 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e104      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_IsDeviceReady+0x50>
 8002884:	2302      	movs	r3, #2
 8002886:	e0fd      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x24c>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2224      	movs	r2, #36	; 0x24
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4a70      	ldr	r2, [pc, #448]	; (8002a90 <HAL_I2C_IsDeviceReady+0x258>)
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f966 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002908:	d103      	bne.n	8002912 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0b6      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002924:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002926:	f7ff f829 	bl	800197c <HAL_GetTick>
 800292a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800295a:	e025      	b.n	80029a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800295c:	f7ff f80e 	bl	800197c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d302      	bcc.n	8002972 <HAL_I2C_IsDeviceReady+0x13a>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	22a0      	movs	r2, #160	; 0xa0
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2ba0      	cmp	r3, #160	; 0xa0
 80029b2:	d005      	beq.n	80029c0 <HAL_I2C_IsDeviceReady+0x188>
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_I2C_IsDeviceReady+0x188>
 80029ba:	7dbb      	ldrb	r3, [r7, #22]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0cd      	beq.n	800295c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d129      	bne.n	8002a2a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2319      	movs	r3, #25
 8002a02:	2201      	movs	r2, #1
 8002a04:	4921      	ldr	r1, [pc, #132]	; (8002a8c <HAL_I2C_IsDeviceReady+0x254>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f8da 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e036      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e02c      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a42:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2319      	movs	r3, #25
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	490f      	ldr	r1, [pc, #60]	; (8002a8c <HAL_I2C_IsDeviceReady+0x254>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f8b6 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e012      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f4ff af32 	bcc.w	80028d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	00100002 	.word	0x00100002
 8002a90:	ffff0000 	.word	0xffff0000

08002a94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	4608      	mov	r0, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	817b      	strh	r3, [r7, #10]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	813b      	strh	r3, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f878 	bl	8002bc0 <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae4:	d103      	bne.n	8002aee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e05f      	b.n	8002bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	492d      	ldr	r1, [pc, #180]	; (8002bbc <I2C_RequestMemoryWrite+0x128>)
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f8b0 	bl	8002c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e04c      	b.n	8002bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f91a 	bl	8002d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d107      	bne.n	8002b56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e02b      	b.n	8002bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b60:	893b      	ldrh	r3, [r7, #8]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	e021      	b.n	8002bb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f8f4 	bl	8002d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d107      	bne.n	8002ba2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e005      	b.n	8002bb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba6:	893b      	ldrh	r3, [r7, #8]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	00010002 	.word	0x00010002

08002bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd0:	e025      	b.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d021      	beq.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7fe fecf 	bl	800197c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d116      	bne.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e023      	b.n	8002c66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10d      	bne.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	e00c      	b.n	8002c5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d0b6      	beq.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c7c:	e051      	b.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8c:	d123      	bne.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ca6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0204 	orr.w	r2, r3, #4
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e046      	b.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d021      	beq.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe fe4d 	bl	800197c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e020      	b.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10c      	bne.n	8002d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4013      	ands	r3, r2
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	e00b      	b.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d18d      	bne.n	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d78:	e02d      	b.n	8002dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f878 	bl	8002e70 <I2C_IsAcknowledgeFailed>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e02d      	b.n	8002de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d021      	beq.n	8002dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d92:	f7fe fdf3 	bl	800197c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d116      	bne.n	8002dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0220 	orr.w	r2, r3, #32
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e007      	b.n	8002de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d1ca      	bne.n	8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dfa:	e02d      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f837 	bl	8002e70 <I2C_IsAcknowledgeFailed>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e02d      	b.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d021      	beq.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e14:	f7fe fdb2 	bl	800197c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d302      	bcc.n	8002e2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d1ca      	bne.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d11b      	bne.n	8002ec0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0204 	orr.w	r2, r3, #4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ece:	b08b      	sub	sp, #44	; 0x2c
 8002ed0:	af06      	add	r7, sp, #24
 8002ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0fd      	b.n	80030da <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f007 fee2 	bl	800acbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2203      	movs	r2, #3
 8002efc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fa85 	bl	8006414 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	687e      	ldr	r6, [r7, #4]
 8002f12:	466d      	mov	r5, sp
 8002f14:	f106 0410 	add.w	r4, r6, #16
 8002f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	602b      	str	r3, [r5, #0]
 8002f20:	1d33      	adds	r3, r6, #4
 8002f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f24:	6838      	ldr	r0, [r7, #0]
 8002f26:	f003 fa4f 	bl	80063c8 <USB_CoreInit>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0ce      	b.n	80030da <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fa80 	bl	8006448 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	e04c      	b.n	8002fe8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3301      	adds	r3, #1
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	b298      	uxth	r0, r3
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	440b      	add	r3, r1
 8002f8a:	3336      	adds	r3, #54	; 0x36
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3303      	adds	r3, #3
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3338      	adds	r3, #56	; 0x38
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	333c      	adds	r3, #60	; 0x3c
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	3340      	adds	r3, #64	; 0x40
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d3ad      	bcc.n	8002f4e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e044      	b.n	8003082 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	f203 1369 	addw	r3, r3, #361	; 0x169
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	3301      	adds	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d3b5      	bcc.n	8002ff8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	687e      	ldr	r6, [r7, #4]
 8003094:	466d      	mov	r5, sp
 8003096:	f106 0410 	add.w	r4, r6, #16
 800309a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	602b      	str	r3, [r5, #0]
 80030a2:	1d33      	adds	r3, r6, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	f003 f9da 	bl	8006460 <USB_DevInit>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00d      	b.n	80030da <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f005 fca0 	bl	8008a18 <USB_DevDisconnect>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_PCD_Start+0x16>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e016      	b.n	8003126 <HAL_PCD_Start+0x44>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f003 f96f 	bl	80063e8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800310a:	2101      	movs	r1, #1
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f008 f818 	bl	800b142 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f005 fc74 	bl	8008a04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_PCD_Stop+0x16>
 8003140:	2302      	movs	r3, #2
 8003142:	e016      	b.n	8003172 <HAL_PCD_Stop+0x44>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 f95f 	bl	8006414 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8003156:	2100      	movs	r1, #0
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f007 fff2 	bl	800b142 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f005 fc58 	bl	8008a18 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b088      	sub	sp, #32
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f005 fc50 	bl	8008a2c <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d102      	bne.n	800319e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fb00 	bl	800379e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f005 fc42 	bl	8008a2c <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d112      	bne.n	80031da <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031bc:	b29a      	uxth	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c6:	b292      	uxth	r2, r2
 80031c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f007 fdf0 	bl	800adb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f923 	bl	8003420 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f005 fc24 	bl	8008a2c <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ee:	d10b      	bne.n	8003208 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003202:	b292      	uxth	r2, r2
 8003204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f005 fc0d 	bl	8008a2c <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321c:	d10b      	bne.n	8003236 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003230:	b292      	uxth	r2, r2
 8003232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f005 fbf6 	bl	8008a2c <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d126      	bne.n	800329a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	b292      	uxth	r2, r2
 8003260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0208 	bic.w	r2, r2, #8
 8003276:	b292      	uxth	r2, r2
 8003278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f007 fdd1 	bl	800ae24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003294:	b292      	uxth	r2, r2
 8003296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f005 fbc4 	bl	8008a2c <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ae:	f040 8082 	bne.w	80033b6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e010      	b.n	80032da <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	7ffb      	ldrb	r3, [r7, #31]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	441a      	add	r2, r3
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	b292      	uxth	r2, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	3320      	adds	r3, #32
 80032ce:	443b      	add	r3, r7
 80032d0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80032d4:	7ffb      	ldrb	r3, [r7, #31]
 80032d6:	3301      	adds	r3, #1
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	7ffb      	ldrb	r3, [r7, #31]
 80032dc:	2b07      	cmp	r3, #7
 80032de:	d9eb      	bls.n	80032b8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	b292      	uxth	r2, r2
 80032f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	b292      	uxth	r2, r2
 800330c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003310:	bf00      	nop
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800331a:	b29b      	uxth	r3, r3
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f6      	beq.n	8003312 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	b292      	uxth	r2, r2
 8003338:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e00f      	b.n	8003362 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	4611      	mov	r1, r2
 800334a:	7ffa      	ldrb	r2, [r7, #31]
 800334c:	0092      	lsls	r2, r2, #2
 800334e:	440a      	add	r2, r1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	3320      	adds	r3, #32
 8003354:	443b      	add	r3, r7
 8003356:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800335a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800335c:	7ffb      	ldrb	r3, [r7, #31]
 800335e:	3301      	adds	r3, #1
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	2b07      	cmp	r3, #7
 8003366:	d9ec      	bls.n	8003342 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	b292      	uxth	r2, r2
 800337c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003388:	b29a      	uxth	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003392:	b292      	uxth	r2, r2
 8003394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0204 	orr.w	r2, r2, #4
 80033aa:	b292      	uxth	r2, r2
 80033ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f007 fd1d 	bl	800adf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f005 fb36 	bl	8008a2c <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ca:	d10e      	bne.n	80033ea <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033de:	b292      	uxth	r2, r2
 80033e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f007 fcd6 	bl	800ad96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 fb1c 	bl	8008a2c <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d10b      	bne.n	8003418 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003412:	b292      	uxth	r2, r2
 8003414:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003418:	bf00      	nop
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_PCD_SetAddress+0x1a>
 8003436:	2302      	movs	r3, #2
 8003438:	e013      	b.n	8003462 <HAL_PCD_SetAddress+0x42>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f005 fac3 	bl	80089de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	4608      	mov	r0, r1
 8003474:	4611      	mov	r1, r2
 8003476:	461a      	mov	r2, r3
 8003478:	4603      	mov	r3, r0
 800347a:	70fb      	strb	r3, [r7, #3]
 800347c:	460b      	mov	r3, r1
 800347e:	803b      	strh	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da0e      	bge.n	80034ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	705a      	strb	r2, [r3, #1]
 80034ac:	e00e      	b.n	80034cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 0207 	and.w	r2, r3, #7
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034d8:	883a      	ldrh	r2, [r7, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	78ba      	ldrb	r2, [r7, #2]
 80034e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034f6:	78bb      	ldrb	r3, [r7, #2]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d102      	bne.n	8003502 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_PCD_EP_Open+0xa6>
 800350c:	2302      	movs	r3, #2
 800350e:	e00e      	b.n	800352e <HAL_PCD_EP_Open+0xc4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 ffbe 	bl	80064a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800352c:	7afb      	ldrb	r3, [r7, #11]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	460b      	mov	r3, r1
 8003544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003546:	7afb      	ldrb	r3, [r7, #11]
 8003548:	f003 0207 	and.w	r2, r3, #7
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2200      	movs	r2, #0
 8003574:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	7afb      	ldrb	r3, [r7, #11]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	b2da      	uxtb	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6979      	ldr	r1, [r7, #20]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 faee 	bl	8006b74 <USB_EPStartXfer>
 8003598:	e005      	b.n	80035a6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6979      	ldr	r1, [r7, #20]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 fae7 	bl	8006b74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	460b      	mov	r3, r1
 80035be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2201      	movs	r2, #1
 80035fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	b2da      	uxtb	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	4618      	mov	r0, r3
 800361a:	f003 faab 	bl	8006b74 <USB_EPStartXfer>
 800361e:	e005      	b.n	800362c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	4618      	mov	r0, r3
 8003628:	f003 faa4 	bl	8006b74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 0207 	and.w	r2, r3, #7
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d901      	bls.n	8003654 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e04c      	b.n	80036ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003658:	2b00      	cmp	r3, #0
 800365a:	da0e      	bge.n	800367a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	705a      	strb	r2, [r3, #1]
 8003678:	e00c      	b.n	8003694 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_PCD_EP_SetStall+0x7e>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e01c      	b.n	80036ee <HAL_PCD_EP_SetStall+0xb8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f005 f88e 	bl	80087e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d108      	bne.n	80036e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f005 f9b3 	bl	8008a4a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d901      	bls.n	8003714 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e040      	b.n	8003796 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003718:	2b00      	cmp	r3, #0
 800371a:	da0e      	bge.n	800373a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	705a      	strb	r2, [r3, #1]
 8003738:	e00e      	b.n	8003758 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 0207 	and.w	r2, r3, #7
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_PCD_EP_ClrStall+0x82>
 8003774:	2302      	movs	r3, #2
 8003776:	e00e      	b.n	8003796 <HAL_PCD_EP_ClrStall+0xa0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	4618      	mov	r0, r3
 8003788:	f005 f87c 	bl	8008884 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b08e      	sub	sp, #56	; 0x38
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037a6:	e2ec      	b.n	8003d82 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037b0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80037b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80037be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 8161 	bne.w	8003a8a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d152      	bne.n	8003878 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	81fb      	strh	r3, [r7, #14]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	89fb      	ldrh	r3, [r7, #14]
 80037ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3328      	adds	r3, #40	; 0x28
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003804:	b29b      	uxth	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	3302      	adds	r3, #2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	441a      	add	r2, r3
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003836:	2100      	movs	r1, #0
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f007 fa92 	bl	800ad62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 829b 	beq.w	8003d82 <PCD_EP_ISR_Handler+0x5e4>
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f040 8296 	bne.w	8003d82 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003862:	b2da      	uxtb	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	b292      	uxth	r2, r2
 800386a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003876:	e284      	b.n	8003d82 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800388a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388e:	2b00      	cmp	r3, #0
 8003890:	d034      	beq.n	80038fc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	3306      	adds	r3, #6
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f005 f90a 	bl	8008aea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038e2:	4013      	ands	r3, r2
 80038e4:	823b      	strh	r3, [r7, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	8a3a      	ldrh	r2, [r7, #16]
 80038ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f0:	b292      	uxth	r2, r2
 80038f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f007 fa07 	bl	800ad08 <HAL_PCD_SetupStageCallback>
 80038fa:	e242      	b.n	8003d82 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003900:	2b00      	cmp	r3, #0
 8003902:	f280 823e 	bge.w	8003d82 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29a      	uxth	r2, r3
 800390e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003912:	4013      	ands	r3, r2
 8003914:	83bb      	strh	r3, [r7, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	8bba      	ldrh	r2, [r7, #28]
 800391c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003920:	b292      	uxth	r2, r2
 8003922:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392c:	b29b      	uxth	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	3306      	adds	r3, #6
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d019      	beq.n	800398c <PCD_EP_ISR_Handler+0x1ee>
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	6959      	ldr	r1, [r3, #20]
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003970:	b29b      	uxth	r3, r3
 8003972:	f005 f8ba 	bl	8008aea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	441a      	add	r2, r3
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003984:	2100      	movs	r1, #0
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f007 f9d0 	bl	800ad2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 81f2 	bne.w	8003d82 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	4413      	add	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d112      	bne.n	80039ec <PCD_EP_ISR_Handler+0x24e>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	e02f      	b.n	8003a4c <PCD_EP_ISR_Handler+0x2ae>
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b3e      	cmp	r3, #62	; 0x3e
 80039f2:	d813      	bhi.n	8003a1c <PCD_EP_ISR_Handler+0x27e>
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	633b      	str	r3, [r7, #48]	; 0x30
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <PCD_EP_ISR_Handler+0x270>
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	029b      	lsls	r3, r3, #10
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	e017      	b.n	8003a4c <PCD_EP_ISR_Handler+0x2ae>
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <PCD_EP_ISR_Handler+0x298>
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	3b01      	subs	r3, #1
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	827b      	strh	r3, [r7, #18]
 8003a5e:	8a7b      	ldrh	r3, [r7, #18]
 8003a60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a64:	827b      	strh	r3, [r7, #18]
 8003a66:	8a7b      	ldrh	r3, [r7, #18]
 8003a68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a6c:	827b      	strh	r3, [r7, #18]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	8a7b      	ldrh	r3, [r7, #18]
 8003a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	8013      	strh	r3, [r2, #0]
 8003a88:	e17b      	b.n	8003d82 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a9c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f280 80ea 	bge.w	8003c7a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003abc:	4013      	ands	r3, r2
 8003abe:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ad8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	7b1b      	ldrb	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d122      	bne.n	8003b3c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3306      	adds	r3, #6
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003b20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8087 	beq.w	8003c36 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	6959      	ldr	r1, [r3, #20]
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	88da      	ldrh	r2, [r3, #6]
 8003b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b36:	f004 ffd8 	bl	8008aea <USB_ReadPMA>
 8003b3a:	e07c      	b.n	8003c36 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	78db      	ldrb	r3, [r3, #3]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d108      	bne.n	8003b56 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b46:	461a      	mov	r2, r3
 8003b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f927 	bl	8003d9e <HAL_PCD_EP_DB_Receive>
 8003b50:	4603      	mov	r3, r0
 8003b52:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b54:	e06f      	b.n	8003c36 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	441a      	add	r2, r3
 8003b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d021      	beq.n	8003bf4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003bda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d02a      	beq.n	8003c36 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	6959      	ldr	r1, [r3, #20]
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	891a      	ldrh	r2, [r3, #8]
 8003bec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bee:	f004 ff7c 	bl	8008aea <USB_ReadPMA>
 8003bf2:	e020      	b.n	8003c36 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	3306      	adds	r3, #6
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c1c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003c1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	6959      	ldr	r1, [r3, #20]
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	895a      	ldrh	r2, [r3, #10]
 8003c30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c32:	f004 ff5a 	bl	8008aea <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c3c:	441a      	add	r2, r3
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c48:	441a      	add	r2, r3
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <PCD_EP_ISR_Handler+0x4c2>
 8003c56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d206      	bcs.n	8003c6e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f007 f860 	bl	800ad2c <HAL_PCD_DataOutStageCallback>
 8003c6c:	e005      	b.n	8003c7a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c74:	4618      	mov	r0, r3
 8003c76:	f002 ff7d 	bl	8006b74 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d07e      	beq.n	8003d82 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	843b      	strh	r3, [r7, #32]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	441a      	add	r2, r3
 8003cc2:	8c3b      	ldrh	r3, [r7, #32]
 8003cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d00c      	beq.n	8003cf2 <PCD_EP_ISR_Handler+0x554>
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	78db      	ldrb	r3, [r3, #3]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d146      	bne.n	8003d76 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ce8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d141      	bne.n	8003d76 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	3302      	adds	r3, #2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	8bfb      	ldrh	r3, [r7, #30]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d906      	bls.n	8003d34 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	8bfb      	ldrh	r3, [r7, #30]
 8003d2c:	1ad2      	subs	r2, r2, r3
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	619a      	str	r2, [r3, #24]
 8003d32:	e002      	b.n	8003d3a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	2200      	movs	r2, #0
 8003d38:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f007 f80a 	bl	800ad62 <HAL_PCD_DataInStageCallback>
 8003d4e:	e018      	b.n	8003d82 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	8bfb      	ldrh	r3, [r7, #30]
 8003d56:	441a      	add	r2, r3
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	8bfb      	ldrh	r3, [r7, #30]
 8003d62:	441a      	add	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f002 ff00 	bl	8006b74 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003d74:	e005      	b.n	8003d82 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003d76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f91b 	bl	8003fb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	b21b      	sxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f6ff ad0a 	blt.w	80037a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3738      	adds	r7, #56	; 0x38
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b088      	sub	sp, #32
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d07e      	beq.n	8003eb4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	8b7b      	ldrh	r3, [r7, #26]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d306      	bcc.n	8003df8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	8b7b      	ldrh	r3, [r7, #26]
 8003df0:	1ad2      	subs	r2, r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	619a      	str	r2, [r3, #24]
 8003df6:	e002      	b.n	8003dfe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d123      	bne.n	8003e4e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e20:	833b      	strh	r3, [r7, #24]
 8003e22:	8b3b      	ldrh	r3, [r7, #24]
 8003e24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e28:	833b      	strh	r3, [r7, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	441a      	add	r2, r3
 8003e38:	8b3b      	ldrh	r3, [r7, #24]
 8003e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01f      	beq.n	8003e98 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	82fb      	strh	r3, [r7, #22]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e98:	8b7b      	ldrh	r3, [r7, #26]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8087 	beq.w	8003fae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6959      	ldr	r1, [r3, #20]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	891a      	ldrh	r2, [r3, #8]
 8003eac:	8b7b      	ldrh	r3, [r7, #26]
 8003eae:	f004 fe1c 	bl	8008aea <USB_ReadPMA>
 8003eb2:	e07c      	b.n	8003fae <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3306      	adds	r3, #6
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003edc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	8b7b      	ldrh	r3, [r7, #26]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d306      	bcc.n	8003ef6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	8b7b      	ldrh	r3, [r7, #26]
 8003eee:	1ad2      	subs	r2, r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	619a      	str	r2, [r3, #24]
 8003ef4:	e002      	b.n	8003efc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d123      	bne.n	8003f4c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	83fb      	strh	r3, [r7, #30]
 8003f20:	8bfb      	ldrh	r3, [r7, #30]
 8003f22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f26:	83fb      	strh	r3, [r7, #30]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	8bfb      	ldrh	r3, [r7, #30]
 8003f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11f      	bne.n	8003f96 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f70:	83bb      	strh	r3, [r7, #28]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	8bbb      	ldrh	r3, [r7, #28]
 8003f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f96:	8b7b      	ldrh	r3, [r7, #26]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6959      	ldr	r1, [r3, #20]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	895a      	ldrh	r2, [r3, #10]
 8003fa8:	8b7b      	ldrh	r3, [r7, #26]
 8003faa:	f004 fd9e 	bl	8008aea <USB_ReadPMA>
    }
  }

  return count;
 8003fae:	8b7b      	ldrh	r3, [r7, #26]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b0a2      	sub	sp, #136	; 0x88
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 81c7 	beq.w	8004360 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004006:	429a      	cmp	r2, r3
 8004008:	d907      	bls.n	800401a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004012:	1ad2      	subs	r2, r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	619a      	str	r2, [r3, #24]
 8004018:	e002      	b.n	8004020 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2200      	movs	r2, #0
 800401e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f040 80b9 	bne.w	800419c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d126      	bne.n	8004080 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004040:	b29b      	uxth	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	4413      	add	r3, r2
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	011a      	lsls	r2, r3, #4
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	4413      	add	r3, r2
 8004054:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004064:	b29a      	uxth	r2, r3
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004078:	b29a      	uxth	r2, r3
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	e01a      	b.n	80040b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d116      	bne.n	80040b6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	633b      	str	r3, [r7, #48]	; 0x30
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	4413      	add	r3, r2
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	011a      	lsls	r2, r3, #4
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	2200      	movs	r2, #0
 80040b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d126      	bne.n	8004112 <HAL_PCD_EP_DB_Transmit+0x15a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	4413      	add	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	011a      	lsls	r2, r3, #4
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4413      	add	r3, r2
 80040e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410a:	b29a      	uxth	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	e017      	b.n	8004142 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	785b      	ldrb	r3, [r3, #1]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d113      	bne.n	8004142 <HAL_PCD_EP_DB_Transmit+0x18a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004122:	b29b      	uxth	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	4413      	add	r3, r2
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	011a      	lsls	r2, r3, #4
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	4413      	add	r3, r2
 8004136:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2200      	movs	r2, #0
 8004140:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	4619      	mov	r1, r3
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f006 fe0a 	bl	800ad62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 82d4 	beq.w	8004702 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	827b      	strh	r3, [r7, #18]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	8a7b      	ldrh	r3, [r7, #18]
 8004186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004196:	b29b      	uxth	r3, r3
 8004198:	8013      	strh	r3, [r2, #0]
 800419a:	e2b2      	b.n	8004702 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d021      	beq.n	80041ea <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f040 8286 	bne.w	8004702 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041fe:	441a      	add	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800420c:	441a      	add	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	6a1a      	ldr	r2, [r3, #32]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	429a      	cmp	r2, r3
 800421c:	d309      	bcc.n	8004232 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	621a      	str	r2, [r3, #32]
 8004230:	e015      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800423a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800423e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004248:	e009      	b.n	800425e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d155      	bne.n	8004312 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427a:	4413      	add	r3, r2
 800427c:	63bb      	str	r3, [r7, #56]	; 0x38
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	011a      	lsls	r2, r3, #4
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	4413      	add	r3, r2
 8004288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
 800428e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004290:	2b00      	cmp	r3, #0
 8004292:	d112      	bne.n	80042ba <HAL_PCD_EP_DB_Transmit+0x302>
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800429e:	b29a      	uxth	r2, r3
 80042a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e047      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0x392>
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	2b3e      	cmp	r3, #62	; 0x3e
 80042be:	d811      	bhi.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80042c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80042d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d2:	3301      	adds	r3, #1
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d8:	b29b      	uxth	r3, r3
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e032      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0x392>
 80042e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <HAL_PCD_EP_DB_Transmit+0x342>
 80042f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f6:	3b01      	subs	r3, #1
 80042f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	029b      	lsls	r3, r3, #10
 8004300:	b29b      	uxth	r3, r3
 8004302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430a:	b29a      	uxth	r2, r3
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	801a      	strh	r2, [r3, #0]
 8004310:	e01b      	b.n	800434a <HAL_PCD_EP_DB_Transmit+0x392>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d117      	bne.n	800434a <HAL_PCD_EP_DB_Transmit+0x392>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	643b      	str	r3, [r7, #64]	; 0x40
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432e:	4413      	add	r3, r2
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	011a      	lsls	r2, r3, #4
 8004338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433a:	4413      	add	r3, r2
 800433c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	b29a      	uxth	r2, r3
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6959      	ldr	r1, [r3, #20]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	891a      	ldrh	r2, [r3, #8]
 8004356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004358:	b29b      	uxth	r3, r3
 800435a:	f004 fb81 	bl	8008a60 <USB_WritePMA>
 800435e:	e1d0      	b.n	8004702 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004368:	b29b      	uxth	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4413      	add	r3, r2
 8004374:	3306      	adds	r3, #6
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004388:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004394:	429a      	cmp	r2, r3
 8004396:	d307      	bcc.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043a0:	1ad2      	subs	r2, r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	619a      	str	r2, [r3, #24]
 80043a6:	e002      	b.n	80043ae <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 80c4 	bne.w	8004540 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d126      	bne.n	800440e <HAL_PCD_EP_DB_Transmit+0x456>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d4:	4413      	add	r3, r2
 80043d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	011a      	lsls	r2, r3, #4
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	4413      	add	r3, r2
 80043e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f6:	801a      	strh	r2, [r3, #0]
 80043f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004406:	b29a      	uxth	r2, r3
 8004408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	e01a      	b.n	8004444 <HAL_PCD_EP_DB_Transmit+0x48c>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d116      	bne.n	8004444 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	677b      	str	r3, [r7, #116]	; 0x74
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800442a:	4413      	add	r3, r2
 800442c:	677b      	str	r3, [r7, #116]	; 0x74
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	011a      	lsls	r2, r3, #4
 8004434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004436:	4413      	add	r3, r2
 8004438:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800443c:	673b      	str	r3, [r7, #112]	; 0x70
 800443e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004440:	2200      	movs	r2, #0
 8004442:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	67bb      	str	r3, [r7, #120]	; 0x78
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d12f      	bne.n	80044b2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800446a:	4413      	add	r3, r2
 800446c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	011a      	lsls	r2, r3, #4
 8004476:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800447a:	4413      	add	r3, r2
 800447c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004490:	b29a      	uxth	r2, r3
 8004492:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	e017      	b.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d113      	bne.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c8:	4413      	add	r3, r2
 80044ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	011a      	lsls	r2, r3, #4
 80044d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d4:	4413      	add	r3, r2
 80044d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044de:	2200      	movs	r2, #0
 80044e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f006 fc3a 	bl	800ad62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8104 	bne.w	8004702 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004514:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800452a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453a:	b29b      	uxth	r3, r3
 800453c:	8013      	strh	r3, [r2, #0]
 800453e:	e0e0      	b.n	8004702 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d121      	bne.n	800458e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004564:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004594:	2b01      	cmp	r3, #1
 8004596:	f040 80b4 	bne.w	8004702 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045a2:	441a      	add	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045b0:	441a      	add	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	6a1a      	ldr	r2, [r3, #32]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d309      	bcc.n	80045d6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ce:	1ad2      	subs	r2, r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	621a      	str	r2, [r3, #32]
 80045d4:	e015      	b.n	8004602 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80045de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045ec:	e009      	b.n	8004602 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	667b      	str	r3, [r7, #100]	; 0x64
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d155      	bne.n	80046bc <HAL_PCD_EP_DB_Transmit+0x704>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004624:	4413      	add	r3, r2
 8004626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	011a      	lsls	r2, r3, #4
 800462e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004630:	4413      	add	r3, r2
 8004632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004636:	65bb      	str	r3, [r7, #88]	; 0x58
 8004638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d112      	bne.n	8004664 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800463e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004648:	b29a      	uxth	r2, r3
 800464a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800464c:	801a      	strh	r2, [r3, #0]
 800464e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465c:	b29a      	uxth	r2, r3
 800465e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e044      	b.n	80046ee <HAL_PCD_EP_DB_Transmit+0x736>
 8004664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004666:	2b3e      	cmp	r3, #62	; 0x3e
 8004668:	d811      	bhi.n	800468e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800466a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	657b      	str	r3, [r7, #84]	; 0x54
 8004670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800467a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467c:	3301      	adds	r3, #1
 800467e:	657b      	str	r3, [r7, #84]	; 0x54
 8004680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004682:	b29b      	uxth	r3, r3
 8004684:	029b      	lsls	r3, r3, #10
 8004686:	b29a      	uxth	r2, r3
 8004688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	e02f      	b.n	80046ee <HAL_PCD_EP_DB_Transmit+0x736>
 800468e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
 8004694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800469e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a0:	3b01      	subs	r3, #1
 80046a2:	657b      	str	r3, [r7, #84]	; 0x54
 80046a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	029b      	lsls	r3, r3, #10
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	e018      	b.n	80046ee <HAL_PCD_EP_DB_Transmit+0x736>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d114      	bne.n	80046ee <HAL_PCD_EP_DB_Transmit+0x736>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d2:	4413      	add	r3, r2
 80046d4:	667b      	str	r3, [r7, #100]	; 0x64
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	011a      	lsls	r2, r3, #4
 80046dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046de:	4413      	add	r3, r2
 80046e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046e4:	663b      	str	r3, [r7, #96]	; 0x60
 80046e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6959      	ldr	r1, [r3, #20]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	895a      	ldrh	r2, [r3, #10]
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f004 f9af 	bl	8008a60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	823b      	strh	r3, [r7, #16]
 800471e:	8a3b      	ldrh	r3, [r7, #16]
 8004720:	f083 0310 	eor.w	r3, r3, #16
 8004724:	823b      	strh	r3, [r7, #16]
 8004726:	8a3b      	ldrh	r3, [r7, #16]
 8004728:	f083 0320 	eor.w	r3, r3, #32
 800472c:	823b      	strh	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	8a3b      	ldrh	r3, [r7, #16]
 800473e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3788      	adds	r7, #136	; 0x88
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	4613      	mov	r3, r2
 800476c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e009      	b.n	80047a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004792:	897a      	ldrh	r2, [r7, #10]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80047a6:	893b      	ldrh	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d107      	bne.n	80047bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	80da      	strh	r2, [r3, #6]
 80047ba:	e00b      	b.n	80047d4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2201      	movs	r2, #1
 80047c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	420e0020 	.word	0x420e0020

080047f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e272      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8087 	beq.w	8004926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004818:	4b92      	ldr	r3, [pc, #584]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b04      	cmp	r3, #4
 8004822:	d00c      	beq.n	800483e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004824:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b08      	cmp	r3, #8
 800482e:	d112      	bne.n	8004856 <HAL_RCC_OscConfig+0x5e>
 8004830:	4b8c      	ldr	r3, [pc, #560]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d10b      	bne.n	8004856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483e:	4b89      	ldr	r3, [pc, #548]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d06c      	beq.n	8004924 <HAL_RCC_OscConfig+0x12c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d168      	bne.n	8004924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e24c      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485e:	d106      	bne.n	800486e <HAL_RCC_OscConfig+0x76>
 8004860:	4b80      	ldr	r3, [pc, #512]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7f      	ldr	r2, [pc, #508]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	e02e      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x98>
 8004876:	4b7b      	ldr	r3, [pc, #492]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7a      	ldr	r2, [pc, #488]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800487c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b78      	ldr	r3, [pc, #480]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a77      	ldr	r2, [pc, #476]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0xbc>
 800489a:	4b72      	ldr	r3, [pc, #456]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a71      	ldr	r2, [pc, #452]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6e      	ldr	r2, [pc, #440]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 80048b4:	4b6b      	ldr	r3, [pc, #428]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6a      	ldr	r2, [pc, #424]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b68      	ldr	r3, [pc, #416]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a67      	ldr	r2, [pc, #412]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fd f852 	bl	800197c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fd f84e 	bl	800197c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e200      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b5d      	ldr	r3, [pc, #372]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xe4>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd f83e 	bl	800197c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004904:	f7fd f83a 	bl	800197c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	; 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1ec      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x10c>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d063      	beq.n	80049fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004932:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800493e:	4b49      	ldr	r3, [pc, #292]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b08      	cmp	r3, #8
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x18c>
 800494a:	4b46      	ldr	r3, [pc, #280]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x176>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1c0      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4939      	ldr	r1, [pc, #228]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b36      	ldr	r3, [pc, #216]	; (8004a68 <HAL_RCC_OscConfig+0x270>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fc fff3 	bl	800197c <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fc ffef 	bl	800197c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1a1      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4927      	ldr	r1, [pc, #156]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_RCC_OscConfig+0x270>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fc ffd2 	bl	800197c <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fc ffce 	bl	800197c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e180      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d03a      	beq.n	8004a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d019      	beq.n	8004a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a14:	f7fc ffb2 	bl	800197c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fc ffae 	bl	800197c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e160      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f000 fad8 	bl	8004ff0 <RCC_Delay>
 8004a40:	e01c      	b.n	8004a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fc ff98 	bl	800197c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4e:	e00f      	b.n	8004a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fc ff94 	bl	800197c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d908      	bls.n	8004a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e146      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	42420000 	.word	0x42420000
 8004a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b92      	ldr	r3, [pc, #584]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e9      	bne.n	8004a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a6 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b8b      	ldr	r3, [pc, #556]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10d      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	4a87      	ldr	r2, [pc, #540]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	61d3      	str	r3, [r2, #28]
 8004aa6:	4b85      	ldr	r3, [pc, #532]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	4b82      	ldr	r3, [pc, #520]	; (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d118      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	; (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a7e      	ldr	r2, [pc, #504]	; (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ace:	f7fc ff55 	bl	800197c <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fc ff51 	bl	800197c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b64      	cmp	r3, #100	; 0x64
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e103      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b75      	ldr	r3, [pc, #468]	; (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x312>
 8004afc:	4b6f      	ldr	r3, [pc, #444]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4a6e      	ldr	r2, [pc, #440]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6213      	str	r3, [r2, #32]
 8004b08:	e02d      	b.n	8004b66 <HAL_RCC_OscConfig+0x36e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x334>
 8004b12:	4b6a      	ldr	r3, [pc, #424]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a69      	ldr	r2, [pc, #420]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6213      	str	r3, [r2, #32]
 8004b1e:	4b67      	ldr	r3, [pc, #412]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4a66      	ldr	r2, [pc, #408]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b24:	f023 0304 	bic.w	r3, r3, #4
 8004b28:	6213      	str	r3, [r2, #32]
 8004b2a:	e01c      	b.n	8004b66 <HAL_RCC_OscConfig+0x36e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d10c      	bne.n	8004b4e <HAL_RCC_OscConfig+0x356>
 8004b34:	4b61      	ldr	r3, [pc, #388]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4a60      	ldr	r2, [pc, #384]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	6213      	str	r3, [r2, #32]
 8004b40:	4b5e      	ldr	r3, [pc, #376]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6213      	str	r3, [r2, #32]
 8004b4c:	e00b      	b.n	8004b66 <HAL_RCC_OscConfig+0x36e>
 8004b4e:	4b5b      	ldr	r3, [pc, #364]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	4a5a      	ldr	r2, [pc, #360]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6213      	str	r3, [r2, #32]
 8004b5a:	4b58      	ldr	r3, [pc, #352]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4a57      	ldr	r2, [pc, #348]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d015      	beq.n	8004b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6e:	f7fc ff05 	bl	800197c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fc ff01 	bl	800197c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e0b1      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ee      	beq.n	8004b76 <HAL_RCC_OscConfig+0x37e>
 8004b98:	e014      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fc feef 	bl	800197c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fc feeb 	bl	800197c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e09b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb8:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d105      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bca:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4a3b      	ldr	r2, [pc, #236]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8087 	beq.w	8004cee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be0:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d061      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d146      	bne.n	8004c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf4:	4b33      	ldr	r3, [pc, #204]	; (8004cc4 <HAL_RCC_OscConfig+0x4cc>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fc febf 	bl	800197c <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fc febb 	bl	800197c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e06d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c14:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d108      	bne.n	8004c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c2a:	4b24      	ldr	r3, [pc, #144]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4921      	ldr	r1, [pc, #132]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a19      	ldr	r1, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	491b      	ldr	r1, [pc, #108]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c54:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <HAL_RCC_OscConfig+0x4cc>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7fc fe8f 	bl	800197c <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c62:	f7fc fe8b 	bl	800197c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e03d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x46a>
 8004c80:	e035      	b.n	8004cee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <HAL_RCC_OscConfig+0x4cc>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fc fe78 	bl	800197c <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fc fe74 	bl	800197c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e026      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x498>
 8004cae:	e01e      	b.n	8004cee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e019      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_OscConfig+0x500>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000

08004cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0d0      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b6a      	ldr	r3, [pc, #424]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d910      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b67      	ldr	r3, [pc, #412]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 0207 	bic.w	r2, r3, #7
 8004d26:	4965      	ldr	r1, [pc, #404]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b63      	ldr	r3, [pc, #396]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0b8      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d020      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d58:	4b59      	ldr	r3, [pc, #356]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a58      	ldr	r2, [pc, #352]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d70:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a52      	ldr	r2, [pc, #328]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d7c:	4b50      	ldr	r3, [pc, #320]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	494d      	ldr	r1, [pc, #308]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d040      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da2:	4b47      	ldr	r3, [pc, #284]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d115      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e07f      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b41      	ldr	r3, [pc, #260]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e073      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dca:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06b      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f023 0203 	bic.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4936      	ldr	r1, [pc, #216]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dec:	f7fc fdc6 	bl	800197c <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f7fc fdc2 	bl	800197c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e053      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 020c 	and.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1eb      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d210      	bcs.n	8004e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0207 	bic.w	r2, r3, #7
 8004e32:	4922      	ldr	r1, [pc, #136]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e032      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4916      	ldr	r1, [pc, #88]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	490e      	ldr	r1, [pc, #56]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e8a:	f000 f821 	bl	8004ed0 <HAL_RCC_GetSysClockFreq>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	490a      	ldr	r1, [pc, #40]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	5ccb      	ldrb	r3, [r1, r3]
 8004e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <HAL_RCC_ClockConfig+0x1d0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fc fd24 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40022000 	.word	0x40022000
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	0800c298 	.word	0x0800c298
 8004ec8:	20000000 	.word	0x20000000
 8004ecc:	20000004 	.word	0x20000004

08004ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed0:	b490      	push	{r4, r7}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ed6:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <HAL_RCC_GetSysClockFreq+0xac>)
 8004ed8:	1d3c      	adds	r4, r7, #4
 8004eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ee0:	f240 2301 	movw	r3, #513	; 0x201
 8004ee4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004efa:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d002      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x40>
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x46>
 8004f0e:	e02b      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f10:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f12:	623b      	str	r3, [r7, #32]
      break;
 8004f14:	e02b      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	0c9b      	lsrs	r3, r3, #18
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3328      	adds	r3, #40	; 0x28
 8004f20:	443b      	add	r3, r7
 8004f22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f26:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d012      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	0c5b      	lsrs	r3, r3, #17
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	3328      	adds	r3, #40	; 0x28
 8004f3e:	443b      	add	r3, r7
 8004f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4a0e      	ldr	r2, [pc, #56]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f4a:	fb03 f202 	mul.w	r2, r3, r2
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
 8004f56:	e004      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f5c:	fb02 f303 	mul.w	r3, r2, r3
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	623b      	str	r3, [r7, #32]
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f6a:	623b      	str	r3, [r7, #32]
      break;
 8004f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	; 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc90      	pop	{r4, r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	0800c1c0 	.word	0x0800c1c0
 8004f80:	40021000 	.word	0x40021000
 8004f84:	007a1200 	.word	0x007a1200
 8004f88:	003d0900 	.word	0x003d0900

08004f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	20000000 	.word	0x20000000

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff2 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	0800c2a8 	.word	0x0800c2a8

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fcc:	f7ff ffde 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0adb      	lsrs	r3, r3, #11
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	0800c2a8 	.word	0x0800c2a8

08004ff0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <RCC_Delay+0x34>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <RCC_Delay+0x38>)
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	0a5b      	lsrs	r3, r3, #9
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800500c:	bf00      	nop
  }
  while (Delay --);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	60fa      	str	r2, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f9      	bne.n	800500c <RCC_Delay+0x1c>
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	20000000 	.word	0x20000000
 8005028:	10624dd3 	.word	0x10624dd3

0800502c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d07d      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005048:	2300      	movs	r3, #0
 800504a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504c:	4b4f      	ldr	r3, [pc, #316]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10d      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005058:	4b4c      	ldr	r3, [pc, #304]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	4a4b      	ldr	r2, [pc, #300]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005062:	61d3      	str	r3, [r2, #28]
 8005064:	4b49      	ldr	r3, [pc, #292]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	4b46      	ldr	r3, [pc, #280]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d118      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005080:	4b43      	ldr	r3, [pc, #268]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a42      	ldr	r2, [pc, #264]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508c:	f7fc fc76 	bl	800197c <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	e008      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005094:	f7fc fc72 	bl	800197c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e06d      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a6:	4b3a      	ldr	r3, [pc, #232]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050b2:	4b36      	ldr	r3, [pc, #216]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02e      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d027      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050d0:	4b2e      	ldr	r3, [pc, #184]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050da:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050e0:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050e6:	4a29      	ldr	r2, [pc, #164]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d014      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f6:	f7fc fc41 	bl	800197c <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	e00a      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fc fc3d 	bl	800197c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e036      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ee      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005120:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4917      	ldr	r1, [pc, #92]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512e:	4313      	orrs	r3, r2
 8005130:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005132:	7dfb      	ldrb	r3, [r7, #23]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d105      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	4a13      	ldr	r2, [pc, #76]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005142:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	490b      	ldr	r1, [pc, #44]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515e:	4313      	orrs	r3, r2
 8005160:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4904      	ldr	r1, [pc, #16]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517c:	4313      	orrs	r3, r2
 800517e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000
 8005190:	40007000 	.word	0x40007000
 8005194:	42420440 	.word	0x42420440

08005198 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b08d      	sub	sp, #52	; 0x34
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051a0:	4b58      	ldr	r3, [pc, #352]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80051a2:	f107 040c 	add.w	r4, r7, #12
 80051a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051ac:	f240 2301 	movw	r3, #513	; 0x201
 80051b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
 80051b6:	2300      	movs	r3, #0
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ba:	2300      	movs	r3, #0
 80051bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	2300      	movs	r3, #0
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	f200 808e 	bhi.w	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d049      	beq.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d079      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80051e0:	e086      	b.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80051e2:	4b49      	ldr	r3, [pc, #292]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80051e8:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d07f      	beq.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	0c9b      	lsrs	r3, r3, #18
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	3330      	adds	r3, #48	; 0x30
 80051fe:	443b      	add	r3, r7
 8005200:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005204:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d017      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005210:	4b3d      	ldr	r3, [pc, #244]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	0c5b      	lsrs	r3, r3, #17
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	3330      	adds	r3, #48	; 0x30
 800521c:	443b      	add	r3, r7
 800521e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00d      	beq.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800522e:	4a37      	ldr	r2, [pc, #220]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	fbb2 f2f3 	udiv	r2, r2, r3
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800523e:	e004      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	4a33      	ldr	r2, [pc, #204]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005244:	fb02 f303 	mul.w	r3, r2, r3
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800524a:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005256:	d102      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800525c:	e04a      	b.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800526c:	e042      	b.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800526e:	4b26      	ldr	r3, [pc, #152]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527e:	d108      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005290:	e01f      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529c:	d109      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80052aa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b0:	e00f      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052bc:	d11c      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80052ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80052d0:	e012      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80052d2:	e011      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80052d4:	f7ff fe78 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	0b9b      	lsrs	r3, r3, #14
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	3301      	adds	r3, #1
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80052ee:	e004      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80052f0:	bf00      	nop
 80052f2:	e002      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80052f4:	bf00      	nop
 80052f6:	e000      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80052f8:	bf00      	nop
    }
  }
  return (frequency);
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3734      	adds	r7, #52	; 0x34
 8005300:	46bd      	mov	sp, r7
 8005302:	bd90      	pop	{r4, r7, pc}
 8005304:	0800c1d0 	.word	0x0800c1d0
 8005308:	40021000 	.word	0x40021000
 800530c:	007a1200 	.word	0x007a1200
 8005310:	003d0900 	.word	0x003d0900
 8005314:	aaaaaaab 	.word	0xaaaaaaab

08005318 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e084      	b.n	8005438 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7c5b      	ldrb	r3, [r3, #17]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc f9c4 	bl	80016cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f87a 	bl	8005444 <HAL_RTC_WaitForSynchro>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2204      	movs	r2, #4
 800535a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e06b      	b.n	8005438 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f89c 	bl	800549e <RTC_EnterInitMode>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2204      	movs	r2, #4
 8005370:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e060      	b.n	8005438 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0207 	bic.w	r2, r2, #7
 8005384:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800538e:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <HAL_RTC_Init+0x128>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	4a2b      	ldr	r2, [pc, #172]	; (8005440 <HAL_RTC_Init+0x128>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800539a:	4b29      	ldr	r3, [pc, #164]	; (8005440 <HAL_RTC_Init+0x128>)
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	4926      	ldr	r1, [pc, #152]	; (8005440 <HAL_RTC_Init+0x128>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d003      	beq.n	80053be <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e00e      	b.n	80053dc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80053be:	2001      	movs	r0, #1
 80053c0:	f7ff feea 	bl	8005198 <HAL_RCCEx_GetPeriphCLKFreq>
 80053c4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2204      	movs	r2, #4
 80053d0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e030      	b.n	8005438 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3b01      	subs	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 010f 	bic.w	r1, r3, #15
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0c1a      	lsrs	r2, r3, #16
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	b291      	uxth	r1, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	430b      	orrs	r3, r1
 8005406:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f870 	bl	80054ee <RTC_ExitInitMode>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2204      	movs	r2, #4
 8005418:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e00c      	b.n	8005438 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005436:	2300      	movs	r3, #0
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40006c00 	.word	0x40006c00

08005444 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e01d      	b.n	8005496 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0208 	bic.w	r2, r2, #8
 8005468:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800546a:	f7fc fa87 	bl	800197c <HAL_GetTick>
 800546e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005470:	e009      	b.n	8005486 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005472:	f7fc fa83 	bl	800197c <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005480:	d901      	bls.n	8005486 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e007      	b.n	8005496 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ee      	beq.n	8005472 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80054aa:	f7fc fa67 	bl	800197c <HAL_GetTick>
 80054ae:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80054b0:	e009      	b.n	80054c6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80054b2:	f7fc fa63 	bl	800197c <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054c0:	d901      	bls.n	80054c6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e00f      	b.n	80054e6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0ee      	beq.n	80054b2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0210 	orr.w	r2, r2, #16
 80054e2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0210 	bic.w	r2, r2, #16
 8005508:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800550a:	f7fc fa37 	bl	800197c <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005510:	e009      	b.n	8005526 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005512:	f7fc fa33 	bl	800197c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005520:	d901      	bls.n	8005526 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e007      	b.n	8005536 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ee      	beq.n	8005512 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e041      	b.n	80055d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc f8d5 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f000 fb57 	bl	8005c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d001      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e03a      	b.n	800566a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a18      	ldr	r2, [pc, #96]	; (8005674 <HAL_TIM_Base_Start_IT+0x98>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x58>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561e:	d009      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x58>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a14      	ldr	r2, [pc, #80]	; (8005678 <HAL_TIM_Base_Start_IT+0x9c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_TIM_Base_Start_IT+0x58>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <HAL_TIM_Base_Start_IT+0xa0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d111      	bne.n	8005658 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b06      	cmp	r3, #6
 8005644:	d010      	beq.n	8005668 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	e007      	b.n	8005668 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800

08005680 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6a1a      	ldr	r2, [r3, #32]
 800569e:	f241 1311 	movw	r3, #4369	; 0x1111
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10f      	bne.n	80056c8 <HAL_TIM_Base_Stop_IT+0x48>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	f240 4344 	movw	r3, #1092	; 0x444
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_Base_Stop_IT+0x48>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e041      	b.n	8005772 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f839 	bl	800577a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f000 fa88 	bl	8005c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d122      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d11b      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0202 	mvn.w	r2, #2
 80057b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa12 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa05 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fa14 	bl	8005c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b04      	cmp	r3, #4
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0204 	mvn.w	r2, #4
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9e8 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9db 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f9ea 	bl	8005c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b08      	cmp	r3, #8
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b08      	cmp	r3, #8
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0208 	mvn.w	r2, #8
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2204      	movs	r2, #4
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9be 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9b1 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f9c0 	bl	8005c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b10      	cmp	r3, #16
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0210 	mvn.w	r2, #16
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2208      	movs	r2, #8
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f994 	bl	8005bf8 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f987 	bl	8005be6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f996 	bl	8005c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d10e      	bne.n	8005910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0201 	mvn.w	r2, #1
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f962 	bl	8005bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d10e      	bne.n	800593c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005928:	2b80      	cmp	r3, #128	; 0x80
 800592a:	d107      	bne.n	800593c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fc61 	bl	80061fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f95a 	bl	8005c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b20      	cmp	r3, #32
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b20      	cmp	r3, #32
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0220 	mvn.w	r2, #32
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fc2c 	bl	80061ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e046      	b.n	8005a44 <HAL_TIM_OC_ConfigChannel+0xa8>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b0c      	cmp	r3, #12
 80059c2:	d839      	bhi.n	8005a38 <HAL_TIM_OC_ConfigChannel+0x9c>
 80059c4:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <HAL_TIM_OC_ConfigChannel+0x30>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	08005a01 	.word	0x08005a01
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a39 	.word	0x08005a39
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005a39 	.word	0x08005a39
 80059ec:	08005a1d 	.word	0x08005a1d
 80059f0:	08005a39 	.word	0x08005a39
 80059f4:	08005a39 	.word	0x08005a39
 80059f8:	08005a39 	.word	0x08005a39
 80059fc:	08005a2b 	.word	0x08005a2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f974 	bl	8005cf4 <TIM_OC1_SetConfig>
      break;
 8005a0c:	e015      	b.n	8005a3a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f9d3 	bl	8005dc0 <TIM_OC2_SetConfig>
      break;
 8005a1a:	e00e      	b.n	8005a3a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa36 	bl	8005e94 <TIM_OC3_SetConfig>
      break;
 8005a28:	e007      	b.n	8005a3a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fa99 	bl	8005f68 <TIM_OC4_SetConfig>
      break;
 8005a36:	e000      	b.n	8005a3a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005a38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIM_ConfigClockSource+0x18>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e0b3      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x180>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9c:	d03e      	beq.n	8005b1c <HAL_TIM_ConfigClockSource+0xd0>
 8005a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa2:	f200 8087 	bhi.w	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aaa:	f000 8085 	beq.w	8005bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	d87f      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005ab4:	2b70      	cmp	r3, #112	; 0x70
 8005ab6:	d01a      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0xa2>
 8005ab8:	2b70      	cmp	r3, #112	; 0x70
 8005aba:	d87b      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005abc:	2b60      	cmp	r3, #96	; 0x60
 8005abe:	d050      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x116>
 8005ac0:	2b60      	cmp	r3, #96	; 0x60
 8005ac2:	d877      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005ac4:	2b50      	cmp	r3, #80	; 0x50
 8005ac6:	d03c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0xf6>
 8005ac8:	2b50      	cmp	r3, #80	; 0x50
 8005aca:	d873      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d058      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x136>
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d86f      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005ad4:	2b30      	cmp	r3, #48	; 0x30
 8005ad6:	d064      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x156>
 8005ad8:	2b30      	cmp	r3, #48	; 0x30
 8005ada:	d86b      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d060      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x156>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d867      	bhi.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d05c      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x156>
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d05a      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005aec:	e062      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6899      	ldr	r1, [r3, #8]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f000 faf8 	bl	80060f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	609a      	str	r2, [r3, #8]
      break;
 8005b1a:	e04e      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	6899      	ldr	r1, [r3, #8]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f000 fae1 	bl	80060f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3e:	609a      	str	r2, [r3, #8]
      break;
 8005b40:	e03b      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 fa58 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2150      	movs	r1, #80	; 0x50
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 faaf 	bl	80060be <TIM_ITRx_SetConfig>
      break;
 8005b60:	e02b      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 fa76 	bl	8006060 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2160      	movs	r1, #96	; 0x60
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fa9f 	bl	80060be <TIM_ITRx_SetConfig>
      break;
 8005b80:	e01b      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f000 fa38 	bl	8006004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fa8f 	bl	80060be <TIM_ITRx_SetConfig>
      break;
 8005ba0:	e00b      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f000 fa86 	bl	80060be <TIM_ITRx_SetConfig>
        break;
 8005bb2:	e002      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
	...

08005c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <TIM_Base_SetConfig+0xb8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00b      	beq.n	8005c60 <TIM_Base_SetConfig+0x30>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4e:	d007      	beq.n	8005c60 <TIM_Base_SetConfig+0x30>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a26      	ldr	r2, [pc, #152]	; (8005cec <TIM_Base_SetConfig+0xbc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0x30>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <TIM_Base_SetConfig+0xc0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d108      	bne.n	8005c72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <TIM_Base_SetConfig+0xb8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00b      	beq.n	8005c92 <TIM_Base_SetConfig+0x62>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c80:	d007      	beq.n	8005c92 <TIM_Base_SetConfig+0x62>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a19      	ldr	r2, [pc, #100]	; (8005cec <TIM_Base_SetConfig+0xbc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_Base_SetConfig+0x62>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <TIM_Base_SetConfig+0xc0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d108      	bne.n	8005ca4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a07      	ldr	r2, [pc, #28]	; (8005ce8 <TIM_Base_SetConfig+0xb8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d103      	bne.n	8005cd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	615a      	str	r2, [r3, #20]
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800

08005cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f023 0201 	bic.w	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0302 	bic.w	r3, r3, #2
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <TIM_OC1_SetConfig+0xc8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10c      	bne.n	8005d6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0308 	bic.w	r3, r3, #8
 8005d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 0304 	bic.w	r3, r3, #4
 8005d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <TIM_OC1_SetConfig+0xc8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d111      	bne.n	8005d96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	621a      	str	r2, [r3, #32]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00

08005dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f023 0210 	bic.w	r2, r3, #16
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f023 0320 	bic.w	r3, r3, #32
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <TIM_OC2_SetConfig+0xd0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d10d      	bne.n	8005e3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a14      	ldr	r2, [pc, #80]	; (8005e90 <TIM_OC2_SetConfig+0xd0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d113      	bne.n	8005e6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	40012c00 	.word	0x40012c00

08005e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <TIM_OC3_SetConfig+0xd0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <TIM_OC3_SetConfig+0xd0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d113      	bne.n	8005f3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40012c00 	.word	0x40012c00

08005f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a0f      	ldr	r2, [pc, #60]	; (8006000 <TIM_OC4_SetConfig+0x98>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d109      	bne.n	8005fdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	019b      	lsls	r3, r3, #6
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr
 8006000:	40012c00 	.word	0x40012c00

08006004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 030a 	bic.w	r3, r3, #10
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f023 0210 	bic.w	r2, r3, #16
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800608a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	031b      	lsls	r3, r3, #12
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800609c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr

080060be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	f043 0307 	orr.w	r3, r3, #7
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b087      	sub	sp, #28
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800610c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	021a      	lsls	r2, r3, #8
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	431a      	orrs	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4313      	orrs	r3, r2
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	609a      	str	r2, [r3, #8]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006144:	2302      	movs	r3, #2
 8006146:	e046      	b.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a12      	ldr	r2, [pc, #72]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a10      	ldr	r2, [pc, #64]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10c      	bne.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800

080061ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e03f      	b.n	80062a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb fa92 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	; 0x24
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f829 	bl	80062ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695a      	ldr	r2, [r3, #20]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062e6:	f023 030c 	bic.w	r3, r3, #12
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	430b      	orrs	r3, r1
 80062f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a2c      	ldr	r2, [pc, #176]	; (80063c0 <UART_SetConfig+0x114>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006314:	f7fe fe58 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	e002      	b.n	8006322 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7fe fe40 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006320:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009a      	lsls	r2, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <UART_SetConfig+0x118>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	0119      	lsls	r1, r3, #4
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009a      	lsls	r2, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	fbb2 f2f3 	udiv	r2, r2, r3
 8006358:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <UART_SetConfig+0x118>)
 800635a:	fba3 0302 	umull	r0, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	2064      	movs	r0, #100	; 0x64
 8006362:	fb00 f303 	mul.w	r3, r0, r3
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	3332      	adds	r3, #50	; 0x32
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <UART_SetConfig+0x118>)
 800636e:	fba2 2303 	umull	r2, r3, r2, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006378:	4419      	add	r1, r3
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009a      	lsls	r2, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <UART_SetConfig+0x118>)
 8006392:	fba3 0302 	umull	r0, r3, r3, r2
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	2064      	movs	r0, #100	; 0x64
 800639a:	fb00 f303 	mul.w	r3, r0, r3
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	011b      	lsls	r3, r3, #4
 80063a2:	3332      	adds	r3, #50	; 0x32
 80063a4:	4a07      	ldr	r2, [pc, #28]	; (80063c4 <UART_SetConfig+0x118>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	f003 020f 	and.w	r2, r3, #15
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	440a      	add	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40013800 	.word	0x40013800
 80063c4:	51eb851f 	.word	0x51eb851f

080063c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063c8:	b084      	sub	sp, #16
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	f107 0014 	add.w	r0, r7, #20
 80063d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	b004      	add	sp, #16
 80063e6:	4770      	bx	lr

080063e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80063fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr

08006414 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800641c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006420:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	b29b      	uxth	r3, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	b29b      	uxth	r3, r3
 8006432:	4013      	ands	r3, r2
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006460:	b084      	sub	sp, #16
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	f107 0014 	add.w	r0, r7, #20
 800646e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	b004      	add	sp, #16
 800649e:	4770      	bx	lr

080064a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b09b      	sub	sp, #108	; 0x6c
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	78db      	ldrb	r3, [r3, #3]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d81f      	bhi.n	8006512 <USB_ActivateEndpoint+0x72>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <USB_ActivateEndpoint+0x38>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	080064e9 	.word	0x080064e9
 80064dc:	08006505 	.word	0x08006505
 80064e0:	0800651b 	.word	0x0800651b
 80064e4:	080064f7 	.word	0x080064f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064f4:	e012      	b.n	800651c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064fa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80064fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006502:	e00b      	b.n	800651c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006504:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006508:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800650c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006510:	e004      	b.n	800651c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006518:	e000      	b.n	800651c <USB_ActivateEndpoint+0x7c>
      break;
 800651a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006554:	b29a      	uxth	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	4313      	orrs	r3, r2
 800655e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	7b1b      	ldrb	r3, [r3, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 8149 	bne.w	8006820 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8084 	beq.w	80066a0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	4413      	add	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	011a      	lsls	r2, r3, #4
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	88db      	ldrh	r3, [r3, #6]
 80065c0:	085b      	lsrs	r3, r3, #1
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	81fb      	strh	r3, [r7, #14]
 80065da:	89fb      	ldrh	r3, [r7, #14]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01b      	beq.n	800661c <USB_ActivateEndpoint+0x17c>
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	81bb      	strh	r3, [r7, #12]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	89bb      	ldrh	r3, [r7, #12]
 8006608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006614:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006618:	b29b      	uxth	r3, r3
 800661a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d020      	beq.n	8006666 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663a:	813b      	strh	r3, [r7, #8]
 800663c:	893b      	ldrh	r3, [r7, #8]
 800663e:	f083 0320 	eor.w	r3, r3, #32
 8006642:	813b      	strh	r3, [r7, #8]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	893b      	ldrh	r3, [r7, #8]
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]
 8006664:	e27f      	b.n	8006b66 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667c:	817b      	strh	r3, [r7, #10]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	897b      	ldrh	r3, [r7, #10]
 800668a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669a:	b29b      	uxth	r3, r3
 800669c:	8013      	strh	r3, [r2, #0]
 800669e:	e262      	b.n	8006b66 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	4413      	add	r3, r2
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	011a      	lsls	r2, r3, #4
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	88db      	ldrh	r3, [r3, #6]
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	4413      	add	r3, r2
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066f6:	623b      	str	r3, [r7, #32]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d112      	bne.n	8006726 <USB_ActivateEndpoint+0x286>
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670a:	b29a      	uxth	r2, r3
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800671e:	b29a      	uxth	r2, r3
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e02f      	b.n	8006786 <USB_ActivateEndpoint+0x2e6>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b3e      	cmp	r3, #62	; 0x3e
 800672c:	d813      	bhi.n	8006756 <USB_ActivateEndpoint+0x2b6>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	663b      	str	r3, [r7, #96]	; 0x60
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <USB_ActivateEndpoint+0x2a8>
 8006742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006744:	3301      	adds	r3, #1
 8006746:	663b      	str	r3, [r7, #96]	; 0x60
 8006748:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29a      	uxth	r2, r3
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e017      	b.n	8006786 <USB_ActivateEndpoint+0x2e6>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	663b      	str	r3, [r7, #96]	; 0x60
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <USB_ActivateEndpoint+0x2d0>
 800676a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800676c:	3b01      	subs	r3, #1
 800676e:	663b      	str	r3, [r7, #96]	; 0x60
 8006770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006772:	b29b      	uxth	r3, r3
 8006774:	029b      	lsls	r3, r3, #10
 8006776:	b29b      	uxth	r3, r3
 8006778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006780:	b29a      	uxth	r2, r3
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	83fb      	strh	r3, [r7, #30]
 8006794:	8bfb      	ldrh	r3, [r7, #30]
 8006796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01b      	beq.n	80067d6 <USB_ActivateEndpoint+0x336>
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b4:	83bb      	strh	r3, [r7, #28]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	8bbb      	ldrh	r3, [r7, #28]
 80067c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ec:	837b      	strh	r3, [r7, #26]
 80067ee:	8b7b      	ldrh	r3, [r7, #26]
 80067f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067f4:	837b      	strh	r3, [r7, #26]
 80067f6:	8b7b      	ldrh	r3, [r7, #26]
 80067f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067fc:	837b      	strh	r3, [r7, #26]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	8b7b      	ldrh	r3, [r7, #26]
 800680a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]
 800681e:	e1a2      	b.n	8006b66 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	441a      	add	r2, r3
 8006844:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006850:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800686c:	4413      	add	r3, r2
 800686e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006878:	4413      	add	r3, r2
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	657b      	str	r3, [r7, #84]	; 0x54
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	891b      	ldrh	r3, [r3, #8]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	b29b      	uxth	r3, r3
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	653b      	str	r3, [r7, #80]	; 0x50
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689a:	b29b      	uxth	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a0:	4413      	add	r3, r2
 80068a2:	653b      	str	r3, [r7, #80]	; 0x50
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	011a      	lsls	r2, r3, #4
 80068aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	895b      	ldrh	r3, [r3, #10]
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 8091 	bne.w	80069f0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80068dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80068de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01b      	beq.n	800691e <USB_ActivateEndpoint+0x47e>
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	873b      	strh	r3, [r7, #56]	; 0x38
 800692c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800692e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01b      	beq.n	800696e <USB_ActivateEndpoint+0x4ce>
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800695a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006966:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800696a:	b29b      	uxth	r3, r3
 800696c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006986:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006988:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800698c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800698e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006990:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006994:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80069da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	8013      	strh	r3, [r2, #0]
 80069ee:	e0ba      	b.n	8006b66 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01d      	beq.n	8006a48 <USB_ActivateEndpoint+0x5a8>
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	441a      	add	r2, r3
 8006a30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01d      	beq.n	8006aa0 <USB_ActivateEndpoint+0x600>
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	441a      	add	r2, r3
 8006a88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	78db      	ldrb	r3, [r3, #3]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d024      	beq.n	8006af2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006abe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ac2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ac6:	f083 0320 	eor.w	r3, r3, #32
 8006aca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	441a      	add	r2, r3
 8006ad8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8013      	strh	r3, [r2, #0]
 8006af0:	e01d      	b.n	8006b2e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	441a      	add	r2, r3
 8006b16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006b66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	376c      	adds	r7, #108	; 0x6c
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b0cc      	sub	sp, #304	; 0x130
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b82:	6018      	str	r0, [r3, #0]
 8006b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	f041 817d 	bne.w	8007e9a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d908      	bls.n	8006bce <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006bcc:	e007      	b.n	8006bde <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	7b1b      	ldrb	r3, [r3, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d152      	bne.n	8006c94 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6959      	ldr	r1, [r3, #20]
 8006bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	88da      	ldrh	r2, [r3, #6]
 8006c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c10:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c14:	6800      	ldr	r0, [r0, #0]
 8006c16:	f001 ff23 	bl	8008a60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c26:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c44:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c4c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	440a      	add	r2, r1
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	011a      	lsls	r2, r3, #4
 8006c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	f001 b8b5 	b.w	8007dfe <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	78db      	ldrb	r3, [r3, #3]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	f040 84c6 	bne.w	8007632 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6a1a      	ldr	r2, [r3, #32]
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	f240 8443 	bls.w	800754a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d30:	1ad2      	subs	r2, r2, r3
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 823e 	beq.w	80071e2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d72:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 809a 	bne.w	8006ec0 <USB_EPStartXfer+0x34c>
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4619      	mov	r1, r3
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dbe:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	440a      	add	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	011a      	lsls	r2, r3, #4
 8006dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d122      	bne.n	8006e3e <USB_EPStartXfer+0x2ca>
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e079      	b.n	8006f32 <USB_EPStartXfer+0x3be>
 8006e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e42:	2b3e      	cmp	r3, #62	; 0x3e
 8006e44:	d81b      	bhi.n	8006e7e <USB_EPStartXfer+0x30a>
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <USB_EPStartXfer+0x2f2>
 8006e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e60:	3301      	adds	r3, #1
 8006e62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e059      	b.n	8006f32 <USB_EPStartXfer+0x3be>
 8006e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <USB_EPStartXfer+0x32a>
 8006e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	e038      	b.n	8006f32 <USB_EPStartXfer+0x3be>
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d130      	bne.n	8006f32 <USB_EPStartXfer+0x3be>
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006eea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eee:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	011a      	lsls	r2, r3, #4
 8006f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	895b      	ldrh	r3, [r3, #10]
 8006f3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6959      	ldr	r1, [r3, #20]
 8006f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f60:	6800      	ldr	r0, [r0, #0]
 8006f62:	f001 fd7d 	bl	8008a60 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695a      	ldr	r2, [r3, #20]
 8006f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f76:	441a      	add	r2, r3
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d90f      	bls.n	8006fc0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6a1a      	ldr	r2, [r3, #32]
 8006fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb0:	1ad2      	subs	r2, r2, r3
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	621a      	str	r2, [r3, #32]
 8006fbe:	e00e      	b.n	8006fde <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f040 809a 	bne.w	8007124 <USB_EPStartXfer+0x5b0>
 8006ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ff8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ffc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007012:	b29b      	uxth	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800701e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007022:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	440a      	add	r2, r1
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	011a      	lsls	r2, r3, #4
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4413      	add	r3, r2
 8007046:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800704a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d122      	bne.n	80070a2 <USB_EPStartXfer+0x52e>
 800705c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007060:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800706e:	b29a      	uxth	r2, r3
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007080:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007092:	b29a      	uxth	r2, r3
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	e083      	b.n	80071aa <USB_EPStartXfer+0x636>
 80070a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a6:	2b3e      	cmp	r3, #62	; 0x3e
 80070a8:	d81b      	bhi.n	80070e2 <USB_EPStartXfer+0x56e>
 80070aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <USB_EPStartXfer+0x556>
 80070c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070c4:	3301      	adds	r3, #1
 80070c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	029b      	lsls	r3, r3, #10
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	e063      	b.n	80071aa <USB_EPStartXfer+0x636>
 80070e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <USB_EPStartXfer+0x58e>
 80070f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007102:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	801a      	strh	r2, [r3, #0]
 8007122:	e042      	b.n	80071aa <USB_EPStartXfer+0x636>
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d13a      	bne.n	80071aa <USB_EPStartXfer+0x636>
 8007134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007138:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800713c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007140:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	4619      	mov	r1, r3
 800715a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007162:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007166:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800716a:	6812      	ldr	r2, [r2, #0]
 800716c:	440a      	add	r2, r1
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	011a      	lsls	r2, r3, #4
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4413      	add	r3, r2
 800718a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719c:	b29a      	uxth	r2, r3
 800719e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	891b      	ldrh	r3, [r3, #8]
 80071b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6959      	ldr	r1, [r3, #20]
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071d8:	6800      	ldr	r0, [r0, #0]
 80071da:	f001 fc41 	bl	8008a60 <USB_WritePMA>
 80071de:	f000 be0e 	b.w	8007dfe <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d16d      	bne.n	80072ce <USB_EPStartXfer+0x75a>
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800720c:	b29b      	uxth	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007212:	4413      	add	r3, r2
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	011a      	lsls	r2, r3, #4
 8007224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007226:	4413      	add	r3, r2
 8007228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800722c:	647b      	str	r3, [r7, #68]	; 0x44
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d112      	bne.n	800725c <USB_EPStartXfer+0x6e8>
 8007236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007240:	b29a      	uxth	r2, r3
 8007242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007254:	b29a      	uxth	r2, r3
 8007256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e063      	b.n	8007324 <USB_EPStartXfer+0x7b0>
 800725c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007260:	2b3e      	cmp	r3, #62	; 0x3e
 8007262:	d817      	bhi.n	8007294 <USB_EPStartXfer+0x720>
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800726e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <USB_EPStartXfer+0x710>
 800727a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800727e:	3301      	adds	r3, #1
 8007280:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007284:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007288:	b29b      	uxth	r3, r3
 800728a:	029b      	lsls	r3, r3, #10
 800728c:	b29a      	uxth	r2, r3
 800728e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007290:	801a      	strh	r2, [r3, #0]
 8007292:	e047      	b.n	8007324 <USB_EPStartXfer+0x7b0>
 8007294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d104      	bne.n	80072b4 <USB_EPStartXfer+0x740>
 80072aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072ae:	3b01      	subs	r3, #1
 80072b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80072b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	029b      	lsls	r3, r3, #10
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	e02a      	b.n	8007324 <USB_EPStartXfer+0x7b0>
 80072ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d122      	bne.n	8007324 <USB_EPStartXfer+0x7b0>
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	653b      	str	r3, [r7, #80]	; 0x50
 80072ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072fe:	4413      	add	r3, r2
 8007300:	653b      	str	r3, [r7, #80]	; 0x50
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	011a      	lsls	r2, r3, #4
 8007310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007312:	4413      	add	r3, r2
 8007314:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731e:	b29a      	uxth	r2, r3
 8007320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007322:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	891b      	ldrh	r3, [r3, #8]
 8007330:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6959      	ldr	r1, [r3, #20]
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	b29b      	uxth	r3, r3
 8007346:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800734a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800734e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007352:	6800      	ldr	r0, [r0, #0]
 8007354:	f001 fb84 	bl	8008a60 <USB_WritePMA>
            ep->xfer_buff += len;
 8007358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007368:	441a      	add	r2, r3
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	429a      	cmp	r2, r3
 8007390:	d90f      	bls.n	80073b2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	621a      	str	r2, [r3, #32]
 80073b0:	e00e      	b.n	80073d0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80073b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2200      	movs	r2, #0
 80073ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	643b      	str	r3, [r7, #64]	; 0x40
 80073dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d16d      	bne.n	80074c8 <USB_EPStartXfer+0x954>
 80073ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	4413      	add	r3, r2
 800740e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	011a      	lsls	r2, r3, #4
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	4413      	add	r3, r2
 8007422:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
 8007428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d112      	bne.n	8007456 <USB_EPStartXfer+0x8e2>
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800743a:	b29a      	uxth	r2, r3
 800743c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800744e:	b29a      	uxth	r2, r3
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e05d      	b.n	8007512 <USB_EPStartXfer+0x99e>
 8007456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745a:	2b3e      	cmp	r3, #62	; 0x3e
 800745c:	d817      	bhi.n	800748e <USB_EPStartXfer+0x91a>
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	085b      	lsrs	r3, r3, #1
 8007464:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <USB_EPStartXfer+0x90a>
 8007474:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007478:	3301      	adds	r3, #1
 800747a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800747e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007482:	b29b      	uxth	r3, r3
 8007484:	029b      	lsls	r3, r3, #10
 8007486:	b29a      	uxth	r2, r3
 8007488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748a:	801a      	strh	r2, [r3, #0]
 800748c:	e041      	b.n	8007512 <USB_EPStartXfer+0x99e>
 800748e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d104      	bne.n	80074ae <USB_EPStartXfer+0x93a>
 80074a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074a8:	3b01      	subs	r3, #1
 80074aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80074ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	029b      	lsls	r3, r3, #10
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e024      	b.n	8007512 <USB_EPStartXfer+0x99e>
 80074c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d11c      	bne.n	8007512 <USB_EPStartXfer+0x99e>
 80074d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ec:	4413      	add	r3, r2
 80074ee:	643b      	str	r3, [r7, #64]	; 0x40
 80074f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	011a      	lsls	r2, r3, #4
 80074fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007500:	4413      	add	r3, r2
 8007502:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750c:	b29a      	uxth	r2, r3
 800750e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007510:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	895b      	ldrh	r3, [r3, #10]
 800751e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6959      	ldr	r1, [r3, #20]
 800752e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007532:	b29b      	uxth	r3, r3
 8007534:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007538:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800753c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007540:	6800      	ldr	r0, [r0, #0]
 8007542:	f001 fa8d 	bl	8008a60 <USB_WritePMA>
 8007546:	f000 bc5a 	b.w	8007dfe <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800757c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007580:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	441a      	add	r2, r3
 800759e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d6:	4413      	add	r3, r2
 80075d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	011a      	lsls	r2, r3, #4
 80075e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ea:	4413      	add	r3, r2
 80075ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	891b      	ldrh	r3, [r3, #8]
 8007608:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800760c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6959      	ldr	r1, [r3, #20]
 8007618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761c:	b29b      	uxth	r3, r3
 800761e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007622:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007626:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	f001 fa18 	bl	8008a60 <USB_WritePMA>
 8007630:	e3e5      	b.n	8007dfe <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007658:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800765c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	441a      	add	r2, r3
 8007676:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007682:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6a1a      	ldr	r2, [r3, #32]
 800769a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 81bc 	beq.w	8007a4c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d16d      	bne.n	80077ce <USB_EPStartXfer+0xc5a>
 80076f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770c:	b29b      	uxth	r3, r3
 800770e:	461a      	mov	r2, r3
 8007710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007712:	4413      	add	r3, r2
 8007714:	67bb      	str	r3, [r7, #120]	; 0x78
 8007716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	011a      	lsls	r2, r3, #4
 8007724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007726:	4413      	add	r3, r2
 8007728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800772c:	677b      	str	r3, [r7, #116]	; 0x74
 800772e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d112      	bne.n	800775c <USB_EPStartXfer+0xbe8>
 8007736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007740:	b29a      	uxth	r2, r3
 8007742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007744:	801a      	strh	r2, [r3, #0]
 8007746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007754:	b29a      	uxth	r2, r3
 8007756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e060      	b.n	800781e <USB_EPStartXfer+0xcaa>
 800775c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007760:	2b3e      	cmp	r3, #62	; 0x3e
 8007762:	d817      	bhi.n	8007794 <USB_EPStartXfer+0xc20>
 8007764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007768:	085b      	lsrs	r3, r3, #1
 800776a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <USB_EPStartXfer+0xc10>
 800777a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800777e:	3301      	adds	r3, #1
 8007780:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007784:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007788:	b29b      	uxth	r3, r3
 800778a:	029b      	lsls	r3, r3, #10
 800778c:	b29a      	uxth	r2, r3
 800778e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	e044      	b.n	800781e <USB_EPStartXfer+0xcaa>
 8007794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800779e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <USB_EPStartXfer+0xc40>
 80077aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80077ae:	3b01      	subs	r3, #1
 80077b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80077b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	029b      	lsls	r3, r3, #10
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	e027      	b.n	800781e <USB_EPStartXfer+0xcaa>
 80077ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d11f      	bne.n	800781e <USB_EPStartXfer+0xcaa>
 80077de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077f4:	4413      	add	r3, r2
 80077f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	011a      	lsls	r2, r3, #4
 8007808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800780c:	4413      	add	r3, r2
 800780e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007812:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	b29a      	uxth	r2, r3
 800781a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800781c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	895b      	ldrh	r3, [r3, #10]
 800782a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6959      	ldr	r1, [r3, #20]
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	b29b      	uxth	r3, r3
 8007840:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007844:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007848:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f001 f907 	bl	8008a60 <USB_WritePMA>
          ep->xfer_buff += len;
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695a      	ldr	r2, [r3, #20]
 800785e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007862:	441a      	add	r2, r3
 8007864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007880:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	d90f      	bls.n	80078ac <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	1ad2      	subs	r2, r2, r3
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	621a      	str	r2, [r3, #32]
 80078aa:	e00e      	b.n	80078ca <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80078ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80078ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8295 	beq.w	8007dfe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d16d      	bne.n	80079c0 <USB_EPStartXfer+0xe4c>
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007904:	4413      	add	r3, r2
 8007906:	66bb      	str	r3, [r7, #104]	; 0x68
 8007908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	011a      	lsls	r2, r3, #4
 8007916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007918:	4413      	add	r3, r2
 800791a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800791e:	667b      	str	r3, [r7, #100]	; 0x64
 8007920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d112      	bne.n	800794e <USB_EPStartXfer+0xdda>
 8007928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	b29b      	uxth	r3, r3
 800792e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007932:	b29a      	uxth	r2, r3
 8007934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007936:	801a      	strh	r2, [r3, #0]
 8007938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007946:	b29a      	uxth	r2, r3
 8007948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800794a:	801a      	strh	r2, [r3, #0]
 800794c:	e063      	b.n	8007a16 <USB_EPStartXfer+0xea2>
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	2b3e      	cmp	r3, #62	; 0x3e
 8007954:	d817      	bhi.n	8007986 <USB_EPStartXfer+0xe12>
 8007956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <USB_EPStartXfer+0xe02>
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007970:	3301      	adds	r3, #1
 8007972:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797a:	b29b      	uxth	r3, r3
 800797c:	029b      	lsls	r3, r3, #10
 800797e:	b29a      	uxth	r2, r3
 8007980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	e047      	b.n	8007a16 <USB_EPStartXfer+0xea2>
 8007986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <USB_EPStartXfer+0xe32>
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a0:	3b01      	subs	r3, #1
 80079a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	029b      	lsls	r3, r3, #10
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079bc:	801a      	strh	r2, [r3, #0]
 80079be:	e02a      	b.n	8007a16 <USB_EPStartXfer+0xea2>
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d122      	bne.n	8007a16 <USB_EPStartXfer+0xea2>
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	673b      	str	r3, [r7, #112]	; 0x70
 80079dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079f0:	4413      	add	r3, r2
 80079f2:	673b      	str	r3, [r7, #112]	; 0x70
 80079f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	011a      	lsls	r2, r3, #4
 8007a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	891b      	ldrh	r3, [r3, #8]
 8007a22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6959      	ldr	r1, [r3, #20]
 8007a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a3c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a40:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a44:	6800      	ldr	r0, [r0, #0]
 8007a46:	f001 f80b 	bl	8008a60 <USB_WritePMA>
 8007a4a:	e1d8      	b.n	8007dfe <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d178      	bne.n	8007b4e <USB_EPStartXfer+0xfda>
 8007a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a80:	4413      	add	r3, r2
 8007a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	011a      	lsls	r2, r3, #4
 8007a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a98:	4413      	add	r3, r2
 8007a9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d116      	bne.n	8007ad8 <USB_EPStartXfer+0xf64>
 8007aaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ad4:	801a      	strh	r2, [r3, #0]
 8007ad6:	e06b      	b.n	8007bb0 <USB_EPStartXfer+0x103c>
 8007ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007adc:	2b3e      	cmp	r3, #62	; 0x3e
 8007ade:	d818      	bhi.n	8007b12 <USB_EPStartXfer+0xf9e>
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <USB_EPStartXfer+0xf8c>
 8007af6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007afa:	3301      	adds	r3, #1
 8007afc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	029b      	lsls	r3, r3, #10
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	e04e      	b.n	8007bb0 <USB_EPStartXfer+0x103c>
 8007b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b20:	f003 031f 	and.w	r3, r3, #31
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <USB_EPStartXfer+0xfbe>
 8007b28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007b32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	029b      	lsls	r3, r3, #10
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b4a:	801a      	strh	r2, [r3, #0]
 8007b4c:	e030      	b.n	8007bb0 <USB_EPStartXfer+0x103c>
 8007b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d128      	bne.n	8007bb0 <USB_EPStartXfer+0x103c>
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b82:	4413      	add	r3, r2
 8007b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	011a      	lsls	r2, r3, #4
 8007b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	891b      	ldrh	r3, [r3, #8]
 8007bbc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6959      	ldr	r1, [r3, #20]
 8007bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bd6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007bda:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007bde:	6800      	ldr	r0, [r0, #0]
 8007be0:	f000 ff3e 	bl	8008a60 <USB_WritePMA>
          ep->xfer_buff += len;
 8007be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf4:	441a      	add	r2, r3
 8007bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6a1a      	ldr	r2, [r3, #32]
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d90f      	bls.n	8007c3e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6a1a      	ldr	r2, [r3, #32]
 8007c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	621a      	str	r2, [r3, #32]
 8007c3c:	e00e      	b.n	8007c5c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 80cc 	beq.w	8007dfe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d178      	bne.n	8007d76 <USB_EPStartXfer+0x1202>
 8007c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca8:	4413      	add	r3, r2
 8007caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	011a      	lsls	r2, r3, #4
 8007cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d116      	bne.n	8007d00 <USB_EPStartXfer+0x118c>
 8007cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	e064      	b.n	8007dca <USB_EPStartXfer+0x1256>
 8007d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d04:	2b3e      	cmp	r3, #62	; 0x3e
 8007d06:	d818      	bhi.n	8007d3a <USB_EPStartXfer+0x11c6>
 8007d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <USB_EPStartXfer+0x11b4>
 8007d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d22:	3301      	adds	r3, #1
 8007d24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	029b      	lsls	r3, r3, #10
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d36:	801a      	strh	r2, [r3, #0]
 8007d38:	e047      	b.n	8007dca <USB_EPStartXfer+0x1256>
 8007d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <USB_EPStartXfer+0x11e6>
 8007d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d54:	3b01      	subs	r3, #1
 8007d56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	029b      	lsls	r3, r3, #10
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	e029      	b.n	8007dca <USB_EPStartXfer+0x1256>
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d121      	bne.n	8007dca <USB_EPStartXfer+0x1256>
 8007d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	461a      	mov	r2, r3
 8007d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	011a      	lsls	r2, r3, #4
 8007db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007db4:	4413      	add	r3, r2
 8007db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	895b      	ldrh	r3, [r3, #10]
 8007dd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6959      	ldr	r1, [r3, #20]
 8007de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007df0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007df4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007df8:	6800      	ldr	r0, [r0, #0]
 8007dfa:	f000 fe31 	bl	8008a60 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e20:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e2c:	8013      	strh	r3, [r2, #0]
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007e36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e3a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007e3e:	8812      	ldrh	r2, [r2, #0]
 8007e40:	f082 0210 	eor.w	r2, r2, #16
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007e4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e52:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007e56:	8812      	ldrh	r2, [r2, #0]
 8007e58:	f082 0220 	eor.w	r2, r2, #32
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	441a      	add	r2, r3
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	8013      	strh	r3, [r2, #0]
 8007e96:	f000 bc9f 	b.w	80087d8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	7b1b      	ldrb	r3, [r3, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f040 80ae 	bne.w	8008008 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699a      	ldr	r2, [r3, #24]
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d917      	bls.n	8007ef8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	619a      	str	r2, [r3, #24]
 8007ef6:	e00e      	b.n	8007f16 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2200      	movs	r2, #0
 8007f14:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	011a      	lsls	r2, r3, #4
 8007f4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f52:	4413      	add	r3, r2
 8007f54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d116      	bne.n	8007f92 <USB_EPStartXfer+0x141e>
 8007f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e3e8      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
 8007f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f96:	2b3e      	cmp	r3, #62	; 0x3e
 8007f98:	d818      	bhi.n	8007fcc <USB_EPStartXfer+0x1458>
 8007f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <USB_EPStartXfer+0x1446>
 8007fb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	029b      	lsls	r3, r3, #10
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	e3cb      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
 8007fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d104      	bne.n	8007fec <USB_EPStartXfer+0x1478>
 8007fe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007fec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e3ad      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	78db      	ldrb	r3, [r3, #3]
 8008014:	2b02      	cmp	r3, #2
 8008016:	f040 8200 	bne.w	800841a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f040 8091 	bne.w	800814e <USB_EPStartXfer+0x15da>
 800802c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008050:	4413      	add	r3, r2
 8008052:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	011a      	lsls	r2, r3, #4
 8008064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008068:	4413      	add	r3, r2
 800806a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800806e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d116      	bne.n	80080b0 <USB_EPStartXfer+0x153c>
 8008082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800808e:	b29a      	uxth	r2, r3
 8008090:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008094:	801a      	strh	r2, [r3, #0]
 8008096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	e083      	b.n	80081b8 <USB_EPStartXfer+0x1644>
 80080b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b3e      	cmp	r3, #62	; 0x3e
 80080be:	d820      	bhi.n	8008102 <USB_EPStartXfer+0x158e>
 80080c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <USB_EPStartXfer+0x157c>
 80080e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ea:	3301      	adds	r3, #1
 80080ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	029b      	lsls	r3, r3, #10
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080fe:	801a      	strh	r2, [r3, #0]
 8008100:	e05a      	b.n	80081b8 <USB_EPStartXfer+0x1644>
 8008102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <USB_EPStartXfer+0x15be>
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812c:	3b01      	subs	r3, #1
 800812e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008136:	b29b      	uxth	r3, r3
 8008138:	029b      	lsls	r3, r3, #10
 800813a:	b29b      	uxth	r3, r3
 800813c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008144:	b29a      	uxth	r2, r3
 8008146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	e034      	b.n	80081b8 <USB_EPStartXfer+0x1644>
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d12c      	bne.n	80081b8 <USB_EPStartXfer+0x1644>
 800815e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800816c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800817a:	b29b      	uxth	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008182:	4413      	add	r3, r2
 8008184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	011a      	lsls	r2, r3, #4
 8008196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800819a:	4413      	add	r3, r2
 800819c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8091 	bne.w	80082fa <USB_EPStartXfer+0x1786>
 80081d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081fc:	4413      	add	r3, r2
 80081fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	011a      	lsls	r2, r3, #4
 8008210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008214:	4413      	add	r3, r2
 8008216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800821a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d116      	bne.n	800825c <USB_EPStartXfer+0x16e8>
 800822e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800823a:	b29a      	uxth	r2, r3
 800823c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008252:	b29a      	uxth	r2, r3
 8008254:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008258:	801a      	strh	r2, [r3, #0]
 800825a:	e07c      	b.n	8008356 <USB_EPStartXfer+0x17e2>
 800825c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b3e      	cmp	r3, #62	; 0x3e
 800826a:	d820      	bhi.n	80082ae <USB_EPStartXfer+0x173a>
 800826c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	085b      	lsrs	r3, r3, #1
 800827a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800827e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <USB_EPStartXfer+0x1728>
 8008292:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008296:	3301      	adds	r3, #1
 8008298:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800829c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	029b      	lsls	r3, r3, #10
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082aa:	801a      	strh	r2, [r3, #0]
 80082ac:	e053      	b.n	8008356 <USB_EPStartXfer+0x17e2>
 80082ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	f003 031f 	and.w	r3, r3, #31
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <USB_EPStartXfer+0x176a>
 80082d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082d8:	3b01      	subs	r3, #1
 80082da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80082de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	029b      	lsls	r3, r3, #10
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e02d      	b.n	8008356 <USB_EPStartXfer+0x17e2>
 80082fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d125      	bne.n	8008356 <USB_EPStartXfer+0x17e2>
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008318:	b29b      	uxth	r3, r3
 800831a:	461a      	mov	r2, r3
 800831c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008320:	4413      	add	r3, r2
 8008322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	011a      	lsls	r2, r3, #4
 8008334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008338:	4413      	add	r3, r2
 800833a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800833e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	b29a      	uxth	r2, r3
 8008350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008354:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 81fe 	beq.w	8008764 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008388:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800838c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <USB_EPStartXfer+0x182c>
 8008394:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10d      	bne.n	80083bc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f040 81db 	bne.w	8008764 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 81d4 	bne.w	8008764 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80083bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80083e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	441a      	add	r2, r3
 8008400:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800840c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008414:	b29b      	uxth	r3, r3
 8008416:	8013      	strh	r3, [r2, #0]
 8008418:	e1a4      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800841a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	78db      	ldrb	r3, [r3, #3]
 8008426:	2b01      	cmp	r3, #1
 8008428:	f040 819a 	bne.w	8008760 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800842c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	429a      	cmp	r2, r3
 8008446:	d917      	bls.n	8008478 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	699a      	ldr	r2, [r3, #24]
 8008464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008468:	1ad2      	subs	r2, r2, r3
 800846a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	619a      	str	r2, [r3, #24]
 8008476:	e00e      	b.n	8008496 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2200      	movs	r2, #0
 8008494:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d178      	bne.n	8008598 <USB_EPStartXfer+0x1a24>
 80084a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	461a      	mov	r2, r3
 80084c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084ca:	4413      	add	r3, r2
 80084cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	011a      	lsls	r2, r3, #4
 80084de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084e2:	4413      	add	r3, r2
 80084e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d116      	bne.n	8008522 <USB_EPStartXfer+0x19ae>
 80084f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008500:	b29a      	uxth	r2, r3
 8008502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	b29b      	uxth	r3, r3
 8008510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008518:	b29a      	uxth	r2, r3
 800851a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e06b      	b.n	80085fa <USB_EPStartXfer+0x1a86>
 8008522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008526:	2b3e      	cmp	r3, #62	; 0x3e
 8008528:	d818      	bhi.n	800855c <USB_EPStartXfer+0x19e8>
 800852a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852e:	085b      	lsrs	r3, r3, #1
 8008530:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <USB_EPStartXfer+0x19d6>
 8008540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008544:	3301      	adds	r3, #1
 8008546:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800854a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800854e:	b29b      	uxth	r3, r3
 8008550:	029b      	lsls	r3, r3, #10
 8008552:	b29a      	uxth	r2, r3
 8008554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	e04e      	b.n	80085fa <USB_EPStartXfer+0x1a86>
 800855c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <USB_EPStartXfer+0x1a08>
 8008572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008576:	3b01      	subs	r3, #1
 8008578:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800857c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008580:	b29b      	uxth	r3, r3
 8008582:	029b      	lsls	r3, r3, #10
 8008584:	b29b      	uxth	r3, r3
 8008586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800858e:	b29a      	uxth	r2, r3
 8008590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	e030      	b.n	80085fa <USB_EPStartXfer+0x1a86>
 8008598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d128      	bne.n	80085fa <USB_EPStartXfer+0x1a86>
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085cc:	4413      	add	r3, r2
 80085ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	011a      	lsls	r2, r3, #4
 80085e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e4:	4413      	add	r3, r2
 80085e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80085f8:	801a      	strh	r2, [r3, #0]
 80085fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d178      	bne.n	800870a <USB_EPStartXfer+0x1b96>
 8008618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800862a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008634:	b29b      	uxth	r3, r3
 8008636:	461a      	mov	r2, r3
 8008638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800863c:	4413      	add	r3, r2
 800863e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	011a      	lsls	r2, r3, #4
 8008650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008654:	4413      	add	r3, r2
 8008656:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800865a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800865e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d116      	bne.n	8008694 <USB_EPStartXfer+0x1b20>
 8008666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008672:	b29a      	uxth	r2, r3
 8008674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008678:	801a      	strh	r2, [r3, #0]
 800867a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800868a:	b29a      	uxth	r2, r3
 800868c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008690:	801a      	strh	r2, [r3, #0]
 8008692:	e067      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
 8008694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008698:	2b3e      	cmp	r3, #62	; 0x3e
 800869a:	d818      	bhi.n	80086ce <USB_EPStartXfer+0x1b5a>
 800869c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d004      	beq.n	80086bc <USB_EPStartXfer+0x1b48>
 80086b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	029b      	lsls	r3, r3, #10
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e04a      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
 80086ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <USB_EPStartXfer+0x1b7a>
 80086e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086e8:	3b01      	subs	r3, #1
 80086ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	029b      	lsls	r3, r3, #10
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008700:	b29a      	uxth	r2, r3
 8008702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	e02c      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
 800870a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d124      	bne.n	8008764 <USB_EPStartXfer+0x1bf0>
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008728:	b29b      	uxth	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008730:	4413      	add	r3, r2
 8008732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	011a      	lsls	r2, r3, #4
 8008744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008748:	4413      	add	r3, r2
 800874a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800874e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008756:	b29a      	uxth	r2, r3
 8008758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875c:	801a      	strh	r2, [r3, #0]
 800875e:	e001      	b.n	8008764 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e03a      	b.n	80087da <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800878e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008792:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008796:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800879a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800879e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80087a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	441a      	add	r2, r3
 80087c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80087c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d020      	beq.n	8008838 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800880c:	81bb      	strh	r3, [r7, #12]
 800880e:	89bb      	ldrh	r3, [r7, #12]
 8008810:	f083 0310 	eor.w	r3, r3, #16
 8008814:	81bb      	strh	r3, [r7, #12]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	89bb      	ldrh	r3, [r7, #12]
 8008822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800882e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008832:	b29b      	uxth	r3, r3
 8008834:	8013      	strh	r3, [r2, #0]
 8008836:	e01f      	b.n	8008878 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884e:	81fb      	strh	r3, [r7, #14]
 8008850:	89fb      	ldrh	r3, [r7, #14]
 8008852:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008856:	81fb      	strh	r3, [r7, #14]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	441a      	add	r2, r3
 8008862:	89fb      	ldrh	r3, [r7, #14]
 8008864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800886c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008874:	b29b      	uxth	r3, r3
 8008876:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	7b1b      	ldrb	r3, [r3, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 809d 	bne.w	80089d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	785b      	ldrb	r3, [r3, #1]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d04c      	beq.n	800893a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	823b      	strh	r3, [r7, #16]
 80088ae:	8a3b      	ldrh	r3, [r7, #16]
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01b      	beq.n	80088f0 <USB_EPClearStall+0x6c>
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	81fb      	strh	r3, [r7, #14]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	441a      	add	r2, r3
 80088da:	89fb      	ldrh	r3, [r7, #14]
 80088dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	78db      	ldrb	r3, [r3, #3]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d06c      	beq.n	80089d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800890e:	81bb      	strh	r3, [r7, #12]
 8008910:	89bb      	ldrh	r3, [r7, #12]
 8008912:	f083 0320 	eor.w	r3, r3, #32
 8008916:	81bb      	strh	r3, [r7, #12]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	441a      	add	r2, r3
 8008922:	89bb      	ldrh	r3, [r7, #12]
 8008924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800892c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008934:	b29b      	uxth	r3, r3
 8008936:	8013      	strh	r3, [r2, #0]
 8008938:	e04b      	b.n	80089d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	82fb      	strh	r3, [r7, #22]
 8008948:	8afb      	ldrh	r3, [r7, #22]
 800894a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01b      	beq.n	800898a <USB_EPClearStall+0x106>
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b29b      	uxth	r3, r3
 8008960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008968:	82bb      	strh	r3, [r7, #20]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	441a      	add	r2, r3
 8008974:	8abb      	ldrh	r3, [r7, #20]
 8008976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800897e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008986:	b29b      	uxth	r3, r3
 8008988:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800899c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a0:	827b      	strh	r3, [r7, #18]
 80089a2:	8a7b      	ldrh	r3, [r7, #18]
 80089a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089a8:	827b      	strh	r3, [r7, #18]
 80089aa:	8a7b      	ldrh	r3, [r7, #18]
 80089ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089b0:	827b      	strh	r3, [r7, #18]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	441a      	add	r2, r3
 80089bc:	8a7b      	ldrh	r3, [r7, #18]
 80089be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr

080089de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2280      	movs	r2, #128	; 0x80
 80089f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bc80      	pop	{r7}
 8008a02:	4770      	bx	lr

08008a04 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr

08008a2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr

08008a4a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr

08008a60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b08d      	sub	sp, #52	; 0x34
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	460b      	mov	r3, r1
 8008a70:	80fb      	strh	r3, [r7, #6]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a76:	88bb      	ldrh	r3, [r7, #4]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	005a      	lsls	r2, r3, #1
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a98:	e01e      	b.n	8008ad8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	021b      	lsls	r3, r3, #8
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	3302      	adds	r3, #2
 8008ac4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	3302      	adds	r3, #2
 8008aca:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	3301      	adds	r3, #1
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1dd      	bne.n	8008a9a <USB_WritePMA+0x3a>
  }
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	3734      	adds	r7, #52	; 0x34
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr

08008aea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b08b      	sub	sp, #44	; 0x2c
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	4611      	mov	r1, r2
 8008af6:	461a      	mov	r2, r3
 8008af8:	460b      	mov	r3, r1
 8008afa:	80fb      	strh	r3, [r7, #6]
 8008afc:	4613      	mov	r3, r2
 8008afe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b00:	88bb      	ldrh	r3, [r7, #4]
 8008b02:	085b      	lsrs	r3, r3, #1
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	005a      	lsls	r2, r3, #1
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b1c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
 8008b22:	e01b      	b.n	8008b5c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	3302      	adds	r3, #2
 8008b30:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	0a1b      	lsrs	r3, r3, #8
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	3302      	adds	r3, #2
 8008b54:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e0      	bne.n	8008b24 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008b62:	88bb      	ldrh	r3, [r7, #4]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d007      	beq.n	8008b7e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	701a      	strb	r2, [r3, #0]
  }
}
 8008b7e:	bf00      	nop
 8008b80:	372c      	adds	r7, #44	; 0x2c
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bc80      	pop	{r7}
 8008b86:	4770      	bx	lr

08008b88 <__NVIC_SystemReset>:
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008b8c:	f3bf 8f4f 	dsb	sy
}
 8008b90:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008b92:	4b06      	ldr	r3, [pc, #24]	; (8008bac <__NVIC_SystemReset+0x24>)
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008b9a:	4904      	ldr	r1, [pc, #16]	; (8008bac <__NVIC_SystemReset+0x24>)
 8008b9c:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <__NVIC_SystemReset+0x28>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ba2:	f3bf 8f4f 	dsb	sy
}
 8008ba6:	bf00      	nop
    __NOP();
 8008ba8:	bf00      	nop
 8008baa:	e7fd      	b.n	8008ba8 <__NVIC_SystemReset+0x20>
 8008bac:	e000ed00 	.word	0xe000ed00
 8008bb0:	05fa0004 	.word	0x05fa0004

08008bb4 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8008bc0:	f240 401c 	movw	r0, #1052	; 0x41c
 8008bc4:	f002 faa8 	bl	800b118 <USBD_static_malloc>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e03f      	b.n	8008c5e <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008bf4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	4798      	blx	r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e000      	b.n	8008c5e <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c78:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00e      	beq.n	8008cca <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f002 fa37 	bl	800b130 <USBD_static_free>
    pdev->pClassData = NULL;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf4:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d03f      	beq.n	8008d82 <USBD_DFU_Setup+0xae>
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	f040 80c2 	bne.w	8008e8c <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	785b      	ldrb	r3, [r3, #1]
 8008d0c:	2b06      	cmp	r3, #6
 8008d0e:	d830      	bhi.n	8008d72 <USBD_DFU_Setup+0x9e>
 8008d10:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <USBD_DFU_Setup+0x44>)
 8008d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d16:	bf00      	nop
 8008d18:	08008d69 	.word	0x08008d69
 8008d1c:	08008d35 	.word	0x08008d35
 8008d20:	08008d3f 	.word	0x08008d3f
 8008d24:	08008d49 	.word	0x08008d49
 8008d28:	08008d51 	.word	0x08008d51
 8008d2c:	08008d59 	.word	0x08008d59
 8008d30:	08008d61 	.word	0x08008d61
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa8e 	bl	8009258 <DFU_Download>
          break;
 8008d3c:	e020      	b.n	8008d80 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 faf3 	bl	800932c <DFU_Upload>
          break;
 8008d46:	e01b      	b.n	8008d80 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fbc7 	bl	80094dc <DFU_GetStatus>
          break;
 8008d4e:	e017      	b.n	8008d80 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fc75 	bl	8009640 <DFU_ClearStatus>
          break;
 8008d56:	e013      	b.n	8008d80 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fcc0 	bl	80096de <DFU_GetState>
          break;
 8008d5e:	e00f      	b.n	8008d80 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fcd0 	bl	8009706 <DFU_Abort>
          break;
 8008d66:	e00b      	b.n	8008d80 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa14 	bl	8009198 <DFU_Detach>
          break;
 8008d70:	e006      	b.n	8008d80 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fd34 	bl	800a7e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	747b      	strb	r3, [r7, #17]
          break;
 8008d7e:	bf00      	nop
      }
      break;
 8008d80:	e08b      	b.n	8008e9a <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	2b0b      	cmp	r3, #11
 8008d88:	d878      	bhi.n	8008e7c <USBD_DFU_Setup+0x1a8>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <USBD_DFU_Setup+0xbc>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008dc1 	.word	0x08008dc1
 8008d94:	08008e7d 	.word	0x08008e7d
 8008d98:	08008e7d 	.word	0x08008e7d
 8008d9c:	08008e7d 	.word	0x08008e7d
 8008da0:	08008e7d 	.word	0x08008e7d
 8008da4:	08008e7d 	.word	0x08008e7d
 8008da8:	08008de9 	.word	0x08008de9
 8008dac:	08008e7d 	.word	0x08008e7d
 8008db0:	08008e7d 	.word	0x08008e7d
 8008db4:	08008e7d 	.word	0x08008e7d
 8008db8:	08008e13 	.word	0x08008e13
 8008dbc:	08008e3d 	.word	0x08008e3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d107      	bne.n	8008dda <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008dca:	f107 030a 	add.w	r3, r7, #10
 8008dce:	2202      	movs	r2, #2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fd6f 	bl	800a8b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dd8:	e057      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fd00 	bl	800a7e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008de2:	2302      	movs	r3, #2
 8008de4:	747b      	strb	r3, [r7, #17]
          break;
 8008de6:	e050      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	885b      	ldrh	r3, [r3, #2]
 8008dec:	0a1b      	lsrs	r3, r3, #8
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	2b21      	cmp	r3, #33	; 0x21
 8008df2:	d107      	bne.n	8008e04 <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8008df4:	4b2b      	ldr	r3, [pc, #172]	; (8008ea4 <USBD_DFU_Setup+0x1d0>)
 8008df6:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	88db      	ldrh	r3, [r3, #6]
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	bf28      	it	cs
 8008e00:	2309      	movcs	r3, #9
 8008e02:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008e04:	8a7b      	ldrh	r3, [r7, #18]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6979      	ldr	r1, [r7, #20]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 fd53 	bl	800a8b6 <USBD_CtlSendData>
          break;
 8008e10:	e03b      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d108      	bne.n	8008e2e <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e22:	2201      	movs	r2, #1
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 fd45 	bl	800a8b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e2c:	e02d      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 fcd6 	bl	800a7e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e36:	2302      	movs	r3, #2
 8008e38:	747b      	strb	r3, [r7, #17]
          break;
 8008e3a:	e026      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	885b      	ldrh	r3, [r3, #2]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d113      	bne.n	8008e6e <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d107      	bne.n	8008e60 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	885b      	ldrh	r3, [r3, #2]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	461a      	mov	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e5e:	e014      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 fcbd 	bl	800a7e2 <USBD_CtlError>
              ret = USBD_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	747b      	strb	r3, [r7, #17]
          break;
 8008e6c:	e00d      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 fcb6 	bl	800a7e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e76:	2302      	movs	r3, #2
 8008e78:	747b      	strb	r3, [r7, #17]
          break;
 8008e7a:	e006      	b.n	8008e8a <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 fcaf 	bl	800a7e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e84:	2302      	movs	r3, #2
 8008e86:	747b      	strb	r3, [r7, #17]
          break;
 8008e88:	bf00      	nop
      }
      break;
 8008e8a:	e006      	b.n	8008e9a <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 fca7 	bl	800a7e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e94:	2302      	movs	r3, #2
 8008e96:	747b      	strb	r3, [r7, #17]
      break;
 8008e98:	bf00      	nop
  }

  return ret;
 8008e9a:	7c7b      	ldrb	r3, [r7, #17]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	2000005a 	.word	0x2000005a

08008ea8 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	221b      	movs	r2, #27
 8008eb4:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8008eb6:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000048 	.word	0x20000048

08008ec8 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr

08008ee0 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	f040 80ca 	bne.w	80090a4 <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f040 8086 	bne.w	8009028 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d105      	bne.n	8008f30 <USBD_DFU_EP0_TxReady+0x3c>
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	f000 809a 	beq.w	8009064 <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b21      	cmp	r3, #33	; 0x21
 8008f36:	d129      	bne.n	8008f8c <USBD_DFU_EP0_TxReady+0x98>
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	d124      	bne.n	8008f8c <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	461a      	mov	r2, r3
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	789b      	ldrb	r3, [r3, #2]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	441a      	add	r2, r3
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	78db      	ldrb	r3, [r3, #3]
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	441a      	add	r2, r3
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	791b      	ldrb	r3, [r3, #4]
 8008f80:	061b      	lsls	r3, r3, #24
 8008f82:	441a      	add	r2, r3
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8008f8a:	e06b      	b.n	8009064 <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b41      	cmp	r3, #65	; 0x41
 8008f92:	d136      	bne.n	8009002 <USBD_DFU_EP0_TxReady+0x10e>
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f9a:	2b05      	cmp	r3, #5
 8008f9c:	d131      	bne.n	8009002 <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	785b      	ldrb	r3, [r3, #1]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	441a      	add	r2, r3
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	78db      	ldrb	r3, [r3, #3]
 8008fc8:	041b      	lsls	r3, r3, #16
 8008fca:	441a      	add	r2, r3
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	791b      	ldrb	r3, [r3, #4]
 8008fdc:	061b      	lsls	r3, r3, #24
 8008fde:	441a      	add	r2, r3
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d032      	beq.n	8009064 <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 8008ffe:	2302      	movs	r3, #2
 8009000:	e059      	b.n	80090b6 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2200      	movs	r2, #0
 800900e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8009016:	2301      	movs	r3, #1
 8009018:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800901a:	f107 0308 	add.w	r3, r7, #8
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 fbde 	bl	800a7e2 <USBD_CtlError>
 8009026:	e01d      	b.n	8009064 <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800902e:	2b01      	cmp	r3, #1
 8009030:	d918      	bls.n	8009064 <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009038:	3b02      	subs	r3, #2
 800903a:	029a      	lsls	r2, r3, #10
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009042:	4413      	add	r3, r2
 8009044:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	6978      	ldr	r0, [r7, #20]
 8009050:	6939      	ldr	r1, [r7, #16]
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8009060:	2302      	movs	r3, #2
 8009062:	e028      	b.n	80090b6 <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2200      	movs	r2, #0
 8009068:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2203      	movs	r2, #3
 8009078:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	e008      	b.n	80090b6 <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80090aa:	2b07      	cmp	r3, #7
 80090ac:	d102      	bne.n	80090b4 <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb76 	bl	80097a0 <DFU_Leave>
    }
  }

  return USBD_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr

080090ea <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr

08009102 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	bc80      	pop	{r7}
 8009118:	4770      	bx	lr
	...

0800911c <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	220a      	movs	r2, #10
 8009128:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 800912a:	4b03      	ldr	r3, [pc, #12]	; (8009138 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	bc80      	pop	{r7}
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	20000064 	.word	0x20000064

0800913c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	460b      	mov	r3, r1
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	2b06      	cmp	r3, #6
 800914e:	d80a      	bhi.n	8009166 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	4905      	ldr	r1, [pc, #20]	; (8009170 <USBD_DFU_GetUsrStringDesc+0x34>)
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fb51 	bl	800a804 <USBD_GetString>
    return USBD_StrDesc;
 8009162:	4b03      	ldr	r3, [pc, #12]	; (8009170 <USBD_DFU_GetUsrStringDesc+0x34>)
 8009164:	e000      	b.n	8009168 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8009166:	2300      	movs	r3, #0
  }
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000514 	.word	0x20000514

08009174 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	bc80      	pop	{r7}
 8009196:	4770      	bx	lr

08009198 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a8:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d013      	beq.n	80091dc <DFU_Detach+0x44>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d00e      	beq.n	80091dc <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80091c4:	2b05      	cmp	r3, #5
 80091c6:	d009      	beq.n	80091dc <DFU_Detach+0x44>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80091ce:	2b06      	cmp	r3, #6
 80091d0:	d004      	beq.n	80091dc <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80091d8:	2b09      	cmp	r3, #9
 80091da:	d125      	bne.n	8009228 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8009228:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <DFU_Detach+0xbc>)
 800922a:	7d5b      	ldrb	r3, [r3, #21]
 800922c:	f003 0310 	and.w	r3, r3, #16
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fb51 	bl	80098dc <USBD_Stop>
    USBD_Start(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fb42 	bl	80098c4 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8009240:	e004      	b.n	800924c <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	4618      	mov	r0, r3
 8009248:	f7f8 fba2 	bl	8001990 <HAL_Delay>
}
 800924c:	bf00      	nop
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20000048 	.word	0x20000048

08009258 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009268:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d02e      	beq.n	80092d0 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009278:	2b02      	cmp	r3, #2
 800927a:	d004      	beq.n	8009286 <DFU_Download+0x2e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009282:	2b05      	cmp	r3, #5
 8009284:	d11f      	bne.n	80092c6 <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	885b      	ldrh	r3, [r3, #2]
 800928a:	461a      	mov	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	88db      	ldrh	r3, [r3, #6]
 8009296:	461a      	mov	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2203      	movs	r2, #3
 80092a2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80092b2:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	461a      	mov	r2, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 fb27 	bl	800a912 <USBD_CtlPrepareRx>
 80092c4:	e02e      	b.n	8009324 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fa8a 	bl	800a7e2 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 80092ce:	e029      	b.n	8009324 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	d004      	beq.n	80092e4 <DFU_Download+0x8c>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d11a      	bne.n	800931a <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2206      	movs	r2, #6
 80092f0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009318:	e004      	b.n	8009324 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 fa60 	bl	800a7e2 <USBD_CtlError>
}
 8009322:	e7ff      	b.n	8009324 <DFU_Download+0xcc>
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933c:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 80ab 	beq.w	80094a6 <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009356:	2b02      	cmp	r3, #2
 8009358:	d005      	beq.n	8009366 <DFU_Upload+0x3a>
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009360:	2b09      	cmp	r3, #9
 8009362:	f040 8093 	bne.w	800948c <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	885b      	ldrh	r3, [r3, #2]
 800936a:	461a      	mov	r2, r3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	88db      	ldrh	r3, [r3, #6]
 8009376:	461a      	mov	r2, r3
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009384:	2b00      	cmp	r3, #0
 8009386:	d12c      	bne.n	80093e2 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800938e:	2b03      	cmp	r3, #3
 8009390:	d901      	bls.n	8009396 <DFU_Upload+0x6a>
 8009392:	2202      	movs	r2, #2
 8009394:	e000      	b.n	8009398 <DFU_Upload+0x6c>
 8009396:	2209      	movs	r2, #9
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	2221      	movs	r2, #33	; 0x21
 80093cc:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2241      	movs	r2, #65	; 0x41
 80093d2:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2203      	movs	r2, #3
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f001 fa6b 	bl	800a8b6 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80093e0:	e078      	b.n	80094d4 <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d934      	bls.n	8009456 <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2209      	movs	r2, #9
 80093f0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800941e:	3b02      	subs	r3, #2
 8009420:	029a      	lsls	r2, r3, #10
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009428:	4413      	add	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	6979      	ldr	r1, [r7, #20]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800943e:	4798      	blx	r3
 8009440:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009448:	b29b      	uxth	r3, r3
 800944a:	461a      	mov	r2, r3
 800944c:	6939      	ldr	r1, [r7, #16]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 fa31 	bl	800a8b6 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8009454:	e03e      	b.n	80094d4 <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	220f      	movs	r2, #15
 800945a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f9ac 	bl	800a7e2 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800948a:	e023      	b.n	80094d4 <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2200      	movs	r2, #0
 8009490:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f001 f99f 	bl	800a7e2 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 80094a4:	e016      	b.n	80094d4 <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2202      	movs	r2, #2
 80094aa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 80094d2:	e7ff      	b.n	80094d4 <DFU_Upload+0x1a8>
 80094d4:	bf00      	nop
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ea:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d002      	beq.n	80094fc <DFU_GetStatus+0x20>
 80094f6:	2b06      	cmp	r3, #6
 80094f8:	d055      	beq.n	80095a6 <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 80094fa:	e092      	b.n	8009622 <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009502:	2b00      	cmp	r3, #0
 8009504:	d038      	beq.n	8009578 <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2204      	movs	r2, #4
 800950a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009538:	2b00      	cmp	r3, #0
 800953a:	d110      	bne.n	800955e <DFU_GetStatus+0x82>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b41      	cmp	r3, #65	; 0x41
 8009542:	d10c      	bne.n	800955e <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8009558:	2100      	movs	r1, #0
 800955a:	4798      	blx	r3
      break;
 800955c:	e061      	b.n	8009622 <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8009572:	2101      	movs	r1, #1
 8009574:	4798      	blx	r3
      break;
 8009576:	e054      	b.n	8009622 <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2205      	movs	r2, #5
 800957c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80095a4:	e03d      	b.n	8009622 <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d116      	bne.n	80095de <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2207      	movs	r2, #7
 80095b4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80095dc:	e020      	b.n	8009620 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d11b      	bne.n	8009620 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 80095e8:	4b14      	ldr	r3, [pc, #80]	; (800963c <DFU_GetStatus+0x160>)
 80095ea:	7d1b      	ldrb	r3, [r3, #20]
 80095ec:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d015      	beq.n	8009620 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8009620:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8009628:	2206      	movs	r2, #6
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 f942 	bl	800a8b6 <USBD_CtlSendData>
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000048 	.word	0x20000048

08009640 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964e:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009656:	2b0a      	cmp	r3, #10
 8009658:	d11e      	bne.n	8009698 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 8009696:	e01d      	b.n	80096d4 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	220a      	movs	r2, #10
 800969c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	220e      	movs	r2, #14
 80096a4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 80096d4:	bf00      	nop
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	bc80      	pop	{r7}
 80096dc:	4770      	bx	lr

080096de <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80096f4:	2201      	movs	r2, #1
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 f8dc 	bl	800a8b6 <USBD_CtlSendData>
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8009706:	b480      	push	{r7}
 8009708:	b085      	sub	sp, #20
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009714:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800971c:	2b02      	cmp	r3, #2
 800971e:	d013      	beq.n	8009748 <DFU_Abort+0x42>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009726:	2b03      	cmp	r3, #3
 8009728:	d00e      	beq.n	8009748 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009730:	2b05      	cmp	r3, #5
 8009732:	d009      	beq.n	8009748 <DFU_Abort+0x42>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800973a:	2b06      	cmp	r3, #6
 800973c:	d004      	beq.n	8009748 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009744:	2b09      	cmp	r3, #9
 8009746:	d125      	bne.n	8009794 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8009794:	bf00      	nop
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	bc80      	pop	{r7}
 800979c:	4770      	bx	lr
	...

080097a0 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ae:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 80097b8:	4b1f      	ldr	r3, [pc, #124]	; (8009838 <DFU_Leave+0x98>)
 80097ba:	7d1b      	ldrb	r3, [r3, #20]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d016      	beq.n	80097f2 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2206      	movs	r2, #6
 80097c8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 80097f0:	e01f      	b.n	8009832 <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2208      	movs	r2, #8
 80097f6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f85c 	bl	80098dc <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800982e:	f7ff f9ab 	bl	8008b88 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20000048 	.word	0x20000048

0800983c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009850:	2302      	movs	r3, #2
 8009852:	e01a      	b.n	800988a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	79fa      	ldrb	r2, [r7, #7]
 8009880:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f001 fadc 	bl	800ae40 <USBD_LL_Init>

  return USBD_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009892:	b480      	push	{r7}
 8009894:	b085      	sub	sp, #20
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d006      	beq.n	80098b4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73fb      	strb	r3, [r7, #15]
 80098b2:	e001      	b.n	80098b8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80098b4:	2302      	movs	r3, #2
 80098b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	bc80      	pop	{r7}
 80098c2:	4770      	bx	lr

080098c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 faf7 	bl	800aec0 <USBD_LL_Start>

  return USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6852      	ldr	r2, [r2, #4]
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	4611      	mov	r1, r2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 fafc 	bl	800aef6 <USBD_LL_Stop>

  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	bc80      	pop	{r7}
 800991a:	4770      	bx	lr

0800991c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009928:	2302      	movs	r3, #2
 800992a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00c      	beq.n	8009950 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	4611      	mov	r1, r2
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	4798      	blx	r3

  return USBD_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fee9 	bl	800a76a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80099a6:	461a      	mov	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099b4:	f003 031f 	and.w	r3, r3, #31
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d016      	beq.n	80099ea <USBD_LL_SetupStage+0x6a>
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d81c      	bhi.n	80099fa <USBD_LL_SetupStage+0x7a>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <USBD_LL_SetupStage+0x4a>
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d008      	beq.n	80099da <USBD_LL_SetupStage+0x5a>
 80099c8:	e017      	b.n	80099fa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f9ca 	bl	8009d6c <USBD_StdDevReq>
      break;
 80099d8:	e01a      	b.n	8009a10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa2c 	bl	8009e40 <USBD_StdItfReq>
      break;
 80099e8:	e012      	b.n	8009a10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa6c 	bl	8009ed0 <USBD_StdEPReq>
      break;
 80099f8:	e00a      	b.n	8009a10 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 fab5 	bl	800af78 <USBD_LL_StallEP>
      break;
 8009a0e:	bf00      	nop
  }

  return USBD_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	460b      	mov	r3, r1
 8009a24:	607a      	str	r2, [r7, #4]
 8009a26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d14b      	bne.n	8009ac6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d134      	bne.n	8009aaa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d919      	bls.n	8009a80 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	1ad2      	subs	r2, r2, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d203      	bcs.n	8009a6e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	e002      	b.n	8009a74 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	461a      	mov	r2, r3
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 ff68 	bl	800a94e <USBD_CtlContinueRx>
 8009a7e:	e038      	b.n	8009af2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d105      	bne.n	8009aa2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 ff65 	bl	800a972 <USBD_CtlSendStatus>
 8009aa8:	e023      	b.n	8009af2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	d11e      	bne.n	8009af2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009abc:	2100      	movs	r1, #0
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f001 fa5a 	bl	800af78 <USBD_LL_StallEP>
 8009ac4:	e015      	b.n	8009af2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00d      	beq.n	8009aee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d108      	bne.n	8009aee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	7afa      	ldrb	r2, [r7, #11]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	4798      	blx	r3
 8009aec:	e001      	b.n	8009af2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009aee:	2302      	movs	r3, #2
 8009af0:	e000      	b.n	8009af4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	460b      	mov	r3, r1
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b0a:	7afb      	ldrb	r3, [r7, #11]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d17f      	bne.n	8009c10 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3314      	adds	r3, #20
 8009b14:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d15c      	bne.n	8009bda <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d915      	bls.n	8009b58 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	1ad2      	subs	r2, r2, r3
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 fed2 	bl	800a8ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	2100      	movs	r1, #0
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f001 fabd 	bl	800b0d0 <USBD_LL_PrepareReceive>
 8009b56:	e04e      	b.n	8009bf6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	6912      	ldr	r2, [r2, #16]
 8009b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b64:	fb01 f202 	mul.w	r2, r1, r2
 8009b68:	1a9b      	subs	r3, r3, r2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d11c      	bne.n	8009ba8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	689a      	ldr	r2, [r3, #8]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d316      	bcc.n	8009ba8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d20f      	bcs.n	8009ba8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 feae 	bl	800a8ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f001 fa95 	bl	800b0d0 <USBD_LL_PrepareReceive>
 8009ba6:	e026      	b.n	8009bf6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00a      	beq.n	8009bca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d105      	bne.n	8009bca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f001 f9d3 	bl	800af78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fee0 	bl	800a998 <USBD_CtlReceiveStatus>
 8009bd8:	e00d      	b.n	8009bf6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d004      	beq.n	8009bee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009bee:	2180      	movs	r1, #128	; 0x80
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f001 f9c1 	bl	800af78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d11d      	bne.n	8009c3c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff fe81 	bl	8009908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c0e:	e015      	b.n	8009c3c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00d      	beq.n	8009c38 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d108      	bne.n	8009c38 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	7afa      	ldrb	r2, [r7, #11]
 8009c30:	4611      	mov	r1, r2
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	4798      	blx	r3
 8009c36:	e001      	b.n	8009c3c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e000      	b.n	8009c3e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c4e:	2340      	movs	r3, #64	; 0x40
 8009c50:	2200      	movs	r2, #0
 8009c52:	2100      	movs	r1, #0
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 f969 	bl	800af2c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2240      	movs	r2, #64	; 0x40
 8009c66:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c6a:	2340      	movs	r3, #64	; 0x40
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2180      	movs	r1, #128	; 0x80
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f95b 	bl	800af2c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2240      	movs	r2, #64	; 0x40
 8009c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6852      	ldr	r2, [r2, #4]
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	4611      	mov	r1, r2
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4798      	blx	r3
  }

  return USBD_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bc80      	pop	{r7}
 8009ce4:	4770      	bx	lr

08009ce6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2204      	movs	r2, #4
 8009cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr

08009d0e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b083      	sub	sp, #12
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d105      	bne.n	8009d2c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bc80      	pop	{r7}
 8009d36:	4770      	bx	lr

08009d38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d10b      	bne.n	8009d62 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d005      	beq.n	8009d62 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d82:	2b40      	cmp	r3, #64	; 0x40
 8009d84:	d005      	beq.n	8009d92 <USBD_StdDevReq+0x26>
 8009d86:	2b40      	cmp	r3, #64	; 0x40
 8009d88:	d84f      	bhi.n	8009e2a <USBD_StdDevReq+0xbe>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d009      	beq.n	8009da2 <USBD_StdDevReq+0x36>
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d14b      	bne.n	8009e2a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	4798      	blx	r3
      break;
 8009da0:	e048      	b.n	8009e34 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b09      	cmp	r3, #9
 8009da8:	d839      	bhi.n	8009e1e <USBD_StdDevReq+0xb2>
 8009daa:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <USBD_StdDevReq+0x44>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009e01 	.word	0x08009e01
 8009db4:	08009e15 	.word	0x08009e15
 8009db8:	08009e1f 	.word	0x08009e1f
 8009dbc:	08009e0b 	.word	0x08009e0b
 8009dc0:	08009e1f 	.word	0x08009e1f
 8009dc4:	08009de3 	.word	0x08009de3
 8009dc8:	08009dd9 	.word	0x08009dd9
 8009dcc:	08009e1f 	.word	0x08009e1f
 8009dd0:	08009df7 	.word	0x08009df7
 8009dd4:	08009ded 	.word	0x08009ded
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f9dc 	bl	800a198 <USBD_GetDescriptor>
          break;
 8009de0:	e022      	b.n	8009e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fb51 	bl	800a48c <USBD_SetAddress>
          break;
 8009dea:	e01d      	b.n	8009e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fb90 	bl	800a514 <USBD_SetConfig>
          break;
 8009df4:	e018      	b.n	8009e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fc19 	bl	800a630 <USBD_GetConfig>
          break;
 8009dfe:	e013      	b.n	8009e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fc49 	bl	800a69a <USBD_GetStatus>
          break;
 8009e08:	e00e      	b.n	8009e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fc77 	bl	800a700 <USBD_SetFeature>
          break;
 8009e12:	e009      	b.n	8009e28 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fc86 	bl	800a728 <USBD_ClrFeature>
          break;
 8009e1c:	e004      	b.n	8009e28 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fcde 	bl	800a7e2 <USBD_CtlError>
          break;
 8009e26:	bf00      	nop
      }
      break;
 8009e28:	e004      	b.n	8009e34 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fcd8 	bl	800a7e2 <USBD_CtlError>
      break;
 8009e32:	bf00      	nop
  }

  return ret;
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop

08009e40 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e56:	2b40      	cmp	r3, #64	; 0x40
 8009e58:	d005      	beq.n	8009e66 <USBD_StdItfReq+0x26>
 8009e5a:	2b40      	cmp	r3, #64	; 0x40
 8009e5c:	d82e      	bhi.n	8009ebc <USBD_StdItfReq+0x7c>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <USBD_StdItfReq+0x26>
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	d12a      	bne.n	8009ebc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d81d      	bhi.n	8009eae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	889b      	ldrh	r3, [r3, #4]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d813      	bhi.n	8009ea4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	4798      	blx	r3
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	88db      	ldrh	r3, [r3, #6]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d110      	bne.n	8009eb8 <USBD_StdItfReq+0x78>
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10d      	bne.n	8009eb8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fd68 	bl	800a972 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ea2:	e009      	b.n	8009eb8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fc9b 	bl	800a7e2 <USBD_CtlError>
          break;
 8009eac:	e004      	b.n	8009eb8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fc96 	bl	800a7e2 <USBD_CtlError>
          break;
 8009eb6:	e000      	b.n	8009eba <USBD_StdItfReq+0x7a>
          break;
 8009eb8:	bf00      	nop
      }
      break;
 8009eba:	e004      	b.n	8009ec6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fc8f 	bl	800a7e2 <USBD_CtlError>
      break;
 8009ec4:	bf00      	nop
  }

  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	889b      	ldrh	r3, [r3, #4]
 8009ee2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eec:	2b40      	cmp	r3, #64	; 0x40
 8009eee:	d007      	beq.n	8009f00 <USBD_StdEPReq+0x30>
 8009ef0:	2b40      	cmp	r3, #64	; 0x40
 8009ef2:	f200 8146 	bhi.w	800a182 <USBD_StdEPReq+0x2b2>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <USBD_StdEPReq+0x40>
 8009efa:	2b20      	cmp	r3, #32
 8009efc:	f040 8141 	bne.w	800a182 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	4798      	blx	r3
      break;
 8009f0e:	e13d      	b.n	800a18c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f18:	2b20      	cmp	r3, #32
 8009f1a:	d10a      	bne.n	8009f32 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	e12d      	b.n	800a18e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d007      	beq.n	8009f4a <USBD_StdEPReq+0x7a>
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	f300 811b 	bgt.w	800a176 <USBD_StdEPReq+0x2a6>
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d072      	beq.n	800a02a <USBD_StdEPReq+0x15a>
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d03a      	beq.n	8009fbe <USBD_StdEPReq+0xee>
 8009f48:	e115      	b.n	800a176 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d002      	beq.n	8009f5a <USBD_StdEPReq+0x8a>
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d015      	beq.n	8009f84 <USBD_StdEPReq+0xb4>
 8009f58:	e02b      	b.n	8009fb2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00c      	beq.n	8009f7a <USBD_StdEPReq+0xaa>
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	2b80      	cmp	r3, #128	; 0x80
 8009f64:	d009      	beq.n	8009f7a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 f804 	bl	800af78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f70:	2180      	movs	r1, #128	; 0x80
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 f800 	bl	800af78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f78:	e020      	b.n	8009fbc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fc30 	bl	800a7e2 <USBD_CtlError>
              break;
 8009f82:	e01b      	b.n	8009fbc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	885b      	ldrh	r3, [r3, #2]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10e      	bne.n	8009faa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00b      	beq.n	8009faa <USBD_StdEPReq+0xda>
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	2b80      	cmp	r3, #128	; 0x80
 8009f96:	d008      	beq.n	8009faa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	88db      	ldrh	r3, [r3, #6]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d104      	bne.n	8009faa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 ffe7 	bl	800af78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fce1 	bl	800a972 <USBD_CtlSendStatus>

              break;
 8009fb0:	e004      	b.n	8009fbc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fc14 	bl	800a7e2 <USBD_CtlError>
              break;
 8009fba:	bf00      	nop
          }
          break;
 8009fbc:	e0e0      	b.n	800a180 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d002      	beq.n	8009fce <USBD_StdEPReq+0xfe>
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d015      	beq.n	8009ff8 <USBD_StdEPReq+0x128>
 8009fcc:	e026      	b.n	800a01c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fce:	7bbb      	ldrb	r3, [r7, #14]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00c      	beq.n	8009fee <USBD_StdEPReq+0x11e>
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	2b80      	cmp	r3, #128	; 0x80
 8009fd8:	d009      	beq.n	8009fee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 ffca 	bl	800af78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009fe4:	2180      	movs	r1, #128	; 0x80
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 ffc6 	bl	800af78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fec:	e01c      	b.n	800a028 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fbf6 	bl	800a7e2 <USBD_CtlError>
              break;
 8009ff6:	e017      	b.n	800a028 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	885b      	ldrh	r3, [r3, #2]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d112      	bne.n	800a026 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a006:	2b00      	cmp	r3, #0
 800a008:	d004      	beq.n	800a014 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a00a:	7bbb      	ldrb	r3, [r7, #14]
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 ffd1 	bl	800afb6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fcac 	bl	800a972 <USBD_CtlSendStatus>
              }
              break;
 800a01a:	e004      	b.n	800a026 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fbdf 	bl	800a7e2 <USBD_CtlError>
              break;
 800a024:	e000      	b.n	800a028 <USBD_StdEPReq+0x158>
              break;
 800a026:	bf00      	nop
          }
          break;
 800a028:	e0aa      	b.n	800a180 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a030:	2b02      	cmp	r3, #2
 800a032:	d002      	beq.n	800a03a <USBD_StdEPReq+0x16a>
 800a034:	2b03      	cmp	r3, #3
 800a036:	d032      	beq.n	800a09e <USBD_StdEPReq+0x1ce>
 800a038:	e097      	b.n	800a16a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d007      	beq.n	800a050 <USBD_StdEPReq+0x180>
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	2b80      	cmp	r3, #128	; 0x80
 800a044:	d004      	beq.n	800a050 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fbca 	bl	800a7e2 <USBD_CtlError>
                break;
 800a04e:	e091      	b.n	800a174 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a054:	2b00      	cmp	r3, #0
 800a056:	da0b      	bge.n	800a070 <USBD_StdEPReq+0x1a0>
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a05e:	4613      	mov	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	3310      	adds	r3, #16
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	4413      	add	r3, r2
 800a06c:	3304      	adds	r3, #4
 800a06e:	e00b      	b.n	800a088 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	4413      	add	r3, r2
 800a086:	3304      	adds	r3, #4
 800a088:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2202      	movs	r2, #2
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fc0d 	bl	800a8b6 <USBD_CtlSendData>
              break;
 800a09c:	e06a      	b.n	800a174 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a09e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	da11      	bge.n	800a0ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	f003 020f 	and.w	r2, r3, #15
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	440b      	add	r3, r1
 800a0b8:	3318      	adds	r3, #24
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d117      	bne.n	800a0f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fb8d 	bl	800a7e2 <USBD_CtlError>
                  break;
 800a0c8:	e054      	b.n	800a174 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	f003 020f 	and.w	r2, r3, #15
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d104      	bne.n	800a0f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fb7a 	bl	800a7e2 <USBD_CtlError>
                  break;
 800a0ee:	e041      	b.n	800a174 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	da0b      	bge.n	800a110 <USBD_StdEPReq+0x240>
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	3310      	adds	r3, #16
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	3304      	adds	r3, #4
 800a10e:	e00b      	b.n	800a128 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	4413      	add	r3, r2
 800a126:	3304      	adds	r3, #4
 800a128:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <USBD_StdEPReq+0x266>
 800a130:	7bbb      	ldrb	r3, [r7, #14]
 800a132:	2b80      	cmp	r3, #128	; 0x80
 800a134:	d103      	bne.n	800a13e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	e00e      	b.n	800a15c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 ff56 	bl	800aff4 <USBD_LL_IsStallEP>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d003      	beq.n	800a156 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2201      	movs	r2, #1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e002      	b.n	800a15c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2202      	movs	r2, #2
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fba7 	bl	800a8b6 <USBD_CtlSendData>
              break;
 800a168:	e004      	b.n	800a174 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fb38 	bl	800a7e2 <USBD_CtlError>
              break;
 800a172:	bf00      	nop
          }
          break;
 800a174:	e004      	b.n	800a180 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fb32 	bl	800a7e2 <USBD_CtlError>
          break;
 800a17e:	bf00      	nop
      }
      break;
 800a180:	e004      	b.n	800a18c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fb2c 	bl	800a7e2 <USBD_CtlError>
      break;
 800a18a:	bf00      	nop
  }

  return ret;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	885b      	ldrh	r3, [r3, #2]
 800a1b2:	0a1b      	lsrs	r3, r3, #8
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	2b06      	cmp	r3, #6
 800a1ba:	f200 813b 	bhi.w	800a434 <USBD_GetDescriptor+0x29c>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <USBD_GetDescriptor+0x2c>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1e1 	.word	0x0800a1e1
 800a1c8:	0800a1f9 	.word	0x0800a1f9
 800a1cc:	0800a239 	.word	0x0800a239
 800a1d0:	0800a435 	.word	0x0800a435
 800a1d4:	0800a435 	.word	0x0800a435
 800a1d8:	0800a3d5 	.word	0x0800a3d5
 800a1dc:	0800a401 	.word	0x0800a401
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	7c12      	ldrb	r2, [r2, #16]
 800a1ec:	f107 0108 	add.w	r1, r7, #8
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	60f8      	str	r0, [r7, #12]
      break;
 800a1f6:	e125      	b.n	800a444 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	7c1b      	ldrb	r3, [r3, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10d      	bne.n	800a21c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a208:	f107 0208 	add.w	r2, r7, #8
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
 800a210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3301      	adds	r3, #1
 800a216:	2202      	movs	r2, #2
 800a218:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a21a:	e113      	b.n	800a444 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	f107 0208 	add.w	r2, r7, #8
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
 800a22c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3301      	adds	r3, #1
 800a232:	2202      	movs	r2, #2
 800a234:	701a      	strb	r2, [r3, #0]
      break;
 800a236:	e105      	b.n	800a444 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	885b      	ldrh	r3, [r3, #2]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b05      	cmp	r3, #5
 800a240:	f200 80ac 	bhi.w	800a39c <USBD_GetDescriptor+0x204>
 800a244:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <USBD_GetDescriptor+0xb4>)
 800a246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24a:	bf00      	nop
 800a24c:	0800a265 	.word	0x0800a265
 800a250:	0800a299 	.word	0x0800a299
 800a254:	0800a2cd 	.word	0x0800a2cd
 800a258:	0800a301 	.word	0x0800a301
 800a25c:	0800a335 	.word	0x0800a335
 800a260:	0800a369 	.word	0x0800a369
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	7c12      	ldrb	r2, [r2, #16]
 800a27c:	f107 0108 	add.w	r1, r7, #8
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a286:	e0a4      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 faa9 	bl	800a7e2 <USBD_CtlError>
            err++;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	3301      	adds	r3, #1
 800a294:	72fb      	strb	r3, [r7, #11]
          break;
 800a296:	e09c      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	7c12      	ldrb	r2, [r2, #16]
 800a2b0:	f107 0108 	add.w	r1, r7, #8
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ba:	e08a      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa8f 	bl	800a7e2 <USBD_CtlError>
            err++;
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ca:	e082      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7c12      	ldrb	r2, [r2, #16]
 800a2e4:	f107 0108 	add.w	r1, r7, #8
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ee:	e070      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa75 	bl	800a7e2 <USBD_CtlError>
            err++;
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2fe:	e068      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00b      	beq.n	800a324 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	7c12      	ldrb	r2, [r2, #16]
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a322:	e056      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa5b 	bl	800a7e2 <USBD_CtlError>
            err++;
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	3301      	adds	r3, #1
 800a330:	72fb      	strb	r3, [r7, #11]
          break;
 800a332:	e04e      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	7c12      	ldrb	r2, [r2, #16]
 800a34c:	f107 0108 	add.w	r1, r7, #8
 800a350:	4610      	mov	r0, r2
 800a352:	4798      	blx	r3
 800a354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a356:	e03c      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a358:	6839      	ldr	r1, [r7, #0]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fa41 	bl	800a7e2 <USBD_CtlError>
            err++;
 800a360:	7afb      	ldrb	r3, [r7, #11]
 800a362:	3301      	adds	r3, #1
 800a364:	72fb      	strb	r3, [r7, #11]
          break;
 800a366:	e034      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	7c12      	ldrb	r2, [r2, #16]
 800a380:	f107 0108 	add.w	r1, r7, #8
 800a384:	4610      	mov	r0, r2
 800a386:	4798      	blx	r3
 800a388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a38a:	e022      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa27 	bl	800a7e2 <USBD_CtlError>
            err++;
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	3301      	adds	r3, #1
 800a398:	72fb      	strb	r3, [r7, #11]
          break;
 800a39a:	e01a      	b.n	800a3d2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00c      	beq.n	800a3c2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	8852      	ldrh	r2, [r2, #2]
 800a3b4:	b2d1      	uxtb	r1, r2
 800a3b6:	f107 0208 	add.w	r2, r7, #8
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	4798      	blx	r3
 800a3be:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3c0:	e006      	b.n	800a3d0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fa0c 	bl	800a7e2 <USBD_CtlError>
            err++;
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	72fb      	strb	r3, [r7, #11]
          break;
 800a3d0:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 800a3d2:	e037      	b.n	800a444 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	7c1b      	ldrb	r3, [r3, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d109      	bne.n	800a3f0 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e4:	f107 0208 	add.w	r2, r7, #8
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4798      	blx	r3
 800a3ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3ee:	e029      	b.n	800a444 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f9f5 	bl	800a7e2 <USBD_CtlError>
        err++;
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	72fb      	strb	r3, [r7, #11]
      break;
 800a3fe:	e021      	b.n	800a444 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	7c1b      	ldrb	r3, [r3, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10d      	bne.n	800a424 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a410:	f107 0208 	add.w	r2, r7, #8
 800a414:	4610      	mov	r0, r2
 800a416:	4798      	blx	r3
 800a418:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	3301      	adds	r3, #1
 800a41e:	2207      	movs	r2, #7
 800a420:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a422:	e00f      	b.n	800a444 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f9db 	bl	800a7e2 <USBD_CtlError>
        err++;
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	3301      	adds	r3, #1
 800a430:	72fb      	strb	r3, [r7, #11]
      break;
 800a432:	e007      	b.n	800a444 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f9d3 	bl	800a7e2 <USBD_CtlError>
      err++;
 800a43c:	7afb      	ldrb	r3, [r7, #11]
 800a43e:	3301      	adds	r3, #1
 800a440:	72fb      	strb	r3, [r7, #11]
      break;
 800a442:	bf00      	nop
  }

  if (err != 0U)
 800a444:	7afb      	ldrb	r3, [r7, #11]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d11c      	bne.n	800a484 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a44a:	893b      	ldrh	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d011      	beq.n	800a474 <USBD_GetDescriptor+0x2dc>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	88db      	ldrh	r3, [r3, #6]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00d      	beq.n	800a474 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	88da      	ldrh	r2, [r3, #6]
 800a45c:	893b      	ldrh	r3, [r7, #8]
 800a45e:	4293      	cmp	r3, r2
 800a460:	bf28      	it	cs
 800a462:	4613      	movcs	r3, r2
 800a464:	b29b      	uxth	r3, r3
 800a466:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a468:	893b      	ldrh	r3, [r7, #8]
 800a46a:	461a      	mov	r2, r3
 800a46c:	68f9      	ldr	r1, [r7, #12]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fa21 	bl	800a8b6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	88db      	ldrh	r3, [r3, #6]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d104      	bne.n	800a486 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fa78 	bl	800a972 <USBD_CtlSendStatus>
 800a482:	e000      	b.n	800a486 <USBD_GetDescriptor+0x2ee>
    return;
 800a484:	bf00      	nop
    }
  }
}
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	889b      	ldrh	r3, [r3, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d130      	bne.n	800a500 <USBD_SetAddress+0x74>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	88db      	ldrh	r3, [r3, #6]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d12c      	bne.n	800a500 <USBD_SetAddress+0x74>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	885b      	ldrh	r3, [r3, #2]
 800a4aa:	2b7f      	cmp	r3, #127	; 0x7f
 800a4ac:	d828      	bhi.n	800a500 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	885b      	ldrh	r3, [r3, #2]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d104      	bne.n	800a4ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f98b 	bl	800a7e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4cc:	e01d      	b.n	800a50a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7bfa      	ldrb	r2, [r7, #15]
 800a4d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fdb6 	bl	800b04c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fa46 	bl	800a972 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f4:	e009      	b.n	800a50a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4fe:	e004      	b.n	800a50a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f96d 	bl	800a7e2 <USBD_CtlError>
  }
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
	...

0800a514 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	b2da      	uxtb	r2, r3
 800a524:	4b41      	ldr	r3, [pc, #260]	; (800a62c <USBD_SetConfig+0x118>)
 800a526:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a528:	4b40      	ldr	r3, [pc, #256]	; (800a62c <USBD_SetConfig+0x118>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d904      	bls.n	800a53a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f955 	bl	800a7e2 <USBD_CtlError>
 800a538:	e075      	b.n	800a626 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a540:	2b02      	cmp	r3, #2
 800a542:	d002      	beq.n	800a54a <USBD_SetConfig+0x36>
 800a544:	2b03      	cmp	r3, #3
 800a546:	d023      	beq.n	800a590 <USBD_SetConfig+0x7c>
 800a548:	e062      	b.n	800a610 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a54a:	4b38      	ldr	r3, [pc, #224]	; (800a62c <USBD_SetConfig+0x118>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01a      	beq.n	800a588 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a552:	4b36      	ldr	r3, [pc, #216]	; (800a62c <USBD_SetConfig+0x118>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2203      	movs	r2, #3
 800a560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a564:	4b31      	ldr	r3, [pc, #196]	; (800a62c <USBD_SetConfig+0x118>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff f9d6 	bl	800991c <USBD_SetClassConfig>
 800a570:	4603      	mov	r3, r0
 800a572:	2b02      	cmp	r3, #2
 800a574:	d104      	bne.n	800a580 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f932 	bl	800a7e2 <USBD_CtlError>
            return;
 800a57e:	e052      	b.n	800a626 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f9f6 	bl	800a972 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a586:	e04e      	b.n	800a626 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f9f2 	bl	800a972 <USBD_CtlSendStatus>
        break;
 800a58e:	e04a      	b.n	800a626 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a590:	4b26      	ldr	r3, [pc, #152]	; (800a62c <USBD_SetConfig+0x118>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d112      	bne.n	800a5be <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2202      	movs	r2, #2
 800a59c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a5a0:	4b22      	ldr	r3, [pc, #136]	; (800a62c <USBD_SetConfig+0x118>)
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a5aa:	4b20      	ldr	r3, [pc, #128]	; (800a62c <USBD_SetConfig+0x118>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7ff f9d2 	bl	800995a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f9db 	bl	800a972 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5bc:	e033      	b.n	800a626 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a5be:	4b1b      	ldr	r3, [pc, #108]	; (800a62c <USBD_SetConfig+0x118>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d01d      	beq.n	800a608 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff f9c0 	bl	800995a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a5da:	4b14      	ldr	r3, [pc, #80]	; (800a62c <USBD_SetConfig+0x118>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5e4:	4b11      	ldr	r3, [pc, #68]	; (800a62c <USBD_SetConfig+0x118>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff f996 	bl	800991c <USBD_SetClassConfig>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d104      	bne.n	800a600 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f8f2 	bl	800a7e2 <USBD_CtlError>
            return;
 800a5fe:	e012      	b.n	800a626 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f9b6 	bl	800a972 <USBD_CtlSendStatus>
        break;
 800a606:	e00e      	b.n	800a626 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f9b2 	bl	800a972 <USBD_CtlSendStatus>
        break;
 800a60e:	e00a      	b.n	800a626 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f8e5 	bl	800a7e2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a618:	4b04      	ldr	r3, [pc, #16]	; (800a62c <USBD_SetConfig+0x118>)
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	4619      	mov	r1, r3
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff f99b 	bl	800995a <USBD_ClrClassConfig>
        break;
 800a624:	bf00      	nop
    }
  }
}
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20000613 	.word	0x20000613

0800a630 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	88db      	ldrh	r3, [r3, #6]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d004      	beq.n	800a64c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f8cc 	bl	800a7e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a64a:	e022      	b.n	800a692 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a652:	2b02      	cmp	r3, #2
 800a654:	dc02      	bgt.n	800a65c <USBD_GetConfig+0x2c>
 800a656:	2b00      	cmp	r3, #0
 800a658:	dc03      	bgt.n	800a662 <USBD_GetConfig+0x32>
 800a65a:	e015      	b.n	800a688 <USBD_GetConfig+0x58>
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d00b      	beq.n	800a678 <USBD_GetConfig+0x48>
 800a660:	e012      	b.n	800a688 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3308      	adds	r3, #8
 800a66c:	2201      	movs	r2, #1
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f920 	bl	800a8b6 <USBD_CtlSendData>
        break;
 800a676:	e00c      	b.n	800a692 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	3304      	adds	r3, #4
 800a67c:	2201      	movs	r2, #1
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f918 	bl	800a8b6 <USBD_CtlSendData>
        break;
 800a686:	e004      	b.n	800a692 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f8a9 	bl	800a7e2 <USBD_CtlError>
        break;
 800a690:	bf00      	nop
}
 800a692:	bf00      	nop
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b082      	sub	sp, #8
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d81e      	bhi.n	800a6ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	88db      	ldrh	r3, [r3, #6]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d004      	beq.n	800a6c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f891 	bl	800a7e2 <USBD_CtlError>
        break;
 800a6c0:	e01a      	b.n	800a6f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d005      	beq.n	800a6de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f043 0202 	orr.w	r2, r3, #2
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f8e5 	bl	800a8b6 <USBD_CtlSendData>
      break;
 800a6ec:	e004      	b.n	800a6f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f876 	bl	800a7e2 <USBD_CtlError>
      break;
 800a6f6:	bf00      	nop
  }
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	885b      	ldrh	r3, [r3, #2]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d106      	bne.n	800a720 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f929 	bl	800a972 <USBD_CtlSendStatus>
  }
}
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a738:	3b01      	subs	r3, #1
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d80b      	bhi.n	800a756 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d10c      	bne.n	800a760 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f90f 	bl	800a972 <USBD_CtlSendStatus>
      }
      break;
 800a754:	e004      	b.n	800a760 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f842 	bl	800a7e2 <USBD_CtlError>
      break;
 800a75e:	e000      	b.n	800a762 <USBD_ClrFeature+0x3a>
      break;
 800a760:	bf00      	nop
  }
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	781a      	ldrb	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	785a      	ldrb	r2, [r3, #1]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	3302      	adds	r3, #2
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	3303      	adds	r3, #3
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	b29b      	uxth	r3, r3
 800a798:	4413      	add	r3, r2
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	3305      	adds	r3, #5
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	021b      	lsls	r3, r3, #8
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	4413      	add	r3, r2
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	3306      	adds	r3, #6
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	3307      	adds	r3, #7
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	021b      	lsls	r3, r3, #8
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	80da      	strh	r2, [r3, #6]

}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bc80      	pop	{r7}
 800a7e0:	4770      	bx	lr

0800a7e2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a7ec:	2180      	movs	r1, #128	; 0x80
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fbc2 	bl	800af78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fbbe 	bl	800af78 <USBD_LL_StallEP>
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a810:	2300      	movs	r3, #0
 800a812:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d032      	beq.n	800a880 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 f834 	bl	800a888 <USBD_GetLen>
 800a820:	4603      	mov	r3, r0
 800a822:	3301      	adds	r3, #1
 800a824:	b29b      	uxth	r3, r3
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	b29a      	uxth	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	75fa      	strb	r2, [r7, #23]
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	4413      	add	r3, r2
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	7812      	ldrb	r2, [r2, #0]
 800a83e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	75fa      	strb	r2, [r7, #23]
 800a846:	461a      	mov	r2, r3
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	4413      	add	r3, r2
 800a84c:	2203      	movs	r2, #3
 800a84e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a850:	e012      	b.n	800a878 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	60fa      	str	r2, [r7, #12]
 800a858:	7dfa      	ldrb	r2, [r7, #23]
 800a85a:	1c51      	adds	r1, r2, #1
 800a85c:	75f9      	strb	r1, [r7, #23]
 800a85e:	4611      	mov	r1, r2
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	440a      	add	r2, r1
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a868:	7dfb      	ldrb	r3, [r7, #23]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	75fa      	strb	r2, [r7, #23]
 800a86e:	461a      	mov	r2, r3
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4413      	add	r3, r2
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e8      	bne.n	800a852 <USBD_GetString+0x4e>
    }
  }
}
 800a880:	bf00      	nop
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a894:	e005      	b.n	800a8a2 <USBD_GetLen+0x1a>
  {
    len++;
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	3301      	adds	r3, #1
 800a89a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1f5      	bne.n	800a896 <USBD_GetLen+0xe>
  }

  return len;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr

0800a8b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8cc:	88fa      	ldrh	r2, [r7, #6]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a8d2:	88fa      	ldrh	r2, [r7, #6]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8d8:	88fb      	ldrh	r3, [r7, #6]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	2100      	movs	r1, #0
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fbd3 	bl	800b08a <USBD_LL_Transmit>

  return USBD_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8fc:	88fb      	ldrh	r3, [r7, #6]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	2100      	movs	r1, #0
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fbc1 	bl	800b08a <USBD_LL_Transmit>

  return USBD_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	4613      	mov	r3, r2
 800a91e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2203      	movs	r2, #3
 800a924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a928:	88fa      	ldrh	r2, [r7, #6]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a930:	88fa      	ldrh	r2, [r7, #6]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a938:	88fb      	ldrh	r3, [r7, #6]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	2100      	movs	r1, #0
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f000 fbc6 	bl	800b0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	4613      	mov	r3, r2
 800a95a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a95c:	88fb      	ldrh	r3, [r7, #6]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	2100      	movs	r1, #0
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f000 fbb4 	bl	800b0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2204      	movs	r2, #4
 800a97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a982:	2300      	movs	r3, #0
 800a984:	2200      	movs	r2, #0
 800a986:	2100      	movs	r1, #0
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fb7e 	bl	800b08a <USBD_LL_Transmit>

  return USBD_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2205      	movs	r2, #5
 800a9a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fb8e 	bl	800b0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4912      	ldr	r1, [pc, #72]	; (800aa10 <MX_USB_DEVICE_Init+0x50>)
 800a9c8:	4812      	ldr	r0, [pc, #72]	; (800aa14 <MX_USB_DEVICE_Init+0x54>)
 800a9ca:	f7fe ff37 	bl	800983c <USBD_Init>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9d4:	f7f6 fdaa 	bl	800152c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800a9d8:	490f      	ldr	r1, [pc, #60]	; (800aa18 <MX_USB_DEVICE_Init+0x58>)
 800a9da:	480e      	ldr	r0, [pc, #56]	; (800aa14 <MX_USB_DEVICE_Init+0x54>)
 800a9dc:	f7fe ff59 	bl	8009892 <USBD_RegisterClass>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9e6:	f7f6 fda1 	bl	800152c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800a9ea:	490c      	ldr	r1, [pc, #48]	; (800aa1c <MX_USB_DEVICE_Init+0x5c>)
 800a9ec:	4809      	ldr	r0, [pc, #36]	; (800aa14 <MX_USB_DEVICE_Init+0x54>)
 800a9ee:	f7fe fbc1 	bl	8009174 <USBD_DFU_RegisterMedia>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9f8:	f7f6 fd98 	bl	800152c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9fc:	4805      	ldr	r0, [pc, #20]	; (800aa14 <MX_USB_DEVICE_Init+0x54>)
 800a9fe:	f7fe ff61 	bl	80098c4 <USBD_Start>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa08:	f7f6 fd90 	bl	800152c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa0c:	bf00      	nop
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20000070 	.word	0x20000070
 800aa14:	20000614 	.word	0x20000614
 800aa18:	2000000c 	.word	0x2000000c
 800aa1c:	200000c0 	.word	0x200000c0

0800aa20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	6039      	str	r1, [r7, #0]
 800aa2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2212      	movs	r2, #18
 800aa30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa32:	4b03      	ldr	r3, [pc, #12]	; (800aa40 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bc80      	pop	{r7}
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	2000008c 	.word	0x2000008c

0800aa44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2204      	movs	r2, #4
 800aa54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa56:	4b03      	ldr	r3, [pc, #12]	; (800aa64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	200000a0 	.word	0x200000a0

0800aa68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	6039      	str	r1, [r7, #0]
 800aa72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa74:	79fb      	ldrb	r3, [r7, #7]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d105      	bne.n	800aa86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	4907      	ldr	r1, [pc, #28]	; (800aa9c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa7e:	4808      	ldr	r0, [pc, #32]	; (800aaa0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa80:	f7ff fec0 	bl	800a804 <USBD_GetString>
 800aa84:	e004      	b.n	800aa90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	4904      	ldr	r1, [pc, #16]	; (800aa9c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa8a:	4805      	ldr	r0, [pc, #20]	; (800aaa0 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa8c:	f7ff feba 	bl	800a804 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa90:	4b02      	ldr	r3, [pc, #8]	; (800aa9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200008d8 	.word	0x200008d8
 800aaa0:	0800c1e0 	.word	0x0800c1e0

0800aaa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	4904      	ldr	r1, [pc, #16]	; (800aac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aab4:	4804      	ldr	r0, [pc, #16]	; (800aac8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aab6:	f7ff fea5 	bl	800a804 <USBD_GetString>
  return USBD_StrDesc;
 800aaba:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	200008d8 	.word	0x200008d8
 800aac8:	0800c200 	.word	0x0800c200

0800aacc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	4603      	mov	r3, r0
 800aad4:	6039      	str	r1, [r7, #0]
 800aad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	221a      	movs	r2, #26
 800aadc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aade:	f000 f843 	bl	800ab68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aae2:	4b02      	ldr	r3, [pc, #8]	; (800aaec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	200000a4 	.word	0x200000a4

0800aaf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	6039      	str	r1, [r7, #0]
 800aafa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d105      	bne.n	800ab0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	4907      	ldr	r1, [pc, #28]	; (800ab24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab06:	4808      	ldr	r0, [pc, #32]	; (800ab28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab08:	f7ff fe7c 	bl	800a804 <USBD_GetString>
 800ab0c:	e004      	b.n	800ab18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	4904      	ldr	r1, [pc, #16]	; (800ab24 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab12:	4805      	ldr	r0, [pc, #20]	; (800ab28 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab14:	f7ff fe76 	bl	800a804 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab18:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	200008d8 	.word	0x200008d8
 800ab28:	0800c214 	.word	0x0800c214

0800ab2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab38:	79fb      	ldrb	r3, [r7, #7]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d105      	bne.n	800ab4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	4907      	ldr	r1, [pc, #28]	; (800ab60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab42:	4808      	ldr	r0, [pc, #32]	; (800ab64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab44:	f7ff fe5e 	bl	800a804 <USBD_GetString>
 800ab48:	e004      	b.n	800ab54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	4904      	ldr	r1, [pc, #16]	; (800ab60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab4e:	4805      	ldr	r0, [pc, #20]	; (800ab64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab50:	f7ff fe58 	bl	800a804 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	200008d8 	.word	0x200008d8
 800ab64:	0800c220 	.word	0x0800c220

0800ab68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab6e:	4b0f      	ldr	r3, [pc, #60]	; (800abac <Get_SerialNum+0x44>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab74:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <Get_SerialNum+0x48>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab7a:	4b0e      	ldr	r3, [pc, #56]	; (800abb4 <Get_SerialNum+0x4c>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4413      	add	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d009      	beq.n	800aba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab8e:	2208      	movs	r2, #8
 800ab90:	4909      	ldr	r1, [pc, #36]	; (800abb8 <Get_SerialNum+0x50>)
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f000 f814 	bl	800abc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab98:	2204      	movs	r2, #4
 800ab9a:	4908      	ldr	r1, [pc, #32]	; (800abbc <Get_SerialNum+0x54>)
 800ab9c:	68b8      	ldr	r0, [r7, #8]
 800ab9e:	f000 f80f 	bl	800abc0 <IntToUnicode>
  }
}
 800aba2:	bf00      	nop
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	1ffff7e8 	.word	0x1ffff7e8
 800abb0:	1ffff7ec 	.word	0x1ffff7ec
 800abb4:	1ffff7f0 	.word	0x1ffff7f0
 800abb8:	200000a6 	.word	0x200000a6
 800abbc:	200000b6 	.word	0x200000b6

0800abc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b087      	sub	sp, #28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	4613      	mov	r3, r2
 800abcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abd2:	2300      	movs	r3, #0
 800abd4:	75fb      	strb	r3, [r7, #23]
 800abd6:	e027      	b.n	800ac28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	0f1b      	lsrs	r3, r3, #28
 800abdc:	2b09      	cmp	r3, #9
 800abde:	d80b      	bhi.n	800abf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	0f1b      	lsrs	r3, r3, #28
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	4619      	mov	r1, r3
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	440b      	add	r3, r1
 800abf0:	3230      	adds	r2, #48	; 0x30
 800abf2:	b2d2      	uxtb	r2, r2
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	e00a      	b.n	800ac0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	0f1b      	lsrs	r3, r3, #28
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	4619      	mov	r1, r3
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	440b      	add	r3, r1
 800ac08:	3237      	adds	r2, #55	; 0x37
 800ac0a:	b2d2      	uxtb	r2, r2
 800ac0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	011b      	lsls	r3, r3, #4
 800ac12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	3301      	adds	r3, #1
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
 800ac24:	3301      	adds	r3, #1
 800ac26:	75fb      	strb	r3, [r7, #23]
 800ac28:	7dfa      	ldrb	r2, [r7, #23]
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3d3      	bcc.n	800abd8 <IntToUnicode+0x18>
  }
}
 800ac30:	bf00      	nop
 800ac32:	bf00      	nop
 800ac34:	371c      	adds	r7, #28
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bc80      	pop	{r7}
 800ac3a:	4770      	bx	lr

0800ac3c <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800ac40:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr

0800ac4a <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800ac4e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bc80      	pop	{r7}
 800ac56:	4770      	bx	lr

0800ac58 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800ac60:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bc80      	pop	{r7}
 800ac6a:	4770      	bx	lr

0800ac6c <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800ac78:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bc80      	pop	{r7}
 800ac82:	4770      	bx	lr

0800ac84 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800ac90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bc80      	pop	{r7}
 800ac9a:	4770      	bx	lr

0800ac9c <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	460b      	mov	r3, r1
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800acaa:	7afb      	ldrb	r3, [r7, #11]
 800acac:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800acae:	bf00      	nop
  }
  return (USBD_OK);
 800acb0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bc80      	pop	{r7}
 800acba:	4770      	bx	lr

0800acbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a0d      	ldr	r2, [pc, #52]	; (800ad00 <HAL_PCD_MspInit+0x44>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d113      	bne.n	800acf6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800acce:	4b0d      	ldr	r3, [pc, #52]	; (800ad04 <HAL_PCD_MspInit+0x48>)
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	4a0c      	ldr	r2, [pc, #48]	; (800ad04 <HAL_PCD_MspInit+0x48>)
 800acd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800acd8:	61d3      	str	r3, [r2, #28]
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <HAL_PCD_MspInit+0x48>)
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ace6:	2200      	movs	r2, #0
 800ace8:	2100      	movs	r1, #0
 800acea:	2014      	movs	r0, #20
 800acec:	f7f7 f95d 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800acf0:	2014      	movs	r0, #20
 800acf2:	f7f7 f976 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800acf6:	bf00      	nop
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	40005c00 	.word	0x40005c00
 800ad04:	40021000 	.word	0x40021000

0800ad08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4610      	mov	r0, r2
 800ad20:	f7fe fe2e 	bl	8009980 <USBD_LL_SetupStage>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ad3e:	78fa      	ldrb	r2, [r7, #3]
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	440b      	add	r3, r1
 800ad4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	78fb      	ldrb	r3, [r7, #3]
 800ad54:	4619      	mov	r1, r3
 800ad56:	f7fe fe60 	bl	8009a1a <USBD_LL_DataOutStage>
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ad74:	78fa      	ldrb	r2, [r7, #3]
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	440b      	add	r3, r1
 800ad82:	333c      	adds	r3, #60	; 0x3c
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	78fb      	ldrb	r3, [r7, #3]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	f7fe feb7 	bl	8009afc <USBD_LL_DataInStage>
}
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe ffc7 	bl	8009d38 <USBD_LL_SOF>
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adba:	2301      	movs	r3, #1
 800adbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d001      	beq.n	800adca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800adc6:	f7f6 fbb1 	bl	800152c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800add0:	7bfa      	ldrb	r2, [r7, #15]
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe ff77 	bl	8009cc8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe ff30 	bl	8009c46 <USBD_LL_Reset>
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
	...

0800adf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe ff71 	bl	8009ce6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae0c:	4b04      	ldr	r3, [pc, #16]	; (800ae20 <HAL_PCD_SuspendCallback+0x30>)
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	4a03      	ldr	r2, [pc, #12]	; (800ae20 <HAL_PCD_SuspendCallback+0x30>)
 800ae12:	f043 0306 	orr.w	r3, r3, #6
 800ae16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	e000ed00 	.word	0xe000ed00

0800ae24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe ff6b 	bl	8009d0e <USBD_LL_Resume>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ae48:	4a1b      	ldr	r2, [pc, #108]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a19      	ldr	r2, [pc, #100]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ae58:	4b17      	ldr	r3, [pc, #92]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae5a:	4a18      	ldr	r2, [pc, #96]	; (800aebc <USBD_LL_Init+0x7c>)
 800ae5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ae5e:	4b16      	ldr	r3, [pc, #88]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae60:	2208      	movs	r2, #8
 800ae62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ae64:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae66:	2202      	movs	r2, #2
 800ae68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ae6a:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ae70:	4b11      	ldr	r3, [pc, #68]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ae76:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ae7c:	480e      	ldr	r0, [pc, #56]	; (800aeb8 <USBD_LL_Init+0x78>)
 800ae7e:	f7f8 f825 	bl	8002ecc <HAL_PCD_Init>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ae88:	f7f6 fb50 	bl	800152c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae92:	2318      	movs	r3, #24
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	f7f9 fc60 	bl	800475c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aea2:	2358      	movs	r3, #88	; 0x58
 800aea4:	2200      	movs	r2, #0
 800aea6:	2180      	movs	r1, #128	; 0x80
 800aea8:	f7f9 fc58 	bl	800475c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000ad8 	.word	0x20000ad8
 800aebc:	40005c00 	.word	0x40005c00

0800aec0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f8 f903 	bl	80030e2 <HAL_PCD_Start>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 f938 	bl	800b158 <USBD_Get_USB_Status>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7f8 f90e 	bl	800312e <HAL_PCD_Stop>
 800af12:	4603      	mov	r3, r0
 800af14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f91d 	bl	800b158 <USBD_Get_USB_Status>
 800af1e:	4603      	mov	r3, r0
 800af20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af22:	7bbb      	ldrb	r3, [r7, #14]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	461a      	mov	r2, r3
 800af3a:	4603      	mov	r3, r0
 800af3c:	70fb      	strb	r3, [r7, #3]
 800af3e:	460b      	mov	r3, r1
 800af40:	70bb      	strb	r3, [r7, #2]
 800af42:	4613      	mov	r3, r2
 800af44:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af54:	78bb      	ldrb	r3, [r7, #2]
 800af56:	883a      	ldrh	r2, [r7, #0]
 800af58:	78f9      	ldrb	r1, [r7, #3]
 800af5a:	f7f8 fa86 	bl	800346a <HAL_PCD_EP_Open>
 800af5e:	4603      	mov	r3, r0
 800af60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af62:	7bfb      	ldrb	r3, [r7, #15]
 800af64:	4618      	mov	r0, r3
 800af66:	f000 f8f7 	bl	800b158 <USBD_Get_USB_Status>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	460b      	mov	r3, r1
 800af82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af88:	2300      	movs	r3, #0
 800af8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af92:	78fa      	ldrb	r2, [r7, #3]
 800af94:	4611      	mov	r1, r2
 800af96:	4618      	mov	r0, r3
 800af98:	f7f8 fb4d 	bl	8003636 <HAL_PCD_EP_SetStall>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 f8d8 	bl	800b158 <USBD_Get_USB_Status>
 800afa8:	4603      	mov	r3, r0
 800afaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afac:	7bbb      	ldrb	r3, [r7, #14]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	460b      	mov	r3, r1
 800afc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afd0:	78fa      	ldrb	r2, [r7, #3]
 800afd2:	4611      	mov	r1, r2
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7f8 fb8e 	bl	80036f6 <HAL_PCD_EP_ClrStall>
 800afda:	4603      	mov	r3, r0
 800afdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afde:	7bfb      	ldrb	r3, [r7, #15]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 f8b9 	bl	800b158 <USBD_Get_USB_Status>
 800afe6:	4603      	mov	r3, r0
 800afe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afea:	7bbb      	ldrb	r3, [r7, #14]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b006:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	da0c      	bge.n	800b02a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b016:	68f9      	ldr	r1, [r7, #12]
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	00db      	lsls	r3, r3, #3
 800b022:	440b      	add	r3, r1
 800b024:	3302      	adds	r3, #2
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	e00b      	b.n	800b042 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b030:	68f9      	ldr	r1, [r7, #12]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	440b      	add	r3, r1
 800b03c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b040:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	bc80      	pop	{r7}
 800b04a:	4770      	bx	lr

0800b04c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b066:	78fa      	ldrb	r2, [r7, #3]
 800b068:	4611      	mov	r1, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7f8 f9d8 	bl	8003420 <HAL_PCD_SetAddress>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	4618      	mov	r0, r3
 800b078:	f000 f86e 	bl	800b158 <USBD_Get_USB_Status>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b080:	7bbb      	ldrb	r3, [r7, #14]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b086      	sub	sp, #24
 800b08e:	af00      	add	r7, sp, #0
 800b090:	60f8      	str	r0, [r7, #12]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	461a      	mov	r2, r3
 800b096:	460b      	mov	r3, r1
 800b098:	72fb      	strb	r3, [r7, #11]
 800b09a:	4613      	mov	r3, r2
 800b09c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b0ac:	893b      	ldrh	r3, [r7, #8]
 800b0ae:	7af9      	ldrb	r1, [r7, #11]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	f7f8 fa7d 	bl	80035b0 <HAL_PCD_EP_Transmit>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f84b 	bl	800b158 <USBD_Get_USB_Status>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	607a      	str	r2, [r7, #4]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	460b      	mov	r3, r1
 800b0de:	72fb      	strb	r3, [r7, #11]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b0f2:	893b      	ldrh	r3, [r7, #8]
 800b0f4:	7af9      	ldrb	r1, [r7, #11]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	f7f8 fa1d 	bl	8003536 <HAL_PCD_EP_Receive>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	4618      	mov	r0, r3
 800b104:	f000 f828 	bl	800b158 <USBD_Get_USB_Status>
 800b108:	4603      	mov	r3, r0
 800b10a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b10c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b120:	4b02      	ldr	r3, [pc, #8]	; (800b12c <USBD_static_malloc+0x14>)
}
 800b122:	4618      	mov	r0, r3
 800b124:	370c      	adds	r7, #12
 800b126:	46bd      	mov	sp, r7
 800b128:	bc80      	pop	{r7}
 800b12a:	4770      	bx	lr
 800b12c:	20000dc4 	.word	0x20000dc4

0800b130 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bc80      	pop	{r7}
 800b140:	4770      	bx	lr

0800b142 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b142:	b480      	push	{r7}
 800b144:	b083      	sub	sp, #12
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	460b      	mov	r3, r1
 800b14c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	bc80      	pop	{r7}
 800b156:	4770      	bx	lr

0800b158 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	4603      	mov	r3, r0
 800b160:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d817      	bhi.n	800b19c <USBD_Get_USB_Status+0x44>
 800b16c:	a201      	add	r2, pc, #4	; (adr r2, 800b174 <USBD_Get_USB_Status+0x1c>)
 800b16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b172:	bf00      	nop
 800b174:	0800b185 	.word	0x0800b185
 800b178:	0800b18b 	.word	0x0800b18b
 800b17c:	0800b191 	.word	0x0800b191
 800b180:	0800b197 	.word	0x0800b197
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
    break;
 800b188:	e00b      	b.n	800b1a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b18a:	2302      	movs	r3, #2
 800b18c:	73fb      	strb	r3, [r7, #15]
    break;
 800b18e:	e008      	b.n	800b1a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b190:	2301      	movs	r3, #1
 800b192:	73fb      	strb	r3, [r7, #15]
    break;
 800b194:	e005      	b.n	800b1a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b196:	2302      	movs	r3, #2
 800b198:	73fb      	strb	r3, [r7, #15]
    break;
 800b19a:	e002      	b.n	800b1a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b19c:	2302      	movs	r3, #2
 800b19e:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a0:	bf00      	nop
  }
  return usb_status;
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bc80      	pop	{r7}
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop

0800b1b0 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800b1b8:	4a18      	ldr	r2, [pc, #96]	; (800b21c <si5351_Init+0x6c>)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800b1be:	21ff      	movs	r1, #255	; 0xff
 800b1c0:	2003      	movs	r0, #3
 800b1c2:	f000 f9ef 	bl	800b5a4 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800b1c6:	2180      	movs	r1, #128	; 0x80
 800b1c8:	2010      	movs	r0, #16
 800b1ca:	f000 f9eb 	bl	800b5a4 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800b1ce:	2180      	movs	r1, #128	; 0x80
 800b1d0:	2011      	movs	r0, #17
 800b1d2:	f000 f9e7 	bl	800b5a4 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800b1d6:	2180      	movs	r1, #128	; 0x80
 800b1d8:	2012      	movs	r0, #18
 800b1da:	f000 f9e3 	bl	800b5a4 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800b1de:	2180      	movs	r1, #128	; 0x80
 800b1e0:	2013      	movs	r0, #19
 800b1e2:	f000 f9df 	bl	800b5a4 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800b1e6:	2180      	movs	r1, #128	; 0x80
 800b1e8:	2014      	movs	r0, #20
 800b1ea:	f000 f9db 	bl	800b5a4 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800b1ee:	2180      	movs	r1, #128	; 0x80
 800b1f0:	2015      	movs	r0, #21
 800b1f2:	f000 f9d7 	bl	800b5a4 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800b1f6:	2180      	movs	r1, #128	; 0x80
 800b1f8:	2016      	movs	r0, #22
 800b1fa:	f000 f9d3 	bl	800b5a4 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800b1fe:	2180      	movs	r1, #128	; 0x80
 800b200:	2017      	movs	r0, #23
 800b202:	f000 f9cf 	bl	800b5a4 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800b206:	23c0      	movs	r3, #192	; 0xc0
 800b208:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	4619      	mov	r1, r3
 800b20e:	20b7      	movs	r0, #183	; 0xb7
 800b210:	f000 f9c8 	bl	800b5a4 <si5351_write>
}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	200011e4 	.word	0x200011e4

0800b220 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 800b220:	b580      	push	{r7, lr}
 800b222:	b08c      	sub	sp, #48	; 0x30
 800b224:	af02      	add	r7, sp, #8
 800b226:	4603      	mov	r3, r0
 800b228:	6039      	str	r1, [r7, #0]
 800b22a:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	01da      	lsls	r2, r3, #7
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	01d9      	lsls	r1, r3, #7
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	fb91 f3f3 	sdiv	r3, r1, r3
 800b24c:	4413      	add	r3, r2
 800b24e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800b252:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	01db      	lsls	r3, r3, #7
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	fb93 f2f2 	sdiv	r2, r3, r2
 800b25e:	69f9      	ldr	r1, [r7, #28]
 800b260:	fb01 f202 	mul.w	r2, r1, r2
 800b264:	1a9b      	subs	r3, r3, r2
 800b266:	617b      	str	r3, [r7, #20]
    P3 = denom;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <si5351_SetupPLL+0x56>
 800b272:	231a      	movs	r3, #26
 800b274:	e000      	b.n	800b278 <si5351_SetupPLL+0x58>
 800b276:	2322      	movs	r3, #34	; 0x22
 800b278:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800b27a:	7bf8      	ldrb	r0, [r7, #15]
 800b27c:	2300      	movs	r3, #0
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	2300      	movs	r3, #0
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	69b9      	ldr	r1, [r7, #24]
 800b28a:	f000 f9b3 	bl	800b5f4 <si5351_writeBulk>

    // Reset both PLLs
    //si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
}
 800b28e:	bf00      	nop
 800b290:	3728      	adds	r7, #40	; 0x28
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800b296:	b580      	push	{r7, lr}
 800b298:	b08c      	sub	sp, #48	; 0x30
 800b29a:	af02      	add	r7, sp, #8
 800b29c:	603b      	str	r3, [r7, #0]
 800b29e:	4603      	mov	r3, r0
 800b2a0:	71fb      	strb	r3, [r7, #7]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	71bb      	strb	r3, [r7, #6]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d901      	bls.n	800b2cc <si5351_SetupOutput+0x36>
        return 1;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e08d      	b.n	800b3e8 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10a      	bne.n	800b2ea <si5351_SetupOutput+0x54>
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	2b07      	cmp	r3, #7
 800b2d8:	dd05      	ble.n	800b2e6 <si5351_SetupOutput+0x50>
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2b08      	cmp	r3, #8
 800b2de:	d104      	bne.n	800b2ea <si5351_SetupOutput+0x54>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e07e      	b.n	800b3e8 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b04      	cmp	r3, #4
 800b2ee:	d109      	bne.n	800b304 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b302:	e016      	b.n	800b332 <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	01da      	lsls	r2, r3, #7
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	01d9      	lsls	r1, r3, #7
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	fb91 f3f3 	sdiv	r3, r1, r3
 800b312:	4413      	add	r3, r2
 800b314:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800b318:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	01db      	lsls	r3, r3, #7
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	fb93 f2f2 	sdiv	r2, r3, r2
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	fb01 f202 	mul.w	r2, r1, r2
 800b32a:	1a9b      	subs	r3, r3, r2
 800b32c:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d014      	beq.n	800b36e <si5351_SetupOutput+0xd8>
 800b344:	2b02      	cmp	r3, #2
 800b346:	dc19      	bgt.n	800b37c <si5351_SetupOutput+0xe6>
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <si5351_SetupOutput+0xbc>
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d007      	beq.n	800b360 <si5351_SetupOutput+0xca>
 800b350:	e014      	b.n	800b37c <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800b352:	232a      	movs	r3, #42	; 0x2a
 800b354:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800b356:	23a5      	movs	r3, #165	; 0xa5
 800b358:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800b35a:	2310      	movs	r3, #16
 800b35c:	757b      	strb	r3, [r7, #21]
        break;
 800b35e:	e00d      	b.n	800b37c <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800b360:	2332      	movs	r3, #50	; 0x32
 800b362:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800b364:	23a6      	movs	r3, #166	; 0xa6
 800b366:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800b368:	2311      	movs	r3, #17
 800b36a:	757b      	strb	r3, [r7, #21]
        break;
 800b36c:	e006      	b.n	800b37c <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800b36e:	233a      	movs	r3, #58	; 0x3a
 800b370:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800b372:	23a7      	movs	r3, #167	; 0xa7
 800b374:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800b376:	2312      	movs	r3, #18
 800b378:	757b      	strb	r3, [r7, #21]
        break;
 800b37a:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800b37c:	797b      	ldrb	r3, [r7, #5]
 800b37e:	f043 030c 	orr.w	r3, r3, #12
 800b382:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800b384:	79bb      	ldrb	r3, [r7, #6]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d103      	bne.n	800b392 <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800b38a:	7d3b      	ldrb	r3, [r7, #20]
 800b38c:	f043 0320 	orr.w	r3, r3, #32
 800b390:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <si5351_SetupOutput+0x118>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <si5351_SetupOutput+0x110>
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b04      	cmp	r3, #4
 800b3a4:	d103      	bne.n	800b3ae <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800b3a6:	7d3b      	ldrb	r3, [r7, #20]
 800b3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ac:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800b3ae:	7d3a      	ldrb	r2, [r7, #20]
 800b3b0:	7d7b      	ldrb	r3, [r7, #21]
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 f8f5 	bl	800b5a4 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	7c1b      	ldrb	r3, [r3, #16]
 800b3be:	7df8      	ldrb	r0, [r7, #23]
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	6a39      	ldr	r1, [r7, #32]
 800b3ce:	f000 f911 	bl	800b5f4 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800b3d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b3d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	7dbb      	ldrb	r3, [r7, #22]
 800b3de:	4611      	mov	r1, r2
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 f8df 	bl	800b5a4 <si5351_write>

    return 0;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3728      	adds	r7, #40	; 0x28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(uint64_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800b3f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3f4:	b098      	sub	sp, #96	; 0x60
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800b3fc:	60fa      	str	r2, [r7, #12]
 800b3fe:	60bb      	str	r3, [r7, #8]
    //if(Fclk < 8000) Fclk = 8000;
    //else if(Fclk > 160000000) Fclk = 160000000;

    out_conf->allowIntegerMode = 1;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2201      	movs	r2, #1
 800b404:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000000) {
 800b406:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b40a:	495b      	ldr	r1, [pc, #364]	; (800b578 <si5351_Calc+0x188>)
 800b40c:	428a      	cmp	r2, r1
 800b40e:	f173 0300 	sbcs.w	r3, r3, #0
 800b412:	d20f      	bcs.n	800b434 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800b414:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b418:	f04f 0200 	mov.w	r2, #0
 800b41c:	f04f 0300 	mov.w	r3, #0
 800b420:	018b      	lsls	r3, r1, #6
 800b422:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b426:	0182      	lsls	r2, r0, #6
 800b428:	e9c7 2304 	strd	r2, r3, [r7, #16]
        out_conf->rdiv = SI5351_R_DIV_64;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2206      	movs	r2, #6
 800b430:	741a      	strb	r2, [r3, #16]
 800b432:	e002      	b.n	800b43a <si5351_Calc+0x4a>
    } else
        out_conf->rdiv = SI5351_R_DIV_1;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2200      	movs	r2, #0
 800b438:	741a      	strb	r2, [r3, #16]

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk / 1000000) * si5351Correction)/100;
 800b43a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b43e:	4a4f      	ldr	r2, [pc, #316]	; (800b57c <si5351_Calc+0x18c>)
 800b440:	f04f 0300 	mov.w	r3, #0
 800b444:	f7f5 fc50 	bl	8000ce8 <__aeabi_uldivmod>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	494c      	ldr	r1, [pc, #304]	; (800b580 <si5351_Calc+0x190>)
 800b44e:	6809      	ldr	r1, [r1, #0]
 800b450:	17c8      	asrs	r0, r1, #31
 800b452:	4688      	mov	r8, r1
 800b454:	4681      	mov	r9, r0
 800b456:	fb08 f003 	mul.w	r0, r8, r3
 800b45a:	fb02 f109 	mul.w	r1, r2, r9
 800b45e:	4401      	add	r1, r0
 800b460:	fba2 4508 	umull	r4, r5, r2, r8
 800b464:	194b      	adds	r3, r1, r5
 800b466:	461d      	mov	r5, r3
 800b468:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b46c:	f04f 0300 	mov.w	r3, #0
 800b470:	4620      	mov	r0, r4
 800b472:	4629      	mov	r1, r5
 800b474:	f7f5 fc38 	bl	8000ce8 <__aeabi_uldivmod>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	4610      	mov	r0, r2
 800b47e:	4619      	mov	r1, r3
 800b480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b484:	1a14      	subs	r4, r2, r0
 800b486:	603c      	str	r4, [r7, #0]
 800b488:	eb63 0301 	sbc.w	r3, r3, r1
 800b48c:	607b      	str	r3, [r7, #4]
 800b48e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b492:	e9c7 3404 	strd	r3, r4, [r7, #16]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const uint64_t Fxtal = 25000000000;
 800b496:	a334      	add	r3, pc, #208	; (adr r3, 800b568 <si5351_Calc+0x178>)
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    uint64_t a, b, c, x, y, z, t;

    //if(Fclk < 81000000000) {
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800b4a0:	f04f 0224 	mov.w	r2, #36	; 0x24
 800b4a4:	f04f 0300 	mov.w	r3, #0
 800b4a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        b = 0;
 800b4ac:	f04f 0200 	mov.w	r2, #0
 800b4b0:	f04f 0300 	mov.w	r3, #0
 800b4b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        c = 1;
 800b4b8:	f04f 0201 	mov.w	r2, #1
 800b4bc:	f04f 0300 	mov.w	r3, #0
 800b4c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        int64_t Fpll = 900000000000;
 800b4c4:	a32a      	add	r3, pc, #168	; (adr r3, 800b570 <si5351_Calc+0x180>)
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        x = Fpll/Fclk;
 800b4ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b4d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b4d6:	f7f5 fc07 	bl	8000ce8 <__aeabi_uldivmod>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        t = (Fclk >> 20) + 1;
 800b4e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	f04f 0300 	mov.w	r3, #0
 800b4ee:	0d02      	lsrs	r2, r0, #20
 800b4f0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800b4f4:	0d0b      	lsrs	r3, r1, #20
 800b4f6:	f112 0a01 	adds.w	sl, r2, #1
 800b4fa:	f143 0b00 	adc.w	fp, r3, #0
 800b4fe:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
        y = (Fpll % Fclk) / t;
 800b502:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800b506:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b50a:	f7f5 fbed 	bl	8000ce8 <__aeabi_uldivmod>
 800b50e:	4610      	mov	r0, r2
 800b510:	4619      	mov	r1, r3
 800b512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b516:	f7f5 fbe7 	bl	8000ce8 <__aeabi_uldivmod>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        z = Fclk / t;
 800b522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b52a:	f7f5 fbdd 	bl	8000ce8 <__aeabi_uldivmod>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	e9c7 2306 	strd	r2, r3, [r7, #24]
    //}

    pll_conf->mult = a;
 800b536:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800b53c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800b542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800b548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800b54e:	6a3a      	ldr	r2, [r7, #32]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	60da      	str	r2, [r3, #12]
}
 800b55a:	bf00      	nop
 800b55c:	3760      	adds	r7, #96	; 0x60
 800b55e:	46bd      	mov	sp, r7
 800b560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b564:	f3af 8000 	nop.w
 800b568:	d21dba00 	.word	0xd21dba00
 800b56c:	00000005 	.word	0x00000005
 800b570:	8c2e2800 	.word	0x8c2e2800
 800b574:	000000d1 	.word	0x000000d1
 800b578:	3b9aca00 	.word	0x3b9aca00
 800b57c:	000f4240 	.word	0x000f4240
 800b580:	200011e4 	.word	0x200011e4

0800b584 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800b58e:	79fb      	ldrb	r3, [r7, #7]
 800b590:	43db      	mvns	r3, r3
 800b592:	b2db      	uxtb	r3, r3
 800b594:	4619      	mov	r1, r3
 800b596:	2003      	movs	r0, #3
 800b598:	f000 f804 	bl	800b5a4 <si5351_write>
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af04      	add	r7, sp, #16
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	460a      	mov	r2, r1
 800b5ae:	71fb      	strb	r3, [r7, #7]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800b5b4:	bf00      	nop
 800b5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ba:	2203      	movs	r2, #3
 800b5bc:	21c0      	movs	r1, #192	; 0xc0
 800b5be:	480c      	ldr	r0, [pc, #48]	; (800b5f0 <si5351_write+0x4c>)
 800b5c0:	f7f7 f93a 	bl	8002838 <HAL_I2C_IsDeviceReady>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1f5      	bne.n	800b5b6 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800b5ca:	79fb      	ldrb	r3, [r7, #7]
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d2:	9302      	str	r3, [sp, #8]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	1dbb      	adds	r3, r7, #6
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	21c0      	movs	r1, #192	; 0xc0
 800b5e0:	4803      	ldr	r0, [pc, #12]	; (800b5f0 <si5351_write+0x4c>)
 800b5e2:	f7f7 f82f 	bl	8002644 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800b5e6:	bf00      	nop
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	2000041c 	.word	0x2000041c

0800b5f4 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60b9      	str	r1, [r7, #8]
 800b5fc:	607a      	str	r2, [r7, #4]
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	121b      	asrs	r3, r3, #8
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
 800b60c:	4611      	mov	r1, r2
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff ffc8 	bl	800b5a4 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	3301      	adds	r3, #1
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	b2d2      	uxtb	r2, r2
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff ffbf 	bl	800b5a4 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	3302      	adds	r3, #2
 800b62a:	b2d8      	uxtb	r0, r3
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	141b      	asrs	r3, r3, #16
 800b630:	b25b      	sxtb	r3, r3
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	b25a      	sxtb	r2, r3
 800b638:	7e3b      	ldrb	r3, [r7, #24]
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	b25b      	sxtb	r3, r3
 800b63e:	f003 030c 	and.w	r3, r3, #12
 800b642:	b25b      	sxtb	r3, r3
 800b644:	4313      	orrs	r3, r2
 800b646:	b25a      	sxtb	r2, r3
 800b648:	7f3b      	ldrb	r3, [r7, #28]
 800b64a:	011b      	lsls	r3, r3, #4
 800b64c:	b25b      	sxtb	r3, r3
 800b64e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b652:	b25b      	sxtb	r3, r3
 800b654:	4313      	orrs	r3, r2
 800b656:	b25b      	sxtb	r3, r3
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	4619      	mov	r1, r3
 800b65c:	f7ff ffa2 	bl	800b5a4 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	3303      	adds	r3, #3
 800b664:	b2da      	uxtb	r2, r3
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	121b      	asrs	r3, r3, #8
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	4619      	mov	r1, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	f7ff ff98 	bl	800b5a4 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	3304      	adds	r3, #4
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	b2d2      	uxtb	r2, r2
 800b67e:	4611      	mov	r1, r2
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff ff8f 	bl	800b5a4 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	3305      	adds	r3, #5
 800b68a:	b2d8      	uxtb	r0, r3
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	131b      	asrs	r3, r3, #12
 800b690:	b25b      	sxtb	r3, r3
 800b692:	f023 030f 	bic.w	r3, r3, #15
 800b696:	b25a      	sxtb	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	141b      	asrs	r3, r3, #16
 800b69c:	b25b      	sxtb	r3, r3
 800b69e:	f003 030f 	and.w	r3, r3, #15
 800b6a2:	b25b      	sxtb	r3, r3
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	b25b      	sxtb	r3, r3
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	f7ff ff7a 	bl	800b5a4 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	3306      	adds	r3, #6
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	121b      	asrs	r3, r3, #8
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4610      	mov	r0, r2
 800b6c0:	f7ff ff70 	bl	800b5a4 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	3307      	adds	r3, #7
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff ff67 	bl	800b5a4 <si5351_write>
}
 800b6d6:	bf00      	nop
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <hexCharToInt>:
#include "main.h"
#include <string.h>
#include <stdlib.h>
#include <math.h>

int hexCharToInt(char a){
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	71fb      	strb	r3, [r7, #7]
    if ((a >= 48) && (a <= 57))
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	2b2f      	cmp	r3, #47	; 0x2f
 800b6ec:	d905      	bls.n	800b6fa <hexCharToInt+0x1c>
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	2b39      	cmp	r3, #57	; 0x39
 800b6f2:	d802      	bhi.n	800b6fa <hexCharToInt+0x1c>
        return (a - 48);
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	3b30      	subs	r3, #48	; 0x30
 800b6f8:	e009      	b.n	800b70e <hexCharToInt+0x30>
    else if ((a >= 65) && (a <= 70))
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	2b40      	cmp	r3, #64	; 0x40
 800b6fe:	d905      	bls.n	800b70c <hexCharToInt+0x2e>
 800b700:	79fb      	ldrb	r3, [r7, #7]
 800b702:	2b46      	cmp	r3, #70	; 0x46
 800b704:	d802      	bhi.n	800b70c <hexCharToInt+0x2e>
        return (a - 65 + 10);
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	3b37      	subs	r3, #55	; 0x37
 800b70a:	e000      	b.n	800b70e <hexCharToInt+0x30>
    return 0;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	bc80      	pop	{r7}
 800b716:	4770      	bx	lr

0800b718 <parseFirstNTokens>:
} gpsData;

char* strtokNew(char* str, char delim);

char msgData[32][16] = {0};
void parseFirstNTokens(char* str, int number){
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
    memset(msgData, '\0', 32*16);
 800b722:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b726:	2100      	movs	r1, #0
 800b728:	4814      	ldr	r0, [pc, #80]	; (800b77c <parseFirstNTokens+0x64>)
 800b72a:	f000 fc93 	bl	800c054 <memset>
    char* pch = strtokNew (str, ',');
 800b72e:	212c      	movs	r1, #44	; 0x2c
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 faf1 	bl	800bd18 <strtokNew>
 800b736:	60f8      	str	r0, [r7, #12]
    int msgN = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	60bb      	str	r3, [r7, #8]
    while ((pch != NULL) && ((msgN < number) || (msgN == 0))) {
 800b73c:	e00f      	b.n	800b75e <parseFirstNTokens+0x46>
        strcpy(msgData[msgN], pch);
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	011b      	lsls	r3, r3, #4
 800b742:	4a0e      	ldr	r2, [pc, #56]	; (800b77c <parseFirstNTokens+0x64>)
 800b744:	4413      	add	r3, r2
 800b746:	68f9      	ldr	r1, [r7, #12]
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fc8b 	bl	800c064 <strcpy>
        pch = strtokNew (NULL, ',');
 800b74e:	212c      	movs	r1, #44	; 0x2c
 800b750:	2000      	movs	r0, #0
 800b752:	f000 fae1 	bl	800bd18 <strtokNew>
 800b756:	60f8      	str	r0, [r7, #12]
        msgN++;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	3301      	adds	r3, #1
 800b75c:	60bb      	str	r3, [r7, #8]
    while ((pch != NULL) && ((msgN < number) || (msgN == 0))) {
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d006      	beq.n	800b772 <parseFirstNTokens+0x5a>
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	dbe8      	blt.n	800b73e <parseFirstNTokens+0x26>
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0e5      	beq.n	800b73e <parseFirstNTokens+0x26>
    }
}
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20001244 	.word	0x20001244

0800b780 <ratof>:

float ratof(char *arr)
{
 800b780:	b5b0      	push	{r4, r5, r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  float val = 0;
 800b788:	f04f 0300 	mov.w	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
  int afterdot=0;
 800b78e:	2300      	movs	r3, #0
 800b790:	613b      	str	r3, [r7, #16]
  float scale=1;
 800b792:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b796:	60fb      	str	r3, [r7, #12]
  int neg = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	60bb      	str	r3, [r7, #8]

  if (*arr == '-') {
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b2d      	cmp	r3, #45	; 0x2d
 800b7a2:	d14c      	bne.n	800b83e <ratof+0xbe>
    arr++;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	607b      	str	r3, [r7, #4]
    neg = 1;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	60bb      	str	r3, [r7, #8]
  }
  while (*arr) {
 800b7ae:	e046      	b.n	800b83e <ratof+0xbe>
    if (afterdot) {
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d018      	beq.n	800b7e8 <ratof+0x68>
      scale = scale/10;
 800b7b6:	492a      	ldr	r1, [pc, #168]	; (800b860 <ratof+0xe0>)
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7f5 f9d3 	bl	8000b64 <__aeabi_fdiv>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	60fb      	str	r3, [r7, #12]
      val = val + (*arr-'0')*scale;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	3b30      	subs	r3, #48	; 0x30
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7f5 f8c3 	bl	8000954 <__aeabi_i2f>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	68f9      	ldr	r1, [r7, #12]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7f5 f912 	bl	80009fc <__aeabi_fmul>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6978      	ldr	r0, [r7, #20]
 800b7de:	f7f5 f805 	bl	80007ec <__addsf3>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	617b      	str	r3, [r7, #20]
 800b7e6:	e027      	b.n	800b838 <ratof+0xb8>
    } else {
      if (*arr == '.')
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ee:	d103      	bne.n	800b7f8 <ratof+0x78>
    afterdot++;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	613b      	str	r3, [r7, #16]
 800b7f6:	e01f      	b.n	800b838 <ratof+0xb8>
      else
    val = val * 10.0 + (*arr - '0');
 800b7f8:	6978      	ldr	r0, [r7, #20]
 800b7fa:	f7f4 ff49 	bl	8000690 <__aeabi_f2d>
 800b7fe:	f04f 0200 	mov.w	r2, #0
 800b802:	4b18      	ldr	r3, [pc, #96]	; (800b864 <ratof+0xe4>)
 800b804:	f7f4 fcb6 	bl	8000174 <__aeabi_dmul>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4614      	mov	r4, r2
 800b80e:	461d      	mov	r5, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	3b30      	subs	r3, #48	; 0x30
 800b816:	4618      	mov	r0, r3
 800b818:	f7f4 ff28 	bl	800066c <__aeabi_i2d>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4620      	mov	r0, r4
 800b822:	4629      	mov	r1, r5
 800b824:	f7f4 fdd6 	bl	80003d4 <__adddf3>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4610      	mov	r0, r2
 800b82e:	4619      	mov	r1, r3
 800b830:	f7f4 ff86 	bl	8000740 <__aeabi_d2f>
 800b834:	4603      	mov	r3, r0
 800b836:	617b      	str	r3, [r7, #20]
    }
    arr++;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3301      	adds	r3, #1
 800b83c:	607b      	str	r3, [r7, #4]
  while (*arr) {
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1b4      	bne.n	800b7b0 <ratof+0x30>
  }
  if(neg) return -val;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <ratof+0xd4>
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b852:	e000      	b.n	800b856 <ratof+0xd6>
  else    return  val;
 800b854:	697b      	ldr	r3, [r7, #20]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bdb0      	pop	{r4, r5, r7, pc}
 800b85e:	bf00      	nop
 800b860:	41200000 	.word	0x41200000
 800b864:	40240000 	.word	0x40240000

0800b868 <GpsToDecimalDegrees>:

float GpsToDecimalDegrees(const char* nmeaPos, char quadrant){
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  float v= 0;
 800b874:	f04f 0300 	mov.w	r3, #0
 800b878:	617b      	str	r3, [r7, #20]
  if(strlen(nmeaPos)>5)
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7f4 fc72 	bl	8000164 <strlen>
 800b880:	4603      	mov	r3, r0
 800b882:	2b05      	cmp	r3, #5
 800b884:	d93c      	bls.n	800b900 <GpsToDecimalDegrees+0x98>
  {
    char integerPart[3+1];
    int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3304      	adds	r3, #4
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b2e      	cmp	r3, #46	; 0x2e
 800b88e:	d101      	bne.n	800b894 <GpsToDecimalDegrees+0x2c>
 800b890:	2302      	movs	r3, #2
 800b892:	e000      	b.n	800b896 <GpsToDecimalDegrees+0x2e>
 800b894:	2303      	movs	r3, #3
 800b896:	613b      	str	r3, [r7, #16]
    memcpy(integerPart, nmeaPos, digitCount);
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	f107 030c 	add.w	r3, r7, #12
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 fbc9 	bl	800c038 <memcpy>
    integerPart[digitCount]= 0;
 800b8a6:	f107 020c 	add.w	r2, r7, #12
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	701a      	strb	r2, [r3, #0]
    nmeaPos+= digitCount;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	607b      	str	r3, [r7, #4]
    v = atoi(integerPart) + ratof(nmeaPos)/60.0f;
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 fb8c 	bl	800bfdc <atoi>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7f5 f844 	bl	8000954 <__aeabi_i2f>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff ff56 	bl	800b780 <ratof>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	490d      	ldr	r1, [pc, #52]	; (800b90c <GpsToDecimalDegrees+0xa4>)
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7f5 f943 	bl	8000b64 <__aeabi_fdiv>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7f4 ff82 	bl	80007ec <__addsf3>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	617b      	str	r3, [r7, #20]
    if(quadrant=='W' || quadrant=='S')
 800b8ec:	78fb      	ldrb	r3, [r7, #3]
 800b8ee:	2b57      	cmp	r3, #87	; 0x57
 800b8f0:	d002      	beq.n	800b8f8 <GpsToDecimalDegrees+0x90>
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	2b53      	cmp	r3, #83	; 0x53
 800b8f6:	d103      	bne.n	800b900 <GpsToDecimalDegrees+0x98>
      v= -v;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b8fe:	617b      	str	r3, [r7, #20]
  }
  return v;
 800b900:	697b      	ldr	r3, [r7, #20]
}
 800b902:	4618      	mov	r0, r3
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	bd90      	pop	{r4, r7, pc}
 800b90a:	bf00      	nop
 800b90c:	42700000 	.word	0x42700000

0800b910 <nmeaProcessString>:
enum nmeaErrors{ERR_NMEA_OK = 0, ERR_NMEA_WRONG_START_CHAR = -1, ERR_NMEA_WRONG_END_CHAR = -2, ERR_NMEA_NO_CHECKSUM_DELIM = -3, ERR_NMEA_CHECKSUM_ERR = -4, NMEA_USELESS_TALKER = -5};

enum RMCitems{RMC_TIME = 1, RMC_STATUS, RMC_LAT, RMC_N, RMC_LON, RMC_E, RMC_SOG, RMC_COG, RMC_DATE, RMC_NUMBER};
enum GGAitems{GGA_SATS = 7, GGA_NUMBER = 8};

int nmeaProcessString(char* nmeaArray, int msgLength){
 800b910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b914:	b08f      	sub	sp, #60	; 0x3c
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
 800b91c:	466b      	mov	r3, sp
 800b91e:	461e      	mov	r6, r3
    // check if begin is $
    if (nmeaArray[0] != '$')
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	2b24      	cmp	r3, #36	; 0x24
 800b926:	d002      	beq.n	800b92e <nmeaProcessString+0x1e>
        return ERR_NMEA_WRONG_START_CHAR;
 800b928:	f04f 33ff 	mov.w	r3, #4294967295
 800b92c:	e1c8      	b.n	800bcc0 <nmeaProcessString+0x3b0>
    int msgLen = msgLength;//sizeof(nmeaArray);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	62fb      	str	r3, [r7, #44]	; 0x2c
    char nmeaString[msgLen];
 800b932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b934:	1e4b      	subs	r3, r1, #1
 800b936:	62bb      	str	r3, [r7, #40]	; 0x28
 800b938:	460a      	mov	r2, r1
 800b93a:	2300      	movs	r3, #0
 800b93c:	4690      	mov	r8, r2
 800b93e:	4699      	mov	r9, r3
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	f04f 0300 	mov.w	r3, #0
 800b948:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b94c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b950:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b954:	460a      	mov	r2, r1
 800b956:	2300      	movs	r3, #0
 800b958:	4614      	mov	r4, r2
 800b95a:	461d      	mov	r5, r3
 800b95c:	f04f 0200 	mov.w	r2, #0
 800b960:	f04f 0300 	mov.w	r3, #0
 800b964:	00eb      	lsls	r3, r5, #3
 800b966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b96a:	00e2      	lsls	r2, r4, #3
 800b96c:	460b      	mov	r3, r1
 800b96e:	3307      	adds	r3, #7
 800b970:	08db      	lsrs	r3, r3, #3
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	ebad 0d03 	sub.w	sp, sp, r3
 800b978:	466b      	mov	r3, sp
 800b97a:	3300      	adds	r3, #0
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
    strncpy(nmeaString, nmeaArray, msgLen); // "...\r\n\0"
 800b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b980:	461a      	mov	r2, r3
 800b982:	6879      	ldr	r1, [r7, #4]
 800b984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b986:	f000 fb75 	bl	800c074 <strncpy>
    // check if end is \r\n

    if (!((nmeaArray[msgLen-3] == '\r') && (nmeaArray[msgLen-2] == '\n')))
 800b98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98c:	3b03      	subs	r3, #3
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	4413      	add	r3, r2
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	2b0d      	cmp	r3, #13
 800b996:	d106      	bne.n	800b9a6 <nmeaProcessString+0x96>
 800b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99a:	3b02      	subs	r3, #2
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	4413      	add	r3, r2
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b0a      	cmp	r3, #10
 800b9a4:	d002      	beq.n	800b9ac <nmeaProcessString+0x9c>
        return ERR_NMEA_WRONG_END_CHAR;
 800b9a6:	f06f 0301 	mvn.w	r3, #1
 800b9aa:	e189      	b.n	800bcc0 <nmeaProcessString+0x3b0>

    if (nmeaArray[msgLen-6] != '*')
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	3b06      	subs	r3, #6
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b8:	d002      	beq.n	800b9c0 <nmeaProcessString+0xb0>
        return ERR_NMEA_NO_CHECKSUM_DELIM;
 800b9ba:	f06f 0302 	mvn.w	r3, #2
 800b9be:	e17f      	b.n	800bcc0 <nmeaProcessString+0x3b0>
    // calculate checkdum and compare
    // extract sentence type
    char thisChar = '\0';
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t checksum = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    for (int i = 1; i < msgLen - 6; i++){
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d0:	e00f      	b.n	800b9f2 <nmeaProcessString+0xe2>
        thisChar = nmeaArray[i];
 800b9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        checksum = checksum ^ thisChar;
 800b9de:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b9e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9e6:	4053      	eors	r3, r2
 800b9e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    for (int i = 1; i < msgLen - 6; i++){
 800b9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	3b06      	subs	r3, #6
 800b9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	dbea      	blt.n	800b9d2 <nmeaProcessString+0xc2>
    }

    uint8_t rxChecksum = hexCharToInt(nmeaArray[msgLen - 5]) * 16 + hexCharToInt(nmeaArray[msgLen - 4]);
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	3b05      	subs	r3, #5
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff fe69 	bl	800b6de <hexCharToInt>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	011b      	lsls	r3, r3, #4
 800ba12:	b2dc      	uxtb	r4, r3
 800ba14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba16:	3b04      	subs	r3, #4
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff fe5d 	bl	800b6de <hexCharToInt>
 800ba24:	4603      	mov	r3, r0
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	4423      	add	r3, r4
 800ba2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (rxChecksum != checksum)
 800ba2e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ba32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d002      	beq.n	800ba40 <nmeaProcessString+0x130>
        return ERR_NMEA_CHECKSUM_ERR;
 800ba3a:	f06f 0303 	mvn.w	r3, #3
 800ba3e:	e13f      	b.n	800bcc0 <nmeaProcessString+0x3b0>

    char talkerID[4];
    strncpy(talkerID, nmeaArray + 3, 3);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	1cd9      	adds	r1, r3, #3
 800ba44:	f107 0314 	add.w	r3, r7, #20
 800ba48:	2203      	movs	r2, #3
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fb12 	bl	800c074 <strncpy>
    talkerID[3] = '\0';
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]

    if (!strcmp("RMC", talkerID)) {//|| !strcmp("$GNRMC\0", talkerID) || !strcmp("$GNGGA\0", talkerID)){
 800ba54:	f107 0314 	add.w	r3, r7, #20
 800ba58:	4619      	mov	r1, r3
 800ba5a:	489c      	ldr	r0, [pc, #624]	; (800bccc <nmeaProcessString+0x3bc>)
 800ba5c:	f7f4 fb78 	bl	8000150 <strcmp>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f040 8114 	bne.w	800bc90 <nmeaProcessString+0x380>
        parseFirstNTokens(nmeaString, RMC_NUMBER);
 800ba68:	210a      	movs	r1, #10
 800ba6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba6c:	f7ff fe54 	bl	800b718 <parseFirstNTokens>

        strcpy(gpsData.time.str, msgData[RMC_TIME]);
 800ba70:	4997      	ldr	r1, [pc, #604]	; (800bcd0 <nmeaProcessString+0x3c0>)
 800ba72:	4898      	ldr	r0, [pc, #608]	; (800bcd4 <nmeaProcessString+0x3c4>)
 800ba74:	f000 faf6 	bl	800c064 <strcpy>
        gpsData.time.H = (gpsData.time.str[0] - 48) * 10 + (gpsData.time.str[1] - 48);
 800ba78:	4b97      	ldr	r3, [pc, #604]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800ba7a:	799b      	ldrb	r3, [r3, #6]
 800ba7c:	3b30      	subs	r3, #48	; 0x30
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	461a      	mov	r2, r3
 800ba82:	0092      	lsls	r2, r2, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	4b93      	ldr	r3, [pc, #588]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800ba8c:	79db      	ldrb	r3, [r3, #7]
 800ba8e:	4413      	add	r3, r2
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	3b30      	subs	r3, #48	; 0x30
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	4b90      	ldr	r3, [pc, #576]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800ba98:	701a      	strb	r2, [r3, #0]
        gpsData.time.M = (gpsData.time.str[2] - 48) * 10 + (gpsData.time.str[3] - 48);
 800ba9a:	4b8f      	ldr	r3, [pc, #572]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800ba9c:	7a1b      	ldrb	r3, [r3, #8]
 800ba9e:	3b30      	subs	r3, #48	; 0x30
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	461a      	mov	r2, r3
 800baa4:	0092      	lsls	r2, r2, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	4b8a      	ldr	r3, [pc, #552]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800baae:	7a5b      	ldrb	r3, [r3, #9]
 800bab0:	4413      	add	r3, r2
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	3b30      	subs	r3, #48	; 0x30
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	4b87      	ldr	r3, [pc, #540]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800baba:	705a      	strb	r2, [r3, #1]
        gpsData.time.S = (gpsData.time.str[4] - 48) * 10 + (gpsData.time.str[5] - 48);
 800babc:	4b86      	ldr	r3, [pc, #536]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800babe:	7a9b      	ldrb	r3, [r3, #10]
 800bac0:	3b30      	subs	r3, #48	; 0x30
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	461a      	mov	r2, r3
 800bac6:	0092      	lsls	r2, r2, #2
 800bac8:	4413      	add	r3, r2
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	4b82      	ldr	r3, [pc, #520]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bad0:	7adb      	ldrb	r3, [r3, #11]
 800bad2:	4413      	add	r3, r2
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	3b30      	subs	r3, #48	; 0x30
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	4b7f      	ldr	r3, [pc, #508]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800badc:	709a      	strb	r2, [r3, #2]

        char timeMsStr[6];
        strncpy(timeMsStr, gpsData.time.str+7, strlen(gpsData.time.str)-7);
 800bade:	4c7f      	ldr	r4, [pc, #508]	; (800bcdc <nmeaProcessString+0x3cc>)
 800bae0:	487c      	ldr	r0, [pc, #496]	; (800bcd4 <nmeaProcessString+0x3c4>)
 800bae2:	f7f4 fb3f 	bl	8000164 <strlen>
 800bae6:	4603      	mov	r3, r0
 800bae8:	1fda      	subs	r2, r3, #7
 800baea:	f107 030c 	add.w	r3, r7, #12
 800baee:	4621      	mov	r1, r4
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fabf 	bl	800c074 <strncpy>
        gpsData.time.MS = atoi(timeMsStr);
 800baf6:	f107 030c 	add.w	r3, r7, #12
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fa6e 	bl	800bfdc <atoi>
 800bb00:	4603      	mov	r3, r0
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	4b74      	ldr	r3, [pc, #464]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb06:	809a      	strh	r2, [r3, #4]

        strcpy(gpsData.date.str, msgData[RMC_DATE]);
 800bb08:	4975      	ldr	r1, [pc, #468]	; (800bce0 <nmeaProcessString+0x3d0>)
 800bb0a:	4876      	ldr	r0, [pc, #472]	; (800bce4 <nmeaProcessString+0x3d4>)
 800bb0c:	f000 faaa 	bl	800c064 <strcpy>
        gpsData.date.D = (gpsData.date.str[0] - 48) * 10 + (gpsData.date.str[1] - 48);
 800bb10:	4b71      	ldr	r3, [pc, #452]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb12:	7d5b      	ldrb	r3, [r3, #21]
 800bb14:	3b30      	subs	r3, #48	; 0x30
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	461a      	mov	r2, r3
 800bb1a:	0092      	lsls	r2, r2, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	4b6d      	ldr	r3, [pc, #436]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb24:	7d9b      	ldrb	r3, [r3, #22]
 800bb26:	4413      	add	r3, r2
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	3b30      	subs	r3, #48	; 0x30
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	4b6a      	ldr	r3, [pc, #424]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb30:	749a      	strb	r2, [r3, #18]
        gpsData.date.M = (gpsData.date.str[2] - 48) * 10 + (gpsData.date.str[3] - 48);
 800bb32:	4b69      	ldr	r3, [pc, #420]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb34:	7ddb      	ldrb	r3, [r3, #23]
 800bb36:	3b30      	subs	r3, #48	; 0x30
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	0092      	lsls	r2, r2, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	4b64      	ldr	r3, [pc, #400]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb46:	7e1b      	ldrb	r3, [r3, #24]
 800bb48:	4413      	add	r3, r2
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	3b30      	subs	r3, #48	; 0x30
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	4b61      	ldr	r3, [pc, #388]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb52:	74da      	strb	r2, [r3, #19]
        gpsData.date.Y = (gpsData.date.str[4] - 48) * 10 + (gpsData.date.str[5] - 48);
 800bb54:	4b60      	ldr	r3, [pc, #384]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb56:	7e5b      	ldrb	r3, [r3, #25]
 800bb58:	3b30      	subs	r3, #48	; 0x30
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	0092      	lsls	r2, r2, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	4b5c      	ldr	r3, [pc, #368]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb68:	7e9b      	ldrb	r3, [r3, #26]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	3b30      	subs	r3, #48	; 0x30
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	4b59      	ldr	r3, [pc, #356]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb74:	751a      	strb	r2, [r3, #20]

        strcpy(gpsData.lonStr, msgData[RMC_LON]);
 800bb76:	495c      	ldr	r1, [pc, #368]	; (800bce8 <nmeaProcessString+0x3d8>)
 800bb78:	485c      	ldr	r0, [pc, #368]	; (800bcec <nmeaProcessString+0x3dc>)
 800bb7a:	f000 fa73 	bl	800c064 <strcpy>
        strcpy(gpsData.latStr, msgData[RMC_LAT]);
 800bb7e:	495c      	ldr	r1, [pc, #368]	; (800bcf0 <nmeaProcessString+0x3e0>)
 800bb80:	485c      	ldr	r0, [pc, #368]	; (800bcf4 <nmeaProcessString+0x3e4>)
 800bb82:	f000 fa6f 	bl	800c064 <strcpy>
        gpsData.lat = GpsToDecimalDegrees(gpsData.latStr, msgData[RMC_N][0]);
 800bb86:	4b5c      	ldr	r3, [pc, #368]	; (800bcf8 <nmeaProcessString+0x3e8>)
 800bb88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4859      	ldr	r0, [pc, #356]	; (800bcf4 <nmeaProcessString+0x3e4>)
 800bb90:	f7ff fe6a 	bl	800b868 <GpsToDecimalDegrees>
 800bb94:	4603      	mov	r3, r0
 800bb96:	4a50      	ldr	r2, [pc, #320]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bb98:	6413      	str	r3, [r2, #64]	; 0x40
        gpsData.lon = GpsToDecimalDegrees(gpsData.lonStr, msgData[RMC_E][0]);
 800bb9a:	4b57      	ldr	r3, [pc, #348]	; (800bcf8 <nmeaProcessString+0x3e8>)
 800bb9c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800bba0:	4619      	mov	r1, r3
 800bba2:	4852      	ldr	r0, [pc, #328]	; (800bcec <nmeaProcessString+0x3dc>)
 800bba4:	f7ff fe60 	bl	800b868 <GpsToDecimalDegrees>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	4a4b      	ldr	r2, [pc, #300]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bbac:	63d3      	str	r3, [r2, #60]	; 0x3c

        float lat = gpsData.lat + 90.0f;                                                  // Locator lat/lon shift.
 800bbae:	4b4a      	ldr	r3, [pc, #296]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb2:	4952      	ldr	r1, [pc, #328]	; (800bcfc <nmeaProcessString+0x3ec>)
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7f4 fe19 	bl	80007ec <__addsf3>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	61fb      	str	r3, [r7, #28]
        float lon = gpsData.lon + 180.0f;
 800bbbe:	4b46      	ldr	r3, [pc, #280]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	494f      	ldr	r1, [pc, #316]	; (800bd00 <nmeaProcessString+0x3f0>)
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7f4 fe11 	bl	80007ec <__addsf3>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	61bb      	str	r3, [r7, #24]

        gpsData.qth[0] = ((int)lon / 20) + 65;              // 1st digit: 20deg longitude slot.
 800bbce:	69b8      	ldr	r0, [r7, #24]
 800bbd0:	f7f5 f864 	bl	8000c9c <__aeabi_f2iz>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	4a4b      	ldr	r2, [pc, #300]	; (800bd04 <nmeaProcessString+0x3f4>)
 800bbd8:	fb82 1203 	smull	r1, r2, r2, r3
 800bbdc:	10d2      	asrs	r2, r2, #3
 800bbde:	17db      	asrs	r3, r3, #31
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	3341      	adds	r3, #65	; 0x41
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	4b3b      	ldr	r3, [pc, #236]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bbea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        gpsData.qth[1] = ((int)lat / 10) + 65;             // 2nd digit: 10deg latitude slot.
 800bbee:	69f8      	ldr	r0, [r7, #28]
 800bbf0:	f7f5 f854 	bl	8000c9c <__aeabi_f2iz>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	4a43      	ldr	r2, [pc, #268]	; (800bd04 <nmeaProcessString+0x3f4>)
 800bbf8:	fb82 1203 	smull	r1, r2, r2, r3
 800bbfc:	1092      	asrs	r2, r2, #2
 800bbfe:	17db      	asrs	r3, r3, #31
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	3341      	adds	r3, #65	; 0x41
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	4b33      	ldr	r3, [pc, #204]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bc0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        gpsData.qth[2] = ((int)lon % 20) / 2 + 48;          // 3rd digit: 2deg longitude slot.
 800bc0e:	69b8      	ldr	r0, [r7, #24]
 800bc10:	f7f5 f844 	bl	8000c9c <__aeabi_f2iz>
 800bc14:	4601      	mov	r1, r0
 800bc16:	4b3b      	ldr	r3, [pc, #236]	; (800bd04 <nmeaProcessString+0x3f4>)
 800bc18:	fb83 2301 	smull	r2, r3, r3, r1
 800bc1c:	10da      	asrs	r2, r3, #3
 800bc1e:	17cb      	asrs	r3, r1, #31
 800bc20:	1ad2      	subs	r2, r2, r3
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	1aca      	subs	r2, r1, r3
 800bc2c:	0fd3      	lsrs	r3, r2, #31
 800bc2e:	4413      	add	r3, r2
 800bc30:	105b      	asrs	r3, r3, #1
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	3330      	adds	r3, #48	; 0x30
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	4b27      	ldr	r3, [pc, #156]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bc3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        gpsData.qth[3] = ((int)lat % 10) / 1 + 48;          // 4th digit: 1deg latitude slot.
 800bc3e:	69f8      	ldr	r0, [r7, #28]
 800bc40:	f7f5 f82c 	bl	8000c9c <__aeabi_f2iz>
 800bc44:	4602      	mov	r2, r0
 800bc46:	4b2f      	ldr	r3, [pc, #188]	; (800bd04 <nmeaProcessString+0x3f4>)
 800bc48:	fb83 1302 	smull	r1, r3, r3, r2
 800bc4c:	1099      	asrs	r1, r3, #2
 800bc4e:	17d3      	asrs	r3, r2, #31
 800bc50:	1ac9      	subs	r1, r1, r3
 800bc52:	460b      	mov	r3, r1
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	440b      	add	r3, r1
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	1ad1      	subs	r1, r2, r3
 800bc5c:	b2cb      	uxtb	r3, r1
 800bc5e:	3330      	adds	r3, #48	; 0x30
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	4b1d      	ldr	r3, [pc, #116]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bc64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        //gpsData.qth[4] = ((int)lon % 2) * (int)(60.0f / 5.0f) + 97; // 5th digit: 5min longitude slot.
        //gpsData.qth[5] = ((int)lat % 1) * (int)(60.0f / 2.5f) + 97;  // 6th digit: 2.5min latitude slot.
        gpsData.qth[4] = '\0';
 800bc68:	4b1b      	ldr	r3, [pc, #108]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        strcpy(gpsData.status, msgData[RMC_STATUS]);
 800bc70:	4925      	ldr	r1, [pc, #148]	; (800bd08 <nmeaProcessString+0x3f8>)
 800bc72:	4826      	ldr	r0, [pc, #152]	; (800bd0c <nmeaProcessString+0x3fc>)
 800bc74:	f000 f9f6 	bl	800c064 <strcpy>
        gpsData.fix = (gpsData.status[0] == 'A');
 800bc78:	4b17      	ldr	r3, [pc, #92]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bc7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bc7e:	2b41      	cmp	r3, #65	; 0x41
 800bc80:	bf0c      	ite	eq
 800bc82:	2301      	moveq	r3, #1
 800bc84:	2300      	movne	r3, #0
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	461a      	mov	r2, r3
 800bc8a:	4b13      	ldr	r3, [pc, #76]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bc8c:	655a      	str	r2, [r3, #84]	; 0x54
 800bc8e:	e016      	b.n	800bcbe <nmeaProcessString+0x3ae>
    }

    else if (!strcmp("GGA", talkerID)) {
 800bc90:	f107 0314 	add.w	r3, r7, #20
 800bc94:	4619      	mov	r1, r3
 800bc96:	481e      	ldr	r0, [pc, #120]	; (800bd10 <nmeaProcessString+0x400>)
 800bc98:	f7f4 fa5a 	bl	8000150 <strcmp>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <nmeaProcessString+0x3a8>
        parseFirstNTokens(nmeaString, GGA_NUMBER);
 800bca2:	2108      	movs	r1, #8
 800bca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bca6:	f7ff fd37 	bl	800b718 <parseFirstNTokens>
        gpsData.satInUse = atoi(msgData[GGA_SATS]);
 800bcaa:	481a      	ldr	r0, [pc, #104]	; (800bd14 <nmeaProcessString+0x404>)
 800bcac:	f000 f996 	bl	800bfdc <atoi>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	4a09      	ldr	r2, [pc, #36]	; (800bcd8 <nmeaProcessString+0x3c8>)
 800bcb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bcb6:	e002      	b.n	800bcbe <nmeaProcessString+0x3ae>
    }

    else return NMEA_USELESS_TALKER;
 800bcb8:	f06f 0304 	mvn.w	r3, #4
 800bcbc:	e000      	b.n	800bcc0 <nmeaProcessString+0x3b0>

    return ERR_NMEA_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	46b5      	mov	sp, r6
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	373c      	adds	r7, #60	; 0x3c
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bccc:	0800c290 	.word	0x0800c290
 800bcd0:	20001254 	.word	0x20001254
 800bcd4:	200011ee 	.word	0x200011ee
 800bcd8:	200011e8 	.word	0x200011e8
 800bcdc:	200011f5 	.word	0x200011f5
 800bce0:	200012d4 	.word	0x200012d4
 800bce4:	200011fd 	.word	0x200011fd
 800bce8:	20001294 	.word	0x20001294
 800bcec:	20001204 	.word	0x20001204
 800bcf0:	20001274 	.word	0x20001274
 800bcf4:	20001214 	.word	0x20001214
 800bcf8:	20001244 	.word	0x20001244
 800bcfc:	42b40000 	.word	0x42b40000
 800bd00:	43340000 	.word	0x43340000
 800bd04:	66666667 	.word	0x66666667
 800bd08:	20001264 	.word	0x20001264
 800bd0c:	20001240 	.word	0x20001240
 800bd10:	0800c294 	.word	0x0800c294
 800bd14:	200012b4 	.word	0x200012b4

0800bd18 <strtokNew>:


#define STRTOK_MAX  (64)
char* strtokNew(char* str, char delim){
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
    static int lastPos;
    static int lastLen;
    static char* lastStr;
    static char bufStr[STRTOK_MAX];

    if (str != NULL) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00c      	beq.n	800bd44 <strtokNew+0x2c>
        lastPos = 0;
 800bd2a:	4b22      	ldr	r3, [pc, #136]	; (800bdb4 <strtokNew+0x9c>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	601a      	str	r2, [r3, #0]
        lastLen = strlen(str);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7f4 fa17 	bl	8000164 <strlen>
 800bd36:	4603      	mov	r3, r0
 800bd38:	461a      	mov	r2, r3
 800bd3a:	4b1f      	ldr	r3, [pc, #124]	; (800bdb8 <strtokNew+0xa0>)
 800bd3c:	601a      	str	r2, [r3, #0]
        lastStr = str;
 800bd3e:	4a1f      	ldr	r2, [pc, #124]	; (800bdbc <strtokNew+0xa4>)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6013      	str	r3, [r2, #0]
    }

    int j = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	60fb      	str	r3, [r7, #12]
    for (int i = lastPos; i < lastLen; i++){
 800bd48:	4b1a      	ldr	r3, [pc, #104]	; (800bdb4 <strtokNew+0x9c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	e026      	b.n	800bd9e <strtokNew+0x86>

        if (lastStr[i] != delim)
 800bd50:	4b1a      	ldr	r3, [pc, #104]	; (800bdbc <strtokNew+0xa4>)
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4413      	add	r3, r2
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	78fa      	ldrb	r2, [r7, #3]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d00d      	beq.n	800bd7c <strtokNew+0x64>
            bufStr[j] = lastStr[i];
 800bd60:	4b16      	ldr	r3, [pc, #88]	; (800bdbc <strtokNew+0xa4>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	4413      	add	r3, r2
 800bd68:	7819      	ldrb	r1, [r3, #0]
 800bd6a:	4a15      	ldr	r2, [pc, #84]	; (800bdc0 <strtokNew+0xa8>)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4413      	add	r3, r2
 800bd70:	460a      	mov	r2, r1
 800bd72:	701a      	strb	r2, [r3, #0]
        else {
            bufStr[j] = '\0';
            lastPos = i + 1;
            return bufStr;
        }
        if (j<STRTOK_MAX) j++;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b3f      	cmp	r3, #63	; 0x3f
 800bd78:	dc0e      	bgt.n	800bd98 <strtokNew+0x80>
 800bd7a:	e00a      	b.n	800bd92 <strtokNew+0x7a>
            bufStr[j] = '\0';
 800bd7c:	4a10      	ldr	r2, [pc, #64]	; (800bdc0 <strtokNew+0xa8>)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	2200      	movs	r2, #0
 800bd84:	701a      	strb	r2, [r3, #0]
            lastPos = i + 1;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	4a0a      	ldr	r2, [pc, #40]	; (800bdb4 <strtokNew+0x9c>)
 800bd8c:	6013      	str	r3, [r2, #0]
            return bufStr;
 800bd8e:	4b0c      	ldr	r3, [pc, #48]	; (800bdc0 <strtokNew+0xa8>)
 800bd90:	e00b      	b.n	800bdaa <strtokNew+0x92>
        if (j<STRTOK_MAX) j++;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3301      	adds	r3, #1
 800bd96:	60fb      	str	r3, [r7, #12]
    for (int i = lastPos; i < lastLen; i++){
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	60bb      	str	r3, [r7, #8]
 800bd9e:	4b06      	ldr	r3, [pc, #24]	; (800bdb8 <strtokNew+0xa0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	dbd3      	blt.n	800bd50 <strtokNew+0x38>
    }
    return NULL;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20001444 	.word	0x20001444
 800bdb8:	20001448 	.word	0x20001448
 800bdbc:	2000144c 	.word	0x2000144c
 800bdc0:	20001450 	.word	0x20001450

0800bdc4 <wsprStartTx>:
#include "main.h"
#include <string.h>
#include <stdlib.h>
#include "si5351.h"

void wsprStartTx(void){
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 800bdc8:	4803      	ldr	r0, [pc, #12]	; (800bdd8 <wsprStartTx+0x14>)
 800bdca:	f7f9 fc07 	bl	80055dc <HAL_TIM_Base_Start_IT>
	si5351_EnableOutputs(1);
 800bdce:	2001      	movs	r0, #1
 800bdd0:	f7ff fbd8 	bl	800b584 <si5351_EnableOutputs>
}
 800bdd4:	bf00      	nop
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	20000484 	.word	0x20000484

0800bddc <wsprStopTx>:

int wsprToneCounter = 0;


void wsprStopTx(void){
 800bddc:	b580      	push	{r7, lr}
 800bdde:	af00      	add	r7, sp, #0
	wsprToneCounter = 0;
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <wsprStopTx+0x1c>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3);
 800bde6:	4805      	ldr	r0, [pc, #20]	; (800bdfc <wsprStopTx+0x20>)
 800bde8:	f7f9 fc4a 	bl	8005680 <HAL_TIM_Base_Stop_IT>
	si5351_EnableOutputs(0);
 800bdec:	2000      	movs	r0, #0
 800bdee:	f7ff fbc9 	bl	800b584 <si5351_EnableOutputs>
}
 800bdf2:	bf00      	nop
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20001490 	.word	0x20001490
 800bdfc:	20000484 	.word	0x20000484

0800be00 <hzToFreq>:
uint64_t wsprFreqs[4] = { };

si5351PLLConfig_t pll_conf[4];
si5351OutputConfig_t out_conf[4];

uint64_t hzToFreq(float fin){
 800be00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be04:	b08c      	sub	sp, #48	; 0x30
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
	float f = fin;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint64_t a = (uint64_t)f * 1000;
 800be0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be10:	f7f4 ff82 	bl	8000d18 <__aeabi_f2ulz>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	f04f 0a00 	mov.w	sl, #0
 800be1c:	f04f 0b00 	mov.w	fp, #0
 800be20:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800be24:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800be28:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800be2c:	4652      	mov	r2, sl
 800be2e:	465b      	mov	r3, fp
 800be30:	1a14      	subs	r4, r2, r0
 800be32:	eb63 0501 	sbc.w	r5, r3, r1
 800be36:	f04f 0200 	mov.w	r2, #0
 800be3a:	f04f 0300 	mov.w	r3, #0
 800be3e:	00ab      	lsls	r3, r5, #2
 800be40:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800be44:	00a2      	lsls	r2, r4, #2
 800be46:	4614      	mov	r4, r2
 800be48:	461d      	mov	r5, r3
 800be4a:	eb14 0800 	adds.w	r8, r4, r0
 800be4e:	eb45 0901 	adc.w	r9, r5, r1
 800be52:	f04f 0200 	mov.w	r2, #0
 800be56:	f04f 0300 	mov.w	r3, #0
 800be5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be66:	4690      	mov	r8, r2
 800be68:	4699      	mov	r9, r3
 800be6a:	e9c7 8908 	strd	r8, r9, [r7, #32]
	float c = f - (uint64_t)f;
 800be6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be70:	f7f4 ff52 	bl	8000d18 <__aeabi_f2ulz>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4610      	mov	r0, r2
 800be7a:	4619      	mov	r1, r3
 800be7c:	f7f4 fd78 	bl	8000970 <__aeabi_ul2f>
 800be80:	4603      	mov	r3, r0
 800be82:	4619      	mov	r1, r3
 800be84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be86:	f7f4 fcaf 	bl	80007e8 <__aeabi_fsub>
 800be8a:	4603      	mov	r3, r0
 800be8c:	61fb      	str	r3, [r7, #28]
	uint64_t b = (uint64_t)(c * 1000.0f);
 800be8e:	490e      	ldr	r1, [pc, #56]	; (800bec8 <hzToFreq+0xc8>)
 800be90:	69f8      	ldr	r0, [r7, #28]
 800be92:	f7f4 fdb3 	bl	80009fc <__aeabi_fmul>
 800be96:	4603      	mov	r3, r0
 800be98:	4618      	mov	r0, r3
 800be9a:	f7f4 ff3d 	bl	8000d18 <__aeabi_f2ulz>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return (a + b);
 800bea6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800beaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800beae:	1884      	adds	r4, r0, r2
 800beb0:	603c      	str	r4, [r7, #0]
 800beb2:	eb41 0303 	adc.w	r3, r1, r3
 800beb6:	607b      	str	r3, [r7, #4]
 800beb8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800bebc:	4610      	mov	r0, r2
 800bebe:	4619      	mov	r1, r3
 800bec0:	3730      	adds	r7, #48	; 0x30
 800bec2:	46bd      	mov	sp, r7
 800bec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bec8:	447a0000 	.word	0x447a0000

0800becc <wsprInit>:

void wsprInit(uint64_t baseFreq){
 800becc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bed0:	b085      	sub	sp, #20
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	e9c7 0100 	strd	r0, r1, [r7]
	for(int i=0; i<4; i++){
 800bed8:	2300      	movs	r3, #0
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	e02d      	b.n	800bf3a <wsprInit+0x6e>
		wsprFreqs[i] = baseFreq + 1464 * i;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bee4:	fb02 f303 	mul.w	r3, r2, r3
 800bee8:	17da      	asrs	r2, r3, #31
 800beea:	461c      	mov	r4, r3
 800beec:	4615      	mov	r5, r2
 800beee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bef2:	eb14 0802 	adds.w	r8, r4, r2
 800bef6:	eb45 0903 	adc.w	r9, r5, r3
 800befa:	4a14      	ldr	r2, [pc, #80]	; (800bf4c <wsprInit+0x80>)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	4413      	add	r3, r2
 800bf02:	e9c3 8900 	strd	r8, r9, [r3]
		si5351_Calc(wsprFreqs[i], &pll_conf[i], &out_conf[i]);
 800bf06:	4a11      	ldr	r2, [pc, #68]	; (800bf4c <wsprInit+0x80>)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	4413      	add	r3, r2
 800bf0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	4613      	mov	r3, r2
 800bf16:	005b      	lsls	r3, r3, #1
 800bf18:	4413      	add	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4a0c      	ldr	r2, [pc, #48]	; (800bf50 <wsprInit+0x84>)
 800bf1e:	189e      	adds	r6, r3, r2
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4a0a      	ldr	r2, [pc, #40]	; (800bf54 <wsprInit+0x88>)
 800bf2c:	4413      	add	r3, r2
 800bf2e:	4632      	mov	r2, r6
 800bf30:	f7ff fa5e 	bl	800b3f0 <si5351_Calc>
	for(int i=0; i<4; i++){
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	3301      	adds	r3, #1
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	ddce      	ble.n	800bede <wsprInit+0x12>
	}
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	3714      	adds	r7, #20
 800bf46:	46bd      	mov	sp, r7
 800bf48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf4c:	20001498 	.word	0x20001498
 800bf50:	200014b8 	.word	0x200014b8
 800bf54:	200014e8 	.word	0x200014e8

0800bf58 <wsprIntCall>:


inline void wsprIntCall(void){
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af02      	add	r7, sp, #8
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800bf5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf62:	4819      	ldr	r0, [pc, #100]	; (800bfc8 <wsprIntCall+0x70>)
 800bf64:	f7f6 fa10 	bl	8002388 <HAL_GPIO_TogglePin>
	//si5351_SetupCLK0(wsprFreqs[wsprTones[wsprToneCounter]], SI5351_DRIVE_STRENGTH_4MA);

	si5351_SetupPLL(SI5351_PLL_A, &pll_conf[wsprTones[wsprToneCounter]]);
 800bf68:	4b18      	ldr	r3, [pc, #96]	; (800bfcc <wsprIntCall+0x74>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a18      	ldr	r2, [pc, #96]	; (800bfd0 <wsprIntCall+0x78>)
 800bf6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf72:	4613      	mov	r3, r2
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	4413      	add	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4a16      	ldr	r2, [pc, #88]	; (800bfd4 <wsprIntCall+0x7c>)
 800bf7c:	4413      	add	r3, r2
 800bf7e:	4619      	mov	r1, r3
 800bf80:	2000      	movs	r0, #0
 800bf82:	f7ff f94d 	bl	800b220 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_2MA, &out_conf[wsprTones[wsprToneCounter]], 0);
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <wsprIntCall+0x74>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a11      	ldr	r2, [pc, #68]	; (800bfd0 <wsprIntCall+0x78>)
 800bf8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf90:	4613      	mov	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4a0f      	ldr	r2, [pc, #60]	; (800bfd8 <wsprIntCall+0x80>)
 800bf9a:	4413      	add	r3, r2
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	9200      	str	r2, [sp, #0]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	f7ff f976 	bl	800b296 <si5351_SetupOutput>

	if (wsprToneCounter < 162) wsprToneCounter++;
 800bfaa:	4b08      	ldr	r3, [pc, #32]	; (800bfcc <wsprIntCall+0x74>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2ba1      	cmp	r3, #161	; 0xa1
 800bfb0:	dc05      	bgt.n	800bfbe <wsprIntCall+0x66>
 800bfb2:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <wsprIntCall+0x74>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	4a04      	ldr	r2, [pc, #16]	; (800bfcc <wsprIntCall+0x74>)
 800bfba:	6013      	str	r3, [r2, #0]
	else wsprStopTx();
};
 800bfbc:	e001      	b.n	800bfc2 <wsprIntCall+0x6a>
	else wsprStopTx();
 800bfbe:	f7ff ff0d 	bl	800bddc <wsprStopTx>
};
 800bfc2:	bf00      	nop
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	40010c00 	.word	0x40010c00
 800bfcc:	20001490 	.word	0x20001490
 800bfd0:	200000dc 	.word	0x200000dc
 800bfd4:	200014b8 	.word	0x200014b8
 800bfd8:	200014e8 	.word	0x200014e8

0800bfdc <atoi>:
 800bfdc:	220a      	movs	r2, #10
 800bfde:	2100      	movs	r1, #0
 800bfe0:	f000 b8d8 	b.w	800c194 <strtol>

0800bfe4 <__errno>:
 800bfe4:	4b01      	ldr	r3, [pc, #4]	; (800bfec <__errno+0x8>)
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	20000364 	.word	0x20000364

0800bff0 <__libc_init_array>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	2600      	movs	r6, #0
 800bff4:	4d0c      	ldr	r5, [pc, #48]	; (800c028 <__libc_init_array+0x38>)
 800bff6:	4c0d      	ldr	r4, [pc, #52]	; (800c02c <__libc_init_array+0x3c>)
 800bff8:	1b64      	subs	r4, r4, r5
 800bffa:	10a4      	asrs	r4, r4, #2
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	d109      	bne.n	800c014 <__libc_init_array+0x24>
 800c000:	f000 f8d2 	bl	800c1a8 <_init>
 800c004:	2600      	movs	r6, #0
 800c006:	4d0a      	ldr	r5, [pc, #40]	; (800c030 <__libc_init_array+0x40>)
 800c008:	4c0a      	ldr	r4, [pc, #40]	; (800c034 <__libc_init_array+0x44>)
 800c00a:	1b64      	subs	r4, r4, r5
 800c00c:	10a4      	asrs	r4, r4, #2
 800c00e:	42a6      	cmp	r6, r4
 800c010:	d105      	bne.n	800c01e <__libc_init_array+0x2e>
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	f855 3b04 	ldr.w	r3, [r5], #4
 800c018:	4798      	blx	r3
 800c01a:	3601      	adds	r6, #1
 800c01c:	e7ee      	b.n	800bffc <__libc_init_array+0xc>
 800c01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c022:	4798      	blx	r3
 800c024:	3601      	adds	r6, #1
 800c026:	e7f2      	b.n	800c00e <__libc_init_array+0x1e>
 800c028:	0800c3bc 	.word	0x0800c3bc
 800c02c:	0800c3bc 	.word	0x0800c3bc
 800c030:	0800c3bc 	.word	0x0800c3bc
 800c034:	0800c3c0 	.word	0x0800c3c0

0800c038 <memcpy>:
 800c038:	440a      	add	r2, r1
 800c03a:	4291      	cmp	r1, r2
 800c03c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c040:	d100      	bne.n	800c044 <memcpy+0xc>
 800c042:	4770      	bx	lr
 800c044:	b510      	push	{r4, lr}
 800c046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c04a:	4291      	cmp	r1, r2
 800c04c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c050:	d1f9      	bne.n	800c046 <memcpy+0xe>
 800c052:	bd10      	pop	{r4, pc}

0800c054 <memset>:
 800c054:	4603      	mov	r3, r0
 800c056:	4402      	add	r2, r0
 800c058:	4293      	cmp	r3, r2
 800c05a:	d100      	bne.n	800c05e <memset+0xa>
 800c05c:	4770      	bx	lr
 800c05e:	f803 1b01 	strb.w	r1, [r3], #1
 800c062:	e7f9      	b.n	800c058 <memset+0x4>

0800c064 <strcpy>:
 800c064:	4603      	mov	r3, r0
 800c066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c06a:	f803 2b01 	strb.w	r2, [r3], #1
 800c06e:	2a00      	cmp	r2, #0
 800c070:	d1f9      	bne.n	800c066 <strcpy+0x2>
 800c072:	4770      	bx	lr

0800c074 <strncpy>:
 800c074:	4603      	mov	r3, r0
 800c076:	b510      	push	{r4, lr}
 800c078:	3901      	subs	r1, #1
 800c07a:	b132      	cbz	r2, 800c08a <strncpy+0x16>
 800c07c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c080:	3a01      	subs	r2, #1
 800c082:	f803 4b01 	strb.w	r4, [r3], #1
 800c086:	2c00      	cmp	r4, #0
 800c088:	d1f7      	bne.n	800c07a <strncpy+0x6>
 800c08a:	2100      	movs	r1, #0
 800c08c:	441a      	add	r2, r3
 800c08e:	4293      	cmp	r3, r2
 800c090:	d100      	bne.n	800c094 <strncpy+0x20>
 800c092:	bd10      	pop	{r4, pc}
 800c094:	f803 1b01 	strb.w	r1, [r3], #1
 800c098:	e7f9      	b.n	800c08e <strncpy+0x1a>
	...

0800c09c <_strtol_l.constprop.0>:
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a2:	4680      	mov	r8, r0
 800c0a4:	d001      	beq.n	800c0aa <_strtol_l.constprop.0+0xe>
 800c0a6:	2b24      	cmp	r3, #36	; 0x24
 800c0a8:	d906      	bls.n	800c0b8 <_strtol_l.constprop.0+0x1c>
 800c0aa:	f7ff ff9b 	bl	800bfe4 <__errno>
 800c0ae:	2316      	movs	r3, #22
 800c0b0:	6003      	str	r3, [r0, #0]
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b8:	460d      	mov	r5, r1
 800c0ba:	4f35      	ldr	r7, [pc, #212]	; (800c190 <_strtol_l.constprop.0+0xf4>)
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0c2:	5de6      	ldrb	r6, [r4, r7]
 800c0c4:	f016 0608 	ands.w	r6, r6, #8
 800c0c8:	d1f8      	bne.n	800c0bc <_strtol_l.constprop.0+0x20>
 800c0ca:	2c2d      	cmp	r4, #45	; 0x2d
 800c0cc:	d12f      	bne.n	800c12e <_strtol_l.constprop.0+0x92>
 800c0ce:	2601      	movs	r6, #1
 800c0d0:	782c      	ldrb	r4, [r5, #0]
 800c0d2:	1c85      	adds	r5, r0, #2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d057      	beq.n	800c188 <_strtol_l.constprop.0+0xec>
 800c0d8:	2b10      	cmp	r3, #16
 800c0da:	d109      	bne.n	800c0f0 <_strtol_l.constprop.0+0x54>
 800c0dc:	2c30      	cmp	r4, #48	; 0x30
 800c0de:	d107      	bne.n	800c0f0 <_strtol_l.constprop.0+0x54>
 800c0e0:	7828      	ldrb	r0, [r5, #0]
 800c0e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c0e6:	2858      	cmp	r0, #88	; 0x58
 800c0e8:	d149      	bne.n	800c17e <_strtol_l.constprop.0+0xe2>
 800c0ea:	2310      	movs	r3, #16
 800c0ec:	786c      	ldrb	r4, [r5, #1]
 800c0ee:	3502      	adds	r5, #2
 800c0f0:	2700      	movs	r7, #0
 800c0f2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800c0f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c0fa:	fbbe f9f3 	udiv	r9, lr, r3
 800c0fe:	4638      	mov	r0, r7
 800c100:	fb03 ea19 	mls	sl, r3, r9, lr
 800c104:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c108:	f1bc 0f09 	cmp.w	ip, #9
 800c10c:	d814      	bhi.n	800c138 <_strtol_l.constprop.0+0x9c>
 800c10e:	4664      	mov	r4, ip
 800c110:	42a3      	cmp	r3, r4
 800c112:	dd22      	ble.n	800c15a <_strtol_l.constprop.0+0xbe>
 800c114:	2f00      	cmp	r7, #0
 800c116:	db1d      	blt.n	800c154 <_strtol_l.constprop.0+0xb8>
 800c118:	4581      	cmp	r9, r0
 800c11a:	d31b      	bcc.n	800c154 <_strtol_l.constprop.0+0xb8>
 800c11c:	d101      	bne.n	800c122 <_strtol_l.constprop.0+0x86>
 800c11e:	45a2      	cmp	sl, r4
 800c120:	db18      	blt.n	800c154 <_strtol_l.constprop.0+0xb8>
 800c122:	2701      	movs	r7, #1
 800c124:	fb00 4003 	mla	r0, r0, r3, r4
 800c128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c12c:	e7ea      	b.n	800c104 <_strtol_l.constprop.0+0x68>
 800c12e:	2c2b      	cmp	r4, #43	; 0x2b
 800c130:	bf04      	itt	eq
 800c132:	782c      	ldrbeq	r4, [r5, #0]
 800c134:	1c85      	addeq	r5, r0, #2
 800c136:	e7cd      	b.n	800c0d4 <_strtol_l.constprop.0+0x38>
 800c138:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c13c:	f1bc 0f19 	cmp.w	ip, #25
 800c140:	d801      	bhi.n	800c146 <_strtol_l.constprop.0+0xaa>
 800c142:	3c37      	subs	r4, #55	; 0x37
 800c144:	e7e4      	b.n	800c110 <_strtol_l.constprop.0+0x74>
 800c146:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c14a:	f1bc 0f19 	cmp.w	ip, #25
 800c14e:	d804      	bhi.n	800c15a <_strtol_l.constprop.0+0xbe>
 800c150:	3c57      	subs	r4, #87	; 0x57
 800c152:	e7dd      	b.n	800c110 <_strtol_l.constprop.0+0x74>
 800c154:	f04f 37ff 	mov.w	r7, #4294967295
 800c158:	e7e6      	b.n	800c128 <_strtol_l.constprop.0+0x8c>
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	da07      	bge.n	800c16e <_strtol_l.constprop.0+0xd2>
 800c15e:	2322      	movs	r3, #34	; 0x22
 800c160:	4670      	mov	r0, lr
 800c162:	f8c8 3000 	str.w	r3, [r8]
 800c166:	2a00      	cmp	r2, #0
 800c168:	d0a4      	beq.n	800c0b4 <_strtol_l.constprop.0+0x18>
 800c16a:	1e69      	subs	r1, r5, #1
 800c16c:	e005      	b.n	800c17a <_strtol_l.constprop.0+0xde>
 800c16e:	b106      	cbz	r6, 800c172 <_strtol_l.constprop.0+0xd6>
 800c170:	4240      	negs	r0, r0
 800c172:	2a00      	cmp	r2, #0
 800c174:	d09e      	beq.n	800c0b4 <_strtol_l.constprop.0+0x18>
 800c176:	2f00      	cmp	r7, #0
 800c178:	d1f7      	bne.n	800c16a <_strtol_l.constprop.0+0xce>
 800c17a:	6011      	str	r1, [r2, #0]
 800c17c:	e79a      	b.n	800c0b4 <_strtol_l.constprop.0+0x18>
 800c17e:	2430      	movs	r4, #48	; 0x30
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1b5      	bne.n	800c0f0 <_strtol_l.constprop.0+0x54>
 800c184:	2308      	movs	r3, #8
 800c186:	e7b3      	b.n	800c0f0 <_strtol_l.constprop.0+0x54>
 800c188:	2c30      	cmp	r4, #48	; 0x30
 800c18a:	d0a9      	beq.n	800c0e0 <_strtol_l.constprop.0+0x44>
 800c18c:	230a      	movs	r3, #10
 800c18e:	e7af      	b.n	800c0f0 <_strtol_l.constprop.0+0x54>
 800c190:	0800c2b1 	.word	0x0800c2b1

0800c194 <strtol>:
 800c194:	4613      	mov	r3, r2
 800c196:	460a      	mov	r2, r1
 800c198:	4601      	mov	r1, r0
 800c19a:	4802      	ldr	r0, [pc, #8]	; (800c1a4 <strtol+0x10>)
 800c19c:	6800      	ldr	r0, [r0, #0]
 800c19e:	f7ff bf7d 	b.w	800c09c <_strtol_l.constprop.0>
 800c1a2:	bf00      	nop
 800c1a4:	20000364 	.word	0x20000364

0800c1a8 <_init>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

0800c1b4 <_fini>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr
