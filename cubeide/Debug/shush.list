
shush.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a834  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c0  0800a9c0  00020404  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9c0  0800a9c0  00020404  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9c0  0800a9c0  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c4  0800a9c4  0001a9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800a9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  20000404  0800adcc  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000178c  0800adcc  0002178c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abda  00000000  00000000  0002042d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b3  00000000  00000000  0003b007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  0003f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c99c  00000000  00000000  00041fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da5f  00000000  00000000  0005e96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ca0  00000000  00000000  0007c3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011606b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e8  00000000  00000000  001160bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000404 	.word	0x20000404
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a928 	.word	0x0800a928

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000408 	.word	0x20000408
 8000148:	0800a928 	.word	0x0800a928

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_f2iz>:
 8000368:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800036c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000370:	d30f      	bcc.n	8000392 <__aeabi_f2iz+0x2a>
 8000372:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037a:	d90d      	bls.n	8000398 <__aeabi_f2iz+0x30>
 800037c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000384:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000388:	fa23 f002 	lsr.w	r0, r3, r2
 800038c:	bf18      	it	ne
 800038e:	4240      	negne	r0, r0
 8000390:	4770      	bx	lr
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	4770      	bx	lr
 8000398:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800039c:	d101      	bne.n	80003a2 <__aeabi_f2iz+0x3a>
 800039e:	0242      	lsls	r2, r0, #9
 80003a0:	d105      	bne.n	80003ae <__aeabi_f2iz+0x46>
 80003a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80003a6:	bf08      	it	eq
 80003a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80003ac:	4770      	bx	lr
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	4770      	bx	lr

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 fc21 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f831 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f9cb 	bl	800075c <MX_GPIO_Init>
  MX_ADC1_Init();
 80003c6:	f000 f88f 	bl	80004e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80003ca:	f000 f8df 	bl	800058c <MX_I2C1_Init>
  MX_RTC_Init();
 80003ce:	f000 f90b 	bl	80005e8 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80003d2:	f009 fad9 	bl	8009988 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80003d6:	f000 f8c5 	bl	8000564 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80003da:	f000 f995 	bl	8000708 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80003de:	f000 f91f 	bl	8000620 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  int i = HAL_I2C_IsDeviceReady(&hi2c1, SI5351_ADDRESS, 10, 1);
 80003e2:	2301      	movs	r3, #1
 80003e4:	220a      	movs	r2, #10
 80003e6:	2160      	movs	r1, #96	; 0x60
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <main+0x68>)
 80003ea:	f001 fbbf 	bl	8001b6c <HAL_I2C_IsDeviceReady>
 80003ee:	4603      	mov	r3, r0
 80003f0:	607b      	str	r3, [r7, #4]
  __NOP();
 80003f2:	bf00      	nop

  si5351_Init(0);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f009 ff3d 	bl	800a274 <si5351_Init>
  wsprInit(10000);
 80003fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80003fe:	f00a f9e5 	bl	800a7cc <wsprInit>

  wsprStartTx();
 8000402:	f00a f9c5 	bl	800a790 <wsprStartTx>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <main+0x6c>)
 800040c:	f001 f956 	bl	80016bc <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000414:	f000 fc56 	bl	8000cc4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000418:	e7f5      	b.n	8000406 <main+0x52>
 800041a:	bf00      	nop
 800041c:	20000458 	.word	0x20000458
 8000420:	40011000 	.word	0x40011000

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b094      	sub	sp, #80	; 0x50
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f00a fa70 	bl	800a918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000454:	2309      	movs	r3, #9
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	2301      	movs	r3, #1
 8000464:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	2302      	movs	r3, #2
 800046c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000474:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000478:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047e:	4618      	mov	r0, r3
 8000480:	f003 fb8e 	bl	8003ba0 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800048a:	f000 f9e9 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	230f      	movs	r3, #15
 8000490:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000492:	2302      	movs	r3, #2
 8000494:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2102      	movs	r1, #2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 fdfa 	bl	80040a4 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004b6:	f000 f9d3 	bl	8000860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80004ba:	2313      	movs	r3, #19
 80004bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 ff7f 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80004dc:	f000 f9c0 	bl	8000860 <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3750      	adds	r7, #80	; 0x50
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_ADC1_Init+0x74>)
 80004fa:	4a19      	ldr	r2, [pc, #100]	; (8000560 <MX_ADC1_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_ADC1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_ADC1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_ADC1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_ADC1_Init+0x74>)
 8000512:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000516:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_ADC1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_ADC1_Init+0x74>)
 8000520:	2201      	movs	r2, #1
 8000522:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <MX_ADC1_Init+0x74>)
 8000526:	f000 fbf1 	bl	8000d0c <HAL_ADC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000530:	f000 f996 	bl	8000860 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000538:	2301      	movs	r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_ADC1_Init+0x74>)
 8000546:	f000 fcb9 	bl	8000ebc <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000550:	f000 f986 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000420 	.word	0x20000420
 8000560:	40012400 	.word	0x40012400

08000564 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_CRC_Init+0x20>)
 800056a:	4a07      	ldr	r2, [pc, #28]	; (8000588 <MX_CRC_Init+0x24>)
 800056c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_CRC_Init+0x20>)
 8000570:	f000 feeb 	bl	800134a <HAL_CRC_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800057a:	f000 f971 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000450 	.word	0x20000450
 8000588:	40023000 	.word	0x40023000

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_I2C1_Init+0x50>)
 8000592:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <MX_I2C1_Init+0x54>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_I2C1_Init+0x50>)
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <MX_I2C1_Init+0x58>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_I2C1_Init+0x50>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_I2C1_Init+0x50>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_I2C1_Init+0x50>)
 80005aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_I2C1_Init+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_I2C1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_I2C1_Init+0x50>)
 80005ca:	f001 f891 	bl	80016f0 <HAL_I2C_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005d4:	f000 f944 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000458 	.word	0x20000458
 80005e0:	40005400 	.word	0x40005400
 80005e4:	00061a80 	.word	0x00061a80

080005e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_RTC_Init+0x30>)
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <MX_RTC_Init+0x34>)
 80005f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_RTC_Init+0x30>)
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_RTC_Init+0x30>)
 80005fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000600:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_RTC_Init+0x30>)
 8000604:	f004 f85c 	bl	80046c0 <HAL_RTC_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800060e:	f000 f927 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200004ac 	.word	0x200004ac
 800061c:	40002800 	.word	0x40002800

08000620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	; 0x38
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
 800064e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_TIM3_Init+0xe0>)
 8000652:	4a2c      	ldr	r2, [pc, #176]	; (8000704 <MX_TIM3_Init+0xe4>)
 8000654:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM1_PSC;
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_TIM3_Init+0xe0>)
 8000658:	f242 720f 	movw	r2, #9999	; 0x270f
 800065c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_TIM3_Init+0xe0>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM1_ARR;
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_TIM3_Init+0xe0>)
 8000666:	f241 3232 	movw	r2, #4914	; 0x1332
 800066a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_TIM3_Init+0xe0>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_TIM3_Init+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000678:	4821      	ldr	r0, [pc, #132]	; (8000700 <MX_TIM3_Init+0xe0>)
 800067a:	f004 f934 	bl	80048e6 <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000684:	f000 f8ec 	bl	8000860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000692:	4619      	mov	r1, r3
 8000694:	481a      	ldr	r0, [pc, #104]	; (8000700 <MX_TIM3_Init+0xe0>)
 8000696:	f004 fbad 	bl	8004df4 <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80006a0:	f000 f8de 	bl	8000860 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80006a4:	4816      	ldr	r0, [pc, #88]	; (8000700 <MX_TIM3_Init+0xe0>)
 80006a6:	f004 f9ed 	bl	8004a84 <HAL_TIM_OC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80006b0:	f000 f8d6 	bl	8000860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006b4:	2320      	movs	r3, #32
 80006b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4619      	mov	r1, r3
 80006c2:	480f      	ldr	r0, [pc, #60]	; (8000700 <MX_TIM3_Init+0xe0>)
 80006c4:	f004 ff08 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80006ce:	f000 f8c7 	bl	8000860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_TIM3_Init+0xe0>)
 80006ea:	f004 fb2b 	bl	8004d44 <HAL_TIM_OC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006f4:	f000 f8b4 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3738      	adds	r7, #56	; 0x38
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200004c0 	.word	0x200004c0
 8000704:	40000400 	.word	0x40000400

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART1_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000740:	f004 ff3a 	bl	80055b8 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f889 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000508 	.word	0x20000508
 8000758:	40013800 	.word	0x40013800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <MX_GPIO_Init+0xf8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a37      	ldr	r2, [pc, #220]	; (8000854 <MX_GPIO_Init+0xf8>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MX_GPIO_Init+0xf8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <MX_GPIO_Init+0xf8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a31      	ldr	r2, [pc, #196]	; (8000854 <MX_GPIO_Init+0xf8>)
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_GPIO_Init+0xf8>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_GPIO_Init+0xf8>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a2b      	ldr	r2, [pc, #172]	; (8000854 <MX_GPIO_Init+0xf8>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_GPIO_Init+0xf8>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_GPIO_Init+0xf8>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a25      	ldr	r2, [pc, #148]	; (8000854 <MX_GPIO_Init+0xf8>)
 80007be:	f043 0308 	orr.w	r3, r3, #8
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0xf8>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	4820      	ldr	r0, [pc, #128]	; (8000858 <MX_GPIO_Init+0xfc>)
 80007d8:	f000 ff58 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2120      	movs	r1, #32
 80007e0:	481e      	ldr	r0, [pc, #120]	; (800085c <MX_GPIO_Init+0x100>)
 80007e2:	f000 ff53 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	481b      	ldr	r0, [pc, #108]	; (800085c <MX_GPIO_Init+0x100>)
 80007ee:	f000 ff4d 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007f8:	2311      	movs	r3, #17
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	4813      	ldr	r0, [pc, #76]	; (8000858 <MX_GPIO_Init+0xfc>)
 800080c:	f000 fdba 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000810:	2320      	movs	r3, #32
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2302      	movs	r3, #2
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_GPIO_Init+0x100>)
 8000828:	f000 fdac 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800082c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_GPIO_Init+0x100>)
 8000846:	f000 fd9d 	bl	8001384 <HAL_GPIO_Init>

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40011000 	.word	0x40011000
 800085c:	40010c00 	.word	0x40010c00

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_MspInit+0x5c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_MspInit+0x5c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x5c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_MspInit+0x5c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_MspInit+0x60>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_MspInit+0x60>)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010000 	.word	0x40010000

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <HAL_ADC_MspInit+0x6c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d121      	bne.n	8000934 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <HAL_ADC_MspInit+0x70>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <HAL_ADC_MspInit+0x70>)
 80008f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_ADC_MspInit+0x70>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_ADC_MspInit+0x70>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <HAL_ADC_MspInit+0x70>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_ADC_MspInit+0x70>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000920:	2307      	movs	r3, #7
 8000922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_ADC_MspInit+0x74>)
 8000930:	f000 fd28 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40012400 	.word	0x40012400
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800

08000948 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_CRC_MspInit+0x34>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10b      	bne.n	8000972 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_CRC_MspInit+0x38>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_CRC_MspInit+0x38>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_CRC_MspInit+0x38>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	40023000 	.word	0x40023000
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <HAL_I2C_MspInit+0x70>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d123      	bne.n	80009ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_I2C_MspInit+0x74>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <HAL_I2C_MspInit+0x74>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_I2C_MspInit+0x74>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009bc:	23c0      	movs	r3, #192	; 0xc0
 80009be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	2312      	movs	r3, #18
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <HAL_I2C_MspInit+0x78>)
 80009d0:	f000 fcd8 	bl	8001384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_I2C_MspInit+0x74>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_I2C_MspInit+0x74>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009de:	61d3      	str	r3, [r2, #28]
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_I2C_MspInit+0x74>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <HAL_RTC_MspInit+0x3c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d110      	bne.n	8000a34 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000a12:	f003 f8b9 	bl	8003b88 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_RTC_MspInit+0x40>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_RTC_MspInit+0x40>)
 8000a1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <HAL_RTC_MspInit+0x40>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_RTC_MspInit+0x44>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40002800 	.word	0x40002800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	4242043c 	.word	0x4242043c

08000a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_TIM_Base_MspInit+0x44>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d113      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_TIM_Base_MspInit+0x48>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <HAL_TIM_Base_MspInit+0x48>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_TIM_Base_MspInit+0x48>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	201d      	movs	r0, #29
 8000a78:	f000 fc31 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a7c:	201d      	movs	r0, #29
 8000a7e:	f000 fc4a 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40000400 	.word	0x40000400
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <HAL_UART_MspInit+0x8c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d131      	bne.n	8000b18 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_UART_MspInit+0x90>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <HAL_UART_MspInit+0x90>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_UART_MspInit+0x90>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_UART_MspInit+0x90>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0x90>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_UART_MspInit+0x90>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <HAL_UART_MspInit+0x94>)
 8000afa:	f000 fc43 	bl	8001384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_MspInit+0x94>)
 8000b14:	f000 fc36 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010800 	.word	0x40010800

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f88b 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b82:	f001 fc6e 	bl	8002462 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200011e8 	.word	0x200011e8

08000b90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	wsprIntCall();
 8000b94:	f009 fe5a 	bl	800a84c <wsprIntCall>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM3_IRQHandler+0x14>)
 8000b9a:	f003 ffcb 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200004c0 	.word	0x200004c0

08000ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bda:	f7ff ffe5 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f009 fe77 	bl	800a8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fbe7 	bl	80003b4 <main>
  bx lr
 8000be6:	4770      	bx	lr
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 8000bf0:	0800a9c8 	.word	0x0800a9c8
  ldr r2, =_sbss
 8000bf4:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8000bf8:	2000178c 	.word	0x2000178c

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x28>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 fb59 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fe26 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fb71 	bl	8001332 <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 fb39 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	2000054c 	.word	0x2000054c

08000cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	2000054c 	.word	0x2000054c

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffe0 	bl	8000cb0 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e0be      	b.n	8000eac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d109      	bne.n	8000d50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fdc0 	bl	80008d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f9ab 	bl	80010ac <ADC_ConversionStop_Disable>
 8000d56:	4603      	mov	r3, r0
 8000d58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8099 	bne.w	8000e9a <HAL_ADC_Init+0x18e>
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8095 	bne.w	8000e9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d78:	f023 0302 	bic.w	r3, r3, #2
 8000d7c:	f043 0202 	orr.w	r2, r3, #2
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7b1b      	ldrb	r3, [r3, #12]
 8000d92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000da4:	d003      	beq.n	8000dae <HAL_ADC_Init+0xa2>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d102      	bne.n	8000db4 <HAL_ADC_Init+0xa8>
 8000dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db2:	e000      	b.n	8000db6 <HAL_ADC_Init+0xaa>
 8000db4:	2300      	movs	r3, #0
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7d1b      	ldrb	r3, [r3, #20]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d119      	bne.n	8000df8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7b1b      	ldrb	r3, [r3, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	035a      	lsls	r2, r3, #13
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	e00b      	b.n	8000df8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f043 0220 	orr.w	r2, r3, #32
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	f043 0201 	orr.w	r2, r3, #1
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_ADC_Init+0x1a8>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e28:	d003      	beq.n	8000e32 <HAL_ADC_Init+0x126>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d104      	bne.n	8000e3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	051b      	lsls	r3, r3, #20
 8000e3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_ADC_Init+0x1ac>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d10b      	bne.n	8000e78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f023 0303 	bic.w	r3, r3, #3
 8000e6e:	f043 0201 	orr.w	r2, r3, #1
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e76:	e018      	b.n	8000eaa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	f023 0312 	bic.w	r3, r3, #18
 8000e80:	f043 0210 	orr.w	r2, r3, #16
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e98:	e007      	b.n	8000eaa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9e:	f043 0210 	orr.w	r2, r3, #16
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	ffe1f7fd 	.word	0xffe1f7fd
 8000eb8:	ff1f0efe 	.word	0xff1f0efe

08000ebc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x20>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e0dc      	b.n	8001096 <HAL_ADC_ConfigChannel+0x1da>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d81c      	bhi.n	8000f26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3b05      	subs	r3, #5
 8000efe:	221f      	movs	r2, #31
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4019      	ands	r1, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	3b05      	subs	r3, #5
 8000f18:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
 8000f24:	e03c      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d81c      	bhi.n	8000f68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3b23      	subs	r3, #35	; 0x23
 8000f40:	221f      	movs	r2, #31
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	4019      	ands	r1, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	3b23      	subs	r3, #35	; 0x23
 8000f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
 8000f66:	e01b      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	3b41      	subs	r3, #65	; 0x41
 8000f7a:	221f      	movs	r2, #31
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4019      	ands	r1, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	3b41      	subs	r3, #65	; 0x41
 8000f94:	fa00 f203 	lsl.w	r2, r0, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b09      	cmp	r3, #9
 8000fa6:	d91c      	bls.n	8000fe2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68d9      	ldr	r1, [r3, #12]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b1e      	subs	r3, #30
 8000fba:	2207      	movs	r2, #7
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4019      	ands	r1, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6898      	ldr	r0, [r3, #8]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b1e      	subs	r3, #30
 8000fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	e019      	b.n	8001016 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6919      	ldr	r1, [r3, #16]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	fa00 f203 	lsl.w	r2, r0, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b10      	cmp	r3, #16
 800101c:	d003      	beq.n	8001026 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001022:	2b11      	cmp	r3, #17
 8001024:	d132      	bne.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d125      	bne.n	800107c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d126      	bne.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800104c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b10      	cmp	r3, #16
 8001054:	d11a      	bne.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	0c9a      	lsrs	r2, r3, #18
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800106c:	e002      	b.n	8001074 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3b01      	subs	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f9      	bne.n	800106e <HAL_ADC_ConfigChannel+0x1b2>
 800107a:	e007      	b.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f043 0220 	orr.w	r2, r3, #32
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40012400 	.word	0x40012400
 80010a4:	20000000 	.word	0x20000000
 80010a8:	431bde83 	.word	0x431bde83

080010ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d12e      	bne.n	8001124 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010d6:	f7ff fdeb 	bl	8000cb0 <HAL_GetTick>
 80010da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010dc:	e01b      	b.n	8001116 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010de:	f7ff fde7 	bl	8000cb0 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d914      	bls.n	8001116 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10d      	bne.n	8001116 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	d0dc      	beq.n	80010de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4906      	ldr	r1, [pc, #24]	; (80011c8 <__NVIC_EnableIRQ+0x34>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff90 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff2d 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff42 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff90 	bl	8001220 <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5f 	bl	80011cc <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff35 	bl	8001194 <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa2 	bl	8001284 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e00e      	b.n	800137a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	795b      	ldrb	r3, [r3, #5]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff faeb 	bl	8000948 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b08b      	sub	sp, #44	; 0x2c
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e169      	b.n	800166c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001398:	2201      	movs	r2, #1
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8158 	bne.w	8001666 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a9a      	ldr	r2, [pc, #616]	; (8001624 <HAL_GPIO_Init+0x2a0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d05e      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013c0:	4a98      	ldr	r2, [pc, #608]	; (8001624 <HAL_GPIO_Init+0x2a0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d875      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013c6:	4a98      	ldr	r2, [pc, #608]	; (8001628 <HAL_GPIO_Init+0x2a4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d058      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013cc:	4a96      	ldr	r2, [pc, #600]	; (8001628 <HAL_GPIO_Init+0x2a4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d86f      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013d2:	4a96      	ldr	r2, [pc, #600]	; (800162c <HAL_GPIO_Init+0x2a8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d052      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013d8:	4a94      	ldr	r2, [pc, #592]	; (800162c <HAL_GPIO_Init+0x2a8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d869      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013de:	4a94      	ldr	r2, [pc, #592]	; (8001630 <HAL_GPIO_Init+0x2ac>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d04c      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013e4:	4a92      	ldr	r2, [pc, #584]	; (8001630 <HAL_GPIO_Init+0x2ac>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d863      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013ea:	4a92      	ldr	r2, [pc, #584]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d046      	beq.n	800147e <HAL_GPIO_Init+0xfa>
 80013f0:	4a90      	ldr	r2, [pc, #576]	; (8001634 <HAL_GPIO_Init+0x2b0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d85d      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d82a      	bhi.n	8001450 <HAL_GPIO_Init+0xcc>
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d859      	bhi.n	80014b2 <HAL_GPIO_Init+0x12e>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <HAL_GPIO_Init+0x80>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	0800147f 	.word	0x0800147f
 8001408:	08001459 	.word	0x08001459
 800140c:	0800146b 	.word	0x0800146b
 8001410:	080014ad 	.word	0x080014ad
 8001414:	080014b3 	.word	0x080014b3
 8001418:	080014b3 	.word	0x080014b3
 800141c:	080014b3 	.word	0x080014b3
 8001420:	080014b3 	.word	0x080014b3
 8001424:	080014b3 	.word	0x080014b3
 8001428:	080014b3 	.word	0x080014b3
 800142c:	080014b3 	.word	0x080014b3
 8001430:	080014b3 	.word	0x080014b3
 8001434:	080014b3 	.word	0x080014b3
 8001438:	080014b3 	.word	0x080014b3
 800143c:	080014b3 	.word	0x080014b3
 8001440:	080014b3 	.word	0x080014b3
 8001444:	080014b3 	.word	0x080014b3
 8001448:	08001461 	.word	0x08001461
 800144c:	08001475 	.word	0x08001475
 8001450:	4a79      	ldr	r2, [pc, #484]	; (8001638 <HAL_GPIO_Init+0x2b4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001456:	e02c      	b.n	80014b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e029      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	3304      	adds	r3, #4
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e024      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	3308      	adds	r3, #8
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e01f      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	330c      	adds	r3, #12
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e01a      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001486:	2304      	movs	r3, #4
 8001488:	623b      	str	r3, [r7, #32]
          break;
 800148a:	e013      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001494:	2308      	movs	r3, #8
 8001496:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	611a      	str	r2, [r3, #16]
          break;
 800149e:	e009      	b.n	80014b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a0:	2308      	movs	r3, #8
 80014a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	615a      	str	r2, [r3, #20]
          break;
 80014aa:	e003      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x130>
          break;
 80014b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2bff      	cmp	r3, #255	; 0xff
 80014b8:	d801      	bhi.n	80014be <HAL_GPIO_Init+0x13a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	e001      	b.n	80014c2 <HAL_GPIO_Init+0x13e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3304      	adds	r3, #4
 80014c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2bff      	cmp	r3, #255	; 0xff
 80014c8:	d802      	bhi.n	80014d0 <HAL_GPIO_Init+0x14c>
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_Init+0x152>
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	3b08      	subs	r3, #8
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	210f      	movs	r1, #15
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	401a      	ands	r2, r3
 80014e8:	6a39      	ldr	r1, [r7, #32]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80b1 	beq.w	8001666 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001504:	4b4d      	ldr	r3, [pc, #308]	; (800163c <HAL_GPIO_Init+0x2b8>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a4c      	ldr	r2, [pc, #304]	; (800163c <HAL_GPIO_Init+0x2b8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_GPIO_Init+0x2b8>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800151c:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_GPIO_Init+0x2bc>)
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a40      	ldr	r2, [pc, #256]	; (8001644 <HAL_GPIO_Init+0x2c0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d013      	beq.n	8001570 <HAL_GPIO_Init+0x1ec>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a3f      	ldr	r2, [pc, #252]	; (8001648 <HAL_GPIO_Init+0x2c4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1e8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a3e      	ldr	r2, [pc, #248]	; (800164c <HAL_GPIO_Init+0x2c8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1e4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3d      	ldr	r2, [pc, #244]	; (8001650 <HAL_GPIO_Init+0x2cc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1e0>
 8001560:	2303      	movs	r3, #3
 8001562:	e006      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 8001564:	2304      	movs	r3, #4
 8001566:	e004      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 8001568:	2302      	movs	r3, #2
 800156a:	e002      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_GPIO_Init+0x1ee>
 8001570:	2300      	movs	r3, #0
 8001572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001582:	492f      	ldr	r1, [pc, #188]	; (8001640 <HAL_GPIO_Init+0x2bc>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	492c      	ldr	r1, [pc, #176]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4928      	ldr	r1, [pc, #160]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	4922      	ldr	r1, [pc, #136]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	491e      	ldr	r1, [pc, #120]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	4918      	ldr	r1, [pc, #96]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	4914      	ldr	r1, [pc, #80]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 8001604:	4013      	ands	r3, r2
 8001606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d021      	beq.n	8001658 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
 8001620:	e021      	b.n	8001666 <HAL_GPIO_Init+0x2e2>
 8001622:	bf00      	nop
 8001624:	10320000 	.word	0x10320000
 8001628:	10310000 	.word	0x10310000
 800162c:	10220000 	.word	0x10220000
 8001630:	10210000 	.word	0x10210000
 8001634:	10120000 	.word	0x10120000
 8001638:	10110000 	.word	0x10110000
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	40010800 	.word	0x40010800
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40011000 	.word	0x40011000
 8001650:	40011400 	.word	0x40011400
 8001654:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_GPIO_Init+0x304>)
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	43db      	mvns	r3, r3
 8001660:	4909      	ldr	r1, [pc, #36]	; (8001688 <HAL_GPIO_Init+0x304>)
 8001662:	4013      	ands	r3, r2
 8001664:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	f47f ae8e 	bne.w	8001398 <HAL_GPIO_Init+0x14>
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	372c      	adds	r7, #44	; 0x2c
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a8:	e003      	b.n	80016b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	041a      	lsls	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	611a      	str	r2, [r3, #16]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43d9      	mvns	r1, r3
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	400b      	ands	r3, r1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e12b      	b.n	800195a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff f934 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	; 0x24
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001754:	f002 fdf8 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8001758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a81      	ldr	r2, [pc, #516]	; (8001964 <HAL_I2C_Init+0x274>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d807      	bhi.n	8001774 <HAL_I2C_Init+0x84>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a80      	ldr	r2, [pc, #512]	; (8001968 <HAL_I2C_Init+0x278>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	e006      	b.n	8001782 <HAL_I2C_Init+0x92>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4a7d      	ldr	r2, [pc, #500]	; (800196c <HAL_I2C_Init+0x27c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	bf94      	ite	ls
 800177c:	2301      	movls	r3, #1
 800177e:	2300      	movhi	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0e7      	b.n	800195a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a78      	ldr	r2, [pc, #480]	; (8001970 <HAL_I2C_Init+0x280>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	; (8001964 <HAL_I2C_Init+0x274>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d802      	bhi.n	80017c4 <HAL_I2C_Init+0xd4>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	e009      	b.n	80017d8 <HAL_I2C_Init+0xe8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a69      	ldr	r2, [pc, #420]	; (8001974 <HAL_I2C_Init+0x284>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	3301      	adds	r3, #1
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	495c      	ldr	r1, [pc, #368]	; (8001964 <HAL_I2C_Init+0x274>)
 80017f4:	428b      	cmp	r3, r1
 80017f6:	d819      	bhi.n	800182c <HAL_I2C_Init+0x13c>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e59      	subs	r1, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fbb1 f3f3 	udiv	r3, r1, r3
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	f640 73fc 	movw	r3, #4092	; 0xffc
 800180c:	400b      	ands	r3, r1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <HAL_I2C_Init+0x138>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1e59      	subs	r1, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001826:	e051      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001828:	2304      	movs	r3, #4
 800182a:	e04f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_I2C_Init+0x168>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e58      	subs	r0, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	440b      	add	r3, r1
 8001842:	fbb0 f3f3 	udiv	r3, r0, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e012      	b.n	800187e <HAL_I2C_Init+0x18e>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x196>
 8001882:	2301      	movs	r3, #1
 8001884:	e022      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10e      	bne.n	80018ac <HAL_I2C_Init+0x1bc>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e58      	subs	r0, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	440b      	add	r3, r1
 800189c:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018aa:	e00f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	0099      	lsls	r1, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6809      	ldr	r1, [r1, #0]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6911      	ldr	r1, [r2, #16]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68d2      	ldr	r2, [r2, #12]
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	000186a0 	.word	0x000186a0
 8001968:	001e847f 	.word	0x001e847f
 800196c:	003d08ff 	.word	0x003d08ff
 8001970:	431bde83 	.word	0x431bde83
 8001974:	10624dd3 	.word	0x10624dd3

08001978 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4603      	mov	r3, r0
 8001988:	817b      	strh	r3, [r7, #10]
 800198a:	460b      	mov	r3, r1
 800198c:	813b      	strh	r3, [r7, #8]
 800198e:	4613      	mov	r3, r2
 8001990:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001992:	f7ff f98d 	bl	8000cb0 <HAL_GetTick>
 8001996:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	f040 80d9 	bne.w	8001b58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2319      	movs	r3, #25
 80019ac:	2201      	movs	r2, #1
 80019ae:	496d      	ldr	r1, [pc, #436]	; (8001b64 <HAL_I2C_Mem_Write+0x1ec>)
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 fa9f 	bl	8001ef4 <I2C_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
 80019be:	e0cc      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_I2C_Mem_Write+0x56>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e0c5      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d007      	beq.n	80019f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2221      	movs	r2, #33	; 0x21
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <HAL_I2C_Mem_Write+0x1f0>)
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a36:	88f8      	ldrh	r0, [r7, #6]
 8001a38:	893a      	ldrh	r2, [r7, #8]
 8001a3a:	8979      	ldrh	r1, [r7, #10]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4603      	mov	r3, r0
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f9be 	bl	8001dc8 <I2C_RequestMemoryWrite>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d052      	beq.n	8001af8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e081      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fb20 	bl	80020a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d107      	bne.n	8001a7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_I2C_Mem_Write+0x180>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d017      	beq.n	8001af8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1aa      	bne.n	8001a56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fb0c 	bl	8002122 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00d      	beq.n	8001b2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d107      	bne.n	8001b28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e016      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	00100002 	.word	0x00100002
 8001b68:	ffff0000 	.word	0xffff0000

08001b6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff f898 	bl	8000cb0 <HAL_GetTick>
 8001b80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001b82:	2301      	movs	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	f040 8111 	bne.w	8001db6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2319      	movs	r3, #25
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4988      	ldr	r1, [pc, #544]	; (8001dc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f9a8 	bl	8001ef4 <I2C_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
 8001bac:	e104      	b.n	8001db8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2C_IsDeviceReady+0x50>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e0fd      	b.n	8001db8 <HAL_I2C_IsDeviceReady+0x24c>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d007      	beq.n	8001be2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2224      	movs	r2, #36	; 0x24
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a70      	ldr	r2, [pc, #448]	; (8001dc4 <HAL_I2C_IsDeviceReady+0x258>)
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f966 	bl	8001ef4 <I2C_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00d      	beq.n	8001c4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3c:	d103      	bne.n	8001c46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0b6      	b.n	8001db8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f829 	bl	8000cb0 <HAL_GetTick>
 8001c5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	bf0c      	ite	eq
 8001c6e:	2301      	moveq	r3, #1
 8001c70:	2300      	movne	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c8e:	e025      	b.n	8001cdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7ff f80e 	bl	8000cb0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <HAL_I2C_IsDeviceReady+0x13a>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	22a0      	movs	r2, #160	; 0xa0
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2ba0      	cmp	r3, #160	; 0xa0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_I2C_IsDeviceReady+0x188>
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_I2C_IsDeviceReady+0x188>
 8001cee:	7dbb      	ldrb	r3, [r7, #22]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0cd      	beq.n	8001c90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d129      	bne.n	8001d5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2319      	movs	r3, #25
 8001d36:	2201      	movs	r2, #1
 8001d38:	4921      	ldr	r1, [pc, #132]	; (8001dc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f8da 	bl	8001ef4 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e036      	b.n	8001db8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e02c      	b.n	8001db8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2319      	movs	r3, #25
 8001d7e:	2201      	movs	r2, #1
 8001d80:	490f      	ldr	r1, [pc, #60]	; (8001dc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f8b6 	bl	8001ef4 <I2C_WaitOnFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e012      	b.n	8001db8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f4ff af32 	bcc.w	8001c06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
  }
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	00100002 	.word	0x00100002
 8001dc4:	ffff0000 	.word	0xffff0000

08001dc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f878 	bl	8001ef4 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e18:	d103      	bne.n	8001e22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e05f      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	492d      	ldr	r1, [pc, #180]	; (8001ef0 <I2C_RequestMemoryWrite+0x128>)
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f8b0 	bl	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e04c      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f91a 	bl	80020a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d107      	bne.n	8001e8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02b      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e94:	893b      	ldrh	r3, [r7, #8]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	e021      	b.n	8001ee4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ea0:	893b      	ldrh	r3, [r7, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	6a39      	ldr	r1, [r7, #32]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f8f4 	bl	80020a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d107      	bne.n	8001ed6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e005      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eda:	893b      	ldrh	r3, [r7, #8]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00010002 	.word	0x00010002

08001ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f04:	e025      	b.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d021      	beq.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7fe fecf 	bl	8000cb0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d116      	bne.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e023      	b.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10d      	bne.n	8001f78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	e00c      	b.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4013      	ands	r3, r2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d0b6      	beq.n	8001f06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fb0:	e051      	b.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc0:	d123      	bne.n	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0204 	orr.w	r2, r3, #4
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e046      	b.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d021      	beq.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002012:	f7fe fe4d 	bl	8000cb0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	d302      	bcc.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d116      	bne.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e020      	b.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10c      	bne.n	800207a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4013      	ands	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	e00b      	b.n	8002092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	43da      	mvns	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4013      	ands	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d18d      	bne.n	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ac:	e02d      	b.n	800210a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f878 	bl	80021a4 <I2C_IsAcknowledgeFailed>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e02d      	b.n	800211a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d021      	beq.n	800210a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7fe fdf3 	bl	8000cb0 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d116      	bne.n	800210a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f043 0220 	orr.w	r2, r3, #32
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e007      	b.n	800211a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002114:	2b80      	cmp	r3, #128	; 0x80
 8002116:	d1ca      	bne.n	80020ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800212e:	e02d      	b.n	800218c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f837 	bl	80021a4 <I2C_IsAcknowledgeFailed>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e02d      	b.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d021      	beq.n	800218c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002148:	f7fe fdb2 	bl	8000cb0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	d302      	bcc.n	800215e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d116      	bne.n	800218c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e007      	b.n	800219c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d1ca      	bne.n	8002130 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ba:	d11b      	bne.n	80021f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f043 0204 	orr.w	r2, r3, #4
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	b08b      	sub	sp, #44	; 0x2c
 8002204:	af06      	add	r7, sp, #24
 8002206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0fd      	b.n	800240e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f007 fd7a 	bl	8009d20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2203      	movs	r2, #3
 8002230:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fabf 	bl	80057bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	687e      	ldr	r6, [r7, #4]
 8002246:	466d      	mov	r5, sp
 8002248:	f106 0410 	add.w	r4, r6, #16
 800224c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	602b      	str	r3, [r5, #0]
 8002254:	1d33      	adds	r3, r6, #4
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	6838      	ldr	r0, [r7, #0]
 800225a:	f003 fa89 	bl	8005770 <USB_CoreInit>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0ce      	b.n	800240e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f003 faba 	bl	80057f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e04c      	b.n	800231c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3301      	adds	r3, #1
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	b298      	uxth	r0, r3
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3336      	adds	r3, #54	; 0x36
 80022c0:	4602      	mov	r2, r0
 80022c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	3303      	adds	r3, #3
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3338      	adds	r3, #56	; 0x38
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	333c      	adds	r3, #60	; 0x3c
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	3340      	adds	r3, #64	; 0x40
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	3301      	adds	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d3ad      	bcc.n	8002282 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e044      	b.n	80023b6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3b5      	bcc.n	800232c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	687e      	ldr	r6, [r7, #4]
 80023c8:	466d      	mov	r5, sp
 80023ca:	f106 0410 	add.w	r4, r6, #16
 80023ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	602b      	str	r3, [r5, #0]
 80023d6:	1d33      	adds	r3, r6, #4
 80023d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	f003 fa14 	bl	8005808 <USB_DevInit>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00d      	b.n	800240e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f005 fec6 	bl	8008198 <USB_DevDisconnect>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002416 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_PCD_Start+0x16>
 8002428:	2302      	movs	r3, #2
 800242a:	e016      	b.n	800245a <HAL_PCD_Start+0x44>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 f9a9 	bl	8005790 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800243e:	2101      	movs	r1, #1
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f007 fee0 	bl	800a206 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f005 fe9a 	bl	8008184 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b088      	sub	sp, #32
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f005 fe9c 	bl	80081ac <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247e:	d102      	bne.n	8002486 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb5f 	bl	8002b44 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f005 fe8e 	bl	80081ac <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249a:	d112      	bne.n	80024c2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ae:	b292      	uxth	r2, r2
 80024b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f007 fcae 	bl	8009e16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024ba:	2100      	movs	r1, #0
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f923 	bl	8002708 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f005 fe70 	bl	80081ac <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024d6:	d10b      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024ea:	b292      	uxth	r2, r2
 80024ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f005 fe59 	bl	80081ac <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d10b      	bne.n	800251e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800250e:	b29a      	uxth	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002518:	b292      	uxth	r2, r2
 800251a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f005 fe42 	bl	80081ac <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	d126      	bne.n	8002582 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0204 	bic.w	r2, r2, #4
 8002546:	b292      	uxth	r2, r2
 8002548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0208 	bic.w	r2, r2, #8
 800255e:	b292      	uxth	r2, r2
 8002560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f007 fc8f 	bl	8009e88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800257c:	b292      	uxth	r2, r2
 800257e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f005 fe10 	bl	80081ac <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002596:	f040 8082 	bne.w	800269e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	77fb      	strb	r3, [r7, #31]
 800259e:	e010      	b.n	80025c2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	441a      	add	r2, r3
 80025ac:	7ffb      	ldrb	r3, [r7, #31]
 80025ae:	8812      	ldrh	r2, [r2, #0]
 80025b0:	b292      	uxth	r2, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	3320      	adds	r3, #32
 80025b6:	443b      	add	r3, r7
 80025b8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
 80025be:	3301      	adds	r3, #1
 80025c0:	77fb      	strb	r3, [r7, #31]
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d9eb      	bls.n	80025a0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	b292      	uxth	r2, r2
 80025dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	b292      	uxth	r2, r2
 80025f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80025f8:	bf00      	nop
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002602:	b29b      	uxth	r3, r3
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f6      	beq.n	80025fa <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261e:	b292      	uxth	r2, r2
 8002620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002624:	2300      	movs	r3, #0
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e00f      	b.n	800264a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	4611      	mov	r1, r2
 8002632:	7ffa      	ldrb	r2, [r7, #31]
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	440a      	add	r2, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	3320      	adds	r3, #32
 800263c:	443b      	add	r3, r7
 800263e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002642:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002644:	7ffb      	ldrb	r3, [r7, #31]
 8002646:	3301      	adds	r3, #1
 8002648:	77fb      	strb	r3, [r7, #31]
 800264a:	7ffb      	ldrb	r3, [r7, #31]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d9ec      	bls.n	800262a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002658:	b29a      	uxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	b292      	uxth	r2, r2
 8002664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002670:	b29a      	uxth	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800267a:	b292      	uxth	r2, r2
 800267c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0204 	orr.w	r2, r2, #4
 8002692:	b292      	uxth	r2, r2
 8002694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f007 fbdb 	bl	8009e54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f005 fd82 	bl	80081ac <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b2:	d10e      	bne.n	80026d2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026c6:	b292      	uxth	r2, r2
 80026c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f007 fb94 	bl	8009dfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 fd68 	bl	80081ac <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d10b      	bne.n	8002700 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fa:	b292      	uxth	r2, r2
 80026fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_PCD_SetAddress+0x1a>
 800271e:	2302      	movs	r3, #2
 8002720:	e013      	b.n	800274a <HAL_PCD_SetAddress+0x42>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f005 fd0f 	bl	800815e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	461a      	mov	r2, r3
 8002760:	4603      	mov	r3, r0
 8002762:	70fb      	strb	r3, [r7, #3]
 8002764:	460b      	mov	r3, r1
 8002766:	803b      	strh	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0e      	bge.n	8002796 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	705a      	strb	r2, [r3, #1]
 8002794:	e00e      	b.n	80027b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 0207 	and.w	r2, r3, #7
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027c0:	883a      	ldrh	r2, [r7, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	78ba      	ldrb	r2, [r7, #2]
 80027ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027de:	78bb      	ldrb	r3, [r7, #2]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d102      	bne.n	80027ea <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_PCD_EP_Open+0xa6>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e00e      	b.n	8002816 <HAL_PCD_EP_Open+0xc4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f003 f81e 	bl	8005848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002814:	7afb      	ldrb	r3, [r7, #11]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800282a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	da0e      	bge.n	8002850 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	705a      	strb	r2, [r3, #1]
 800284e:	e00e      	b.n	800286e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 0207 	and.w	r2, r3, #7
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_PCD_EP_Close+0x6a>
 8002884:	2302      	movs	r3, #2
 8002886:	e00e      	b.n	80028a6 <HAL_PCD_EP_Close+0x88>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fb40 	bl	8005f1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	460b      	mov	r3, r1
 80028bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	f003 0207 	and.w	r2, r3, #7
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ee:	7afb      	ldrb	r3, [r7, #11]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6979      	ldr	r1, [r7, #20]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fcf2 	bl	80062f4 <USB_EPStartXfer>
 8002910:	e005      	b.n	800291e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6979      	ldr	r1, [r7, #20]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fceb 	bl	80062f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	f003 0207 	and.w	r2, r3, #7
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	460b      	mov	r3, r1
 8002964:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2201      	movs	r2, #1
 80029a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ae:	7afb      	ldrb	r3, [r7, #11]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6979      	ldr	r1, [r7, #20]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fc98 	bl	80062f4 <USB_EPStartXfer>
 80029c4:	e005      	b.n	80029d2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fc91 	bl	80062f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 0207 	and.w	r2, r3, #7
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d901      	bls.n	80029fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e04c      	b.n	8002a94 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da0e      	bge.n	8002a20 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	705a      	strb	r2, [r3, #1]
 8002a1e:	e00c      	b.n	8002a3a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_PCD_EP_SetStall+0x7e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e01c      	b.n	8002a94 <HAL_PCD_EP_SetStall+0xb8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 fa7b 	bl	8007f64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d108      	bne.n	8002a8a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f005 fba0 	bl	80081ca <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 020f 	and.w	r2, r3, #15
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d901      	bls.n	8002aba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e040      	b.n	8002b3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da0e      	bge.n	8002ae0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2201      	movs	r2, #1
 8002adc:	705a      	strb	r2, [r3, #1]
 8002ade:	e00e      	b.n	8002afe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 0207 	and.w	r2, r3, #7
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_EP_ClrStall+0x82>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e00e      	b.n	8002b3c <HAL_PCD_EP_ClrStall+0xa0>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f005 fa69 	bl	8008004 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08e      	sub	sp, #56	; 0x38
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b4c:	e2ec      	b.n	8003128 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b56:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002b64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 8161 	bne.w	8002e30 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d152      	bne.n	8002c1e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	81fb      	strh	r3, [r7, #14]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	89fb      	ldrh	r3, [r7, #14]
 8002b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3328      	adds	r3, #40	; 0x28
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bdc:	2100      	movs	r1, #0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f007 f8f1 	bl	8009dc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 829b 	beq.w	8003128 <PCD_EP_ISR_Handler+0x5e4>
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 8296 	bne.w	8003128 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c1c:	e284      	b.n	8003128 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d034      	beq.n	8002ca2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3306      	adds	r3, #6
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f005 faf7 	bl	800826a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c88:	4013      	ands	r3, r2
 8002c8a:	823b      	strh	r3, [r7, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	8a3a      	ldrh	r2, [r7, #16]
 8002c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c96:	b292      	uxth	r2, r2
 8002c98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f007 f866 	bl	8009d6c <HAL_PCD_SetupStageCallback>
 8002ca0:	e242      	b.n	8003128 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ca2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f280 823e 	bge.w	8003128 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cb8:	4013      	ands	r3, r2
 8002cba:	83bb      	strh	r3, [r7, #28]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	8bba      	ldrh	r2, [r7, #28]
 8002cc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3306      	adds	r3, #6
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <PCD_EP_ISR_Handler+0x1ee>
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	6959      	ldr	r1, [r3, #20]
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f005 faa7 	bl	800826a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	441a      	add	r2, r3
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f007 f82f 	bl	8009d90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 81f2 	bne.w	8003128 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4413      	add	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d112      	bne.n	8002d92 <PCD_EP_ISR_Handler+0x24e>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	801a      	strh	r2, [r3, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	e02f      	b.n	8002df2 <PCD_EP_ISR_Handler+0x2ae>
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b3e      	cmp	r3, #62	; 0x3e
 8002d98:	d813      	bhi.n	8002dc2 <PCD_EP_ISR_Handler+0x27e>
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <PCD_EP_ISR_Handler+0x270>
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	3301      	adds	r3, #1
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e017      	b.n	8002df2 <PCD_EP_ISR_Handler+0x2ae>
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <PCD_EP_ISR_Handler+0x298>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	029b      	lsls	r3, r3, #10
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	827b      	strh	r3, [r7, #18]
 8002e04:	8a7b      	ldrh	r3, [r7, #18]
 8002e06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e0a:	827b      	strh	r3, [r7, #18]
 8002e0c:	8a7b      	ldrh	r3, [r7, #18]
 8002e0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e12:	827b      	strh	r3, [r7, #18]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	8a7b      	ldrh	r3, [r7, #18]
 8002e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	8013      	strh	r3, [r2, #0]
 8002e2e:	e17b      	b.n	8003128 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f280 80ea 	bge.w	8003020 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e62:	4013      	ands	r3, r2
 8002e64:	853b      	strh	r3, [r7, #40]	; 0x28
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	7b1b      	ldrb	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d122      	bne.n	8002ee2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3306      	adds	r3, #6
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002ec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8087 	beq.w	8002fdc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	6959      	ldr	r1, [r3, #20]
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	88da      	ldrh	r2, [r3, #6]
 8002eda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002edc:	f005 f9c5 	bl	800826a <USB_ReadPMA>
 8002ee0:	e07c      	b.n	8002fdc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d108      	bne.n	8002efc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002eea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002eec:	461a      	mov	r2, r3
 8002eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f927 	bl	8003144 <HAL_PCD_EP_DB_Receive>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002efa:	e06f      	b.n	8002fdc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d021      	beq.n	8002f9a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d02a      	beq.n	8002fdc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	6959      	ldr	r1, [r3, #20]
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	891a      	ldrh	r2, [r3, #8]
 8002f92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f94:	f005 f969 	bl	800826a <USB_ReadPMA>
 8002f98:	e020      	b.n	8002fdc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	3306      	adds	r3, #6
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fc2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002fc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	6959      	ldr	r1, [r3, #20]
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	895a      	ldrh	r2, [r3, #10]
 8002fd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fd8:	f005 f947 	bl	800826a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fe2:	441a      	add	r2, r3
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fee:	441a      	add	r2, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <PCD_EP_ISR_Handler+0x4c2>
 8002ffc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	429a      	cmp	r2, r3
 8003004:	d206      	bcs.n	8003014 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f006 febf 	bl	8009d90 <HAL_PCD_DataOutStageCallback>
 8003012:	e005      	b.n	8003020 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f003 f96a 	bl	80062f4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003020:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d07e      	beq.n	8003128 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800302a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	843b      	strh	r3, [r7, #32]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	441a      	add	r2, r3
 8003068:	8c3b      	ldrh	r3, [r7, #32]
 800306a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800306e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003072:	b29b      	uxth	r3, r3
 8003074:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	78db      	ldrb	r3, [r3, #3]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d00c      	beq.n	8003098 <PCD_EP_ISR_Handler+0x554>
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	78db      	ldrb	r3, [r3, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800308a:	2b02      	cmp	r3, #2
 800308c:	d146      	bne.n	800311c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800308e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d141      	bne.n	800311c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	3302      	adds	r3, #2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	8bfb      	ldrh	r3, [r7, #30]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d906      	bls.n	80030da <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	8bfb      	ldrh	r3, [r7, #30]
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	619a      	str	r2, [r3, #24]
 80030d8:	e002      	b.n	80030e0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f006 fe69 	bl	8009dc6 <HAL_PCD_DataInStageCallback>
 80030f4:	e018      	b.n	8003128 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	8bfb      	ldrh	r3, [r7, #30]
 80030fc:	441a      	add	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	8bfb      	ldrh	r3, [r7, #30]
 8003108:	441a      	add	r2, r3
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003114:	4618      	mov	r0, r3
 8003116:	f003 f8ed 	bl	80062f4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800311a:	e005      	b.n	8003128 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800311c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800311e:	461a      	mov	r2, r3
 8003120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f91b 	bl	800335e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003130:	b29b      	uxth	r3, r3
 8003132:	b21b      	sxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f6ff ad0a 	blt.w	8002b4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3738      	adds	r7, #56	; 0x38
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d07e      	beq.n	800325a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003164:	b29b      	uxth	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	3302      	adds	r3, #2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003184:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	8b7b      	ldrh	r3, [r7, #26]
 800318c:	429a      	cmp	r2, r3
 800318e:	d306      	bcc.n	800319e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	8b7b      	ldrh	r3, [r7, #26]
 8003196:	1ad2      	subs	r2, r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	619a      	str	r2, [r3, #24]
 800319c:	e002      	b.n	80031a4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d123      	bne.n	80031f4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	833b      	strh	r3, [r7, #24]
 80031c8:	8b3b      	ldrh	r3, [r7, #24]
 80031ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031ce:	833b      	strh	r3, [r7, #24]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	441a      	add	r2, r3
 80031de:	8b3b      	ldrh	r3, [r7, #24]
 80031e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01f      	beq.n	800323e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003218:	82fb      	strh	r3, [r7, #22]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	8afb      	ldrh	r3, [r7, #22]
 800322a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003236:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800323a:	b29b      	uxth	r3, r3
 800323c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800323e:	8b7b      	ldrh	r3, [r7, #26]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8087 	beq.w	8003354 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6959      	ldr	r1, [r3, #20]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	891a      	ldrh	r2, [r3, #8]
 8003252:	8b7b      	ldrh	r3, [r7, #26]
 8003254:	f005 f809 	bl	800826a <USB_ReadPMA>
 8003258:	e07c      	b.n	8003354 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	3306      	adds	r3, #6
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003282:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	8b7b      	ldrh	r3, [r7, #26]
 800328a:	429a      	cmp	r2, r3
 800328c:	d306      	bcc.n	800329c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	8b7b      	ldrh	r3, [r7, #26]
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	619a      	str	r2, [r3, #24]
 800329a:	e002      	b.n	80032a2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d123      	bne.n	80032f2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c4:	83fb      	strh	r3, [r7, #30]
 80032c6:	8bfb      	ldrh	r3, [r7, #30]
 80032c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032cc:	83fb      	strh	r3, [r7, #30]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	8bfb      	ldrh	r3, [r7, #30]
 80032de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11f      	bne.n	800333c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	83bb      	strh	r3, [r7, #28]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	441a      	add	r2, r3
 8003326:	8bbb      	ldrh	r3, [r7, #28]
 8003328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003338:	b29b      	uxth	r3, r3
 800333a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800333c:	8b7b      	ldrh	r3, [r7, #26]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6959      	ldr	r1, [r3, #20]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	895a      	ldrh	r2, [r3, #10]
 800334e:	8b7b      	ldrh	r3, [r7, #26]
 8003350:	f004 ff8b 	bl	800826a <USB_ReadPMA>
    }
  }

  return count;
 8003354:	8b7b      	ldrh	r3, [r7, #26]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b0a2      	sub	sp, #136	; 0x88
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	4613      	mov	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 81c7 	beq.w	8003706 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	3302      	adds	r3, #2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d907      	bls.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033b8:	1ad2      	subs	r2, r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	619a      	str	r2, [r3, #24]
 80033be:	e002      	b.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 80b9 	bne.w	8003542 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d126      	bne.n	8003426 <HAL_PCD_EP_DB_Transmit+0xc8>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	4413      	add	r3, r2
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	011a      	lsls	r2, r3, #4
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	4413      	add	r3, r2
 80033fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800340a:	b29a      	uxth	r2, r3
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800341e:	b29a      	uxth	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	e01a      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d116      	bne.n	800345c <HAL_PCD_EP_DB_Transmit+0xfe>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343c:	b29b      	uxth	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	4413      	add	r3, r2
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	011a      	lsls	r2, r3, #4
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	4413      	add	r3, r2
 8003450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	2200      	movs	r2, #0
 800345a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d126      	bne.n	80034b8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4413      	add	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	011a      	lsls	r2, r3, #4
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4413      	add	r3, r2
 800348c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800349c:	b29a      	uxth	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	e017      	b.n	80034e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	785b      	ldrb	r3, [r3, #1]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d113      	bne.n	80034e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	4413      	add	r3, r2
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	011a      	lsls	r2, r3, #4
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	4413      	add	r3, r2
 80034dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2200      	movs	r2, #0
 80034e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f006 fc69 	bl	8009dc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 82d4 	beq.w	8003aa8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	827b      	strh	r3, [r7, #18]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	8a7b      	ldrh	r3, [r7, #18]
 800352c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353c:	b29b      	uxth	r3, r3
 800353e:	8013      	strh	r3, [r2, #0]
 8003540:	e2b2      	b.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d021      	beq.n	8003590 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800357c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	b29b      	uxth	r3, r3
 800358e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003596:	2b01      	cmp	r3, #1
 8003598:	f040 8286 	bne.w	8003aa8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a4:	441a      	add	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035b2:	441a      	add	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d309      	bcc.n	80035d8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d0:	1ad2      	subs	r2, r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	621a      	str	r2, [r3, #32]
 80035d6:	e015      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80035e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035ee:	e009      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d155      	bne.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	4413      	add	r3, r2
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	011a      	lsls	r2, r3, #4
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	4413      	add	r3, r2
 800362e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
 8003634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003636:	2b00      	cmp	r3, #0
 8003638:	d112      	bne.n	8003660 <HAL_PCD_EP_DB_Transmit+0x302>
 800363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003644:	b29a      	uxth	r2, r3
 8003646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003658:	b29a      	uxth	r2, r3
 800365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	e047      	b.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003662:	2b3e      	cmp	r3, #62	; 0x3e
 8003664:	d811      	bhi.n	800368a <HAL_PCD_EP_DB_Transmit+0x32c>
 8003666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	64bb      	str	r3, [r7, #72]	; 0x48
 800366c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_PCD_EP_DB_Transmit+0x31e>
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003678:	3301      	adds	r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
 800367c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367e:	b29b      	uxth	r3, r3
 8003680:	029b      	lsls	r3, r3, #10
 8003682:	b29a      	uxth	r2, r3
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	801a      	strh	r2, [r3, #0]
 8003688:	e032      	b.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x392>
 800368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x342>
 800369a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369c:	3b01      	subs	r3, #1
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
 80036a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e01b      	b.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x392>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d117      	bne.n	80036f0 <HAL_PCD_EP_DB_Transmit+0x392>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	643b      	str	r3, [r7, #64]	; 0x40
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d4:	4413      	add	r3, r2
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	011a      	lsls	r2, r3, #4
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	4413      	add	r3, r2
 80036e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	6959      	ldr	r1, [r3, #20]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	891a      	ldrh	r2, [r3, #8]
 80036fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f004 fd6e 	bl	80081e0 <USB_WritePMA>
 8003704:	e1d0      	b.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800370e:	b29b      	uxth	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	3306      	adds	r3, #6
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800373a:	429a      	cmp	r2, r3
 800373c:	d307      	bcc.n	800374e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003746:	1ad2      	subs	r2, r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	619a      	str	r2, [r3, #24]
 800374c:	e002      	b.n	8003754 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 80c4 	bne.w	80038e6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	785b      	ldrb	r3, [r3, #1]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d126      	bne.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x456>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003774:	b29b      	uxth	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377a:	4413      	add	r3, r2
 800377c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	011a      	lsls	r2, r3, #4
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	4413      	add	r3, r2
 8003788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800378c:	66bb      	str	r3, [r7, #104]	; 0x68
 800378e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003798:	b29a      	uxth	r2, r3
 800379a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b0:	801a      	strh	r2, [r3, #0]
 80037b2:	e01a      	b.n	80037ea <HAL_PCD_EP_DB_Transmit+0x48c>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d116      	bne.n	80037ea <HAL_PCD_EP_DB_Transmit+0x48c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	677b      	str	r3, [r7, #116]	; 0x74
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d0:	4413      	add	r3, r2
 80037d2:	677b      	str	r3, [r7, #116]	; 0x74
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	011a      	lsls	r2, r3, #4
 80037da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037dc:	4413      	add	r3, r2
 80037de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037e2:	673b      	str	r3, [r7, #112]	; 0x70
 80037e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e6:	2200      	movs	r2, #0
 80037e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d12f      	bne.n	8003858 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003808:	b29b      	uxth	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003810:	4413      	add	r3, r2
 8003812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	011a      	lsls	r2, r3, #4
 800381c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003820:	4413      	add	r3, r2
 8003822:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800382a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003836:	b29a      	uxth	r2, r3
 8003838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384e:	b29a      	uxth	r2, r3
 8003850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	e017      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d113      	bne.n	8003888 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800386e:	4413      	add	r3, r2
 8003870:	67bb      	str	r3, [r7, #120]	; 0x78
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	011a      	lsls	r2, r3, #4
 8003878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387a:	4413      	add	r3, r2
 800387c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003880:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	4619      	mov	r1, r3
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f006 fa99 	bl	8009dc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 8104 	bne.w	8003aa8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	441a      	add	r2, r3
 80038cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	8013      	strh	r3, [r2, #0]
 80038e4:	e0e0      	b.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d121      	bne.n	8003934 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	441a      	add	r2, r3
 800391c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800392c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003930:	b29b      	uxth	r3, r3
 8003932:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800393a:	2b01      	cmp	r3, #1
 800393c:	f040 80b4 	bne.w	8003aa8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003948:	441a      	add	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003956:	441a      	add	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d309      	bcc.n	800397c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003974:	1ad2      	subs	r2, r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	621a      	str	r2, [r3, #32]
 800397a:	e015      	b.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d107      	bne.n	8003994 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003984:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003988:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003992:	e009      	b.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	667b      	str	r3, [r7, #100]	; 0x64
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d155      	bne.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x704>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ca:	4413      	add	r3, r2
 80039cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	011a      	lsls	r2, r3, #4
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	4413      	add	r3, r2
 80039d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80039de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d112      	bne.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x6ac>
 80039e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	e044      	b.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x736>
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003a0e:	d811      	bhi.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	657b      	str	r3, [r7, #84]	; 0x54
 8003a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a22:	3301      	adds	r3, #1
 8003a24:	657b      	str	r3, [r7, #84]	; 0x54
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	e02f      	b.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x736>
 8003a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	657b      	str	r3, [r7, #84]	; 0x54
 8003a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a46:	3b01      	subs	r3, #1
 8003a48:	657b      	str	r3, [r7, #84]	; 0x54
 8003a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	029b      	lsls	r3, r3, #10
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	e018      	b.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x736>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	785b      	ldrb	r3, [r3, #1]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d114      	bne.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x736>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a78:	4413      	add	r3, r2
 8003a7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	011a      	lsls	r2, r3, #4
 8003a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a92:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6959      	ldr	r1, [r3, #20]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	895a      	ldrh	r2, [r3, #10]
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f004 fb9c 	bl	80081e0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac2:	823b      	strh	r3, [r7, #16]
 8003ac4:	8a3b      	ldrh	r3, [r7, #16]
 8003ac6:	f083 0310 	eor.w	r3, r3, #16
 8003aca:	823b      	strh	r3, [r7, #16]
 8003acc:	8a3b      	ldrh	r3, [r7, #16]
 8003ace:	f083 0320 	eor.w	r3, r3, #32
 8003ad2:	823b      	strh	r3, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	8a3b      	ldrh	r3, [r7, #16]
 8003ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3788      	adds	r7, #136	; 0x88
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	817b      	strh	r3, [r7, #10]
 8003b10:	4613      	mov	r3, r2
 8003b12:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b14:	897b      	ldrh	r3, [r7, #10]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	897b      	ldrh	r3, [r7, #10]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e009      	b.n	8003b4c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b38:	897a      	ldrh	r2, [r7, #10]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b4c:	893b      	ldrh	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d107      	bne.n	8003b62 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	80da      	strh	r2, [r3, #6]
 8003b60:	e00b      	b.n	8003b7a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2201      	movs	r2, #1
 8003b66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	0c1b      	lsrs	r3, r3, #16
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	420e0020 	.word	0x420e0020

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e272      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8087 	beq.w	8003cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc0:	4b92      	ldr	r3, [pc, #584]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d00c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bcc:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d112      	bne.n	8003bfe <HAL_RCC_OscConfig+0x5e>
 8003bd8:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d06c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x12c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d168      	bne.n	8003ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e24c      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x76>
 8003c08:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a7f      	ldr	r2, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e02e      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x98>
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7a      	ldr	r2, [pc, #488]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b78      	ldr	r3, [pc, #480]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a77      	ldr	r2, [pc, #476]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0xbc>
 8003c42:	4b72      	ldr	r3, [pc, #456]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a71      	ldr	r2, [pc, #452]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6e      	ldr	r2, [pc, #440]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c5c:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6a      	ldr	r2, [pc, #424]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f818 	bl	8000cb0 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd f814 	bl	8000cb0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e200      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xe4>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f804 	bl	8000cb0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd f800 	bl	8000cb0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1ec      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x10c>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cda:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x18c>
 8003cf2:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x176>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1c0      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4939      	ldr	r1, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fc ffb9 	bl	8000cb0 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fc ffb5 	bl	8000cb0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1a1      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4927      	ldr	r1, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fc ff98 	bl	8000cb0 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fc ff94 	bl	8000cb0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e180      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d03a      	beq.n	8003e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d019      	beq.n	8003dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbc:	f7fc ff78 	bl	8000cb0 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fc ff74 	bl	8000cb0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e160      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f000 fad8 	bl	8004398 <RCC_Delay>
 8003de8:	e01c      	b.n	8003e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fc ff5e 	bl	8000cb0 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df6:	e00f      	b.n	8003e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df8:	f7fc ff5a 	bl	8000cb0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d908      	bls.n	8003e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e146      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	42420000 	.word	0x42420000
 8003e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	4b92      	ldr	r3, [pc, #584]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e9      	bne.n	8003df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a6 	beq.w	8003f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b8b      	ldr	r3, [pc, #556]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	61d3      	str	r3, [r2, #28]
 8003e4e:	4b85      	ldr	r3, [pc, #532]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b82      	ldr	r3, [pc, #520]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fc ff1b 	bl	8000cb0 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fc ff17 	bl	8000cb0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e103      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b75      	ldr	r3, [pc, #468]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x312>
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	e02d      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x334>
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a69      	ldr	r2, [pc, #420]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	4b67      	ldr	r3, [pc, #412]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a66      	ldr	r2, [pc, #408]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6213      	str	r3, [r2, #32]
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x356>
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4a60      	ldr	r2, [pc, #384]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6213      	str	r3, [r2, #32]
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6213      	str	r3, [r2, #32]
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003ef6:	4b5b      	ldr	r3, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a5a      	ldr	r2, [pc, #360]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6213      	str	r3, [r2, #32]
 8003f02:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fc fecb 	bl	8000cb0 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fc fec7 	bl	8000cb0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0b1      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x37e>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fc feb5 	bl	8000cb0 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fc feb1 	bl	8000cb0 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e09b      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	4b40      	ldr	r3, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8087 	beq.w	8004096 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d061      	beq.n	8004058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d146      	bne.n	800402a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b33      	ldr	r3, [pc, #204]	; (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fc fe85 	bl	8000cb0 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fc fe81 	bl	8000cb0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e06d      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4921      	ldr	r1, [pc, #132]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a19      	ldr	r1, [r3, #32]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	491b      	ldr	r1, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fc fe55 	bl	8000cb0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7fc fe51 	bl	8000cb0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e03d      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x46a>
 8004028:	e035      	b.n	8004096 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCC_OscConfig+0x4cc>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fc fe3e 	bl	8000cb0 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fc fe3a 	bl	8000cb0 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e026      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x498>
 8004056:	e01e      	b.n	8004096 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e019      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
 800406c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_OscConfig+0x500>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	429a      	cmp	r2, r3
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0d0      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d910      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	4965      	ldr	r1, [pc, #404]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800410a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d040      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d115      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e073      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06b      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b39      	ldr	r3, [pc, #228]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4936      	ldr	r1, [pc, #216]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004194:	f7fc fd8c 	bl	8000cb0 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fc fd88 	bl	8000cb0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e053      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d210      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 0207 	bic.w	r2, r3, #7
 80041da:	4922      	ldr	r1, [pc, #136]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f821 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	490a      	ldr	r1, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1cc>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1d0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc fcea 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40022000 	.word	0x40022000
 8004268:	40021000 	.word	0x40021000
 800426c:	0800a9a8 	.word	0x0800a9a8
 8004270:	20000000 	.word	0x20000000
 8004274:	20000004 	.word	0x20000004

08004278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	b490      	push	{r4, r7}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800427e:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCC_GetSysClockFreq+0xac>)
 8004280:	1d3c      	adds	r4, r7, #4
 8004282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004288:	f240 2301 	movw	r3, #513	; 0x201
 800428c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	2300      	movs	r3, #0
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042a2:	4b21      	ldr	r3, [pc, #132]	; (8004328 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x40>
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x46>
 80042b6:	e02b      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <HAL_RCC_GetSysClockFreq+0xb4>)
 80042ba:	623b      	str	r3, [r7, #32]
      break;
 80042bc:	e02b      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	0c9b      	lsrs	r3, r3, #18
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	3328      	adds	r3, #40	; 0x28
 80042c8:	443b      	add	r3, r7
 80042ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d012      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	0c5b      	lsrs	r3, r3, #17
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	3328      	adds	r3, #40	; 0x28
 80042e6:	443b      	add	r3, r7
 80042e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_RCC_GetSysClockFreq+0xb4>)
 80042f2:	fb03 f202 	mul.w	r2, r3, r2
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	e004      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	623b      	str	r3, [r7, #32]
      break;
 800430e:	e002      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004312:	623b      	str	r3, [r7, #32]
      break;
 8004314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004316:	6a3b      	ldr	r3, [r7, #32]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3728      	adds	r7, #40	; 0x28
 800431c:	46bd      	mov	sp, r7
 800431e:	bc90      	pop	{r4, r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	0800a940 	.word	0x0800a940
 8004328:	40021000 	.word	0x40021000
 800432c:	007a1200 	.word	0x007a1200
 8004330:	003d0900 	.word	0x003d0900

08004334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004338:	4b02      	ldr	r3, [pc, #8]	; (8004344 <HAL_RCC_GetHCLKFreq+0x10>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	20000000 	.word	0x20000000

08004348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800434c:	f7ff fff2 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004350:	4602      	mov	r2, r0
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	4903      	ldr	r1, [pc, #12]	; (800436c <HAL_RCC_GetPCLK1Freq+0x24>)
 800435e:	5ccb      	ldrb	r3, [r1, r3]
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000
 800436c:	0800a9b8 	.word	0x0800a9b8

08004370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004374:	f7ff ffde 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	0adb      	lsrs	r3, r3, #11
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	0800a9b8 	.word	0x0800a9b8

08004398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <RCC_Delay+0x34>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <RCC_Delay+0x38>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	0a5b      	lsrs	r3, r3, #9
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043b4:	bf00      	nop
  }
  while (Delay --);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1e5a      	subs	r2, r3, #1
 80043ba:	60fa      	str	r2, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f9      	bne.n	80043b4 <RCC_Delay+0x1c>
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	20000000 	.word	0x20000000
 80043d0:	10624dd3 	.word	0x10624dd3

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d07d      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043f0:	2300      	movs	r3, #0
 80043f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f4:	4b4f      	ldr	r3, [pc, #316]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	4a4b      	ldr	r2, [pc, #300]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	61d3      	str	r3, [r2, #28]
 800440c:	4b49      	ldr	r3, [pc, #292]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	4b46      	ldr	r3, [pc, #280]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d118      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004428:	4b43      	ldr	r3, [pc, #268]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a42      	ldr	r2, [pc, #264]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800442e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004434:	f7fc fc3c 	bl	8000cb0 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443a:	e008      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443c:	f7fc fc38 	bl	8000cb0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e06d      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b3a      	ldr	r3, [pc, #232]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02e      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d027      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004478:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004480:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004482:	4b2e      	ldr	r3, [pc, #184]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004488:	4b2c      	ldr	r3, [pc, #176]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800448e:	4a29      	ldr	r2, [pc, #164]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d014      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fc fc07 	bl	8000cb0 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a4:	e00a      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fc fc03 	bl	8000cb0 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e036      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ee      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4917      	ldr	r1, [pc, #92]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	490b      	ldr	r1, [pc, #44]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004506:	4313      	orrs	r3, r2
 8004508:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
 800453c:	42420440 	.word	0x42420440

08004540 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b08d      	sub	sp, #52	; 0x34
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004548:	4b58      	ldr	r3, [pc, #352]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800454a:	f107 040c 	add.w	r4, r7, #12
 800454e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004554:	f240 2301 	movw	r3, #513	; 0x201
 8004558:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	2300      	movs	r3, #0
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	2300      	movs	r3, #0
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b10      	cmp	r3, #16
 8004578:	f200 808e 	bhi.w	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d049      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d079      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004588:	e086      	b.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800458a:	4b49      	ldr	r3, [pc, #292]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004590:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d07f      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	0c9b      	lsrs	r3, r3, #18
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	3330      	adds	r3, #48	; 0x30
 80045a6:	443b      	add	r3, r7
 80045a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045ac:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045b8:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	0c5b      	lsrs	r3, r3, #17
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	3330      	adds	r3, #48	; 0x30
 80045c4:	443b      	add	r3, r7
 80045c6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045d6:	4a37      	ldr	r2, [pc, #220]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	fbb2 f2f3 	udiv	r2, r2, r3
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e6:	e004      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	4a33      	ldr	r2, [pc, #204]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045f2:	4b2f      	ldr	r3, [pc, #188]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fe:	d102      	bne.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004604:	e04a      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004614:	e042      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004626:	d108      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
 8004638:	e01f      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d109      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004652:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
 8004658:	e00f      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004664:	d11c      	bne.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004672:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004678:	e012      	b.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800467a:	e011      	b.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800467c:	f7ff fe78 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	0b9b      	lsrs	r3, r3, #14
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	3301      	adds	r3, #1
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004696:	e004      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004698:	bf00      	nop
 800469a:	e002      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80046a0:	bf00      	nop
    }
  }
  return (frequency);
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3734      	adds	r7, #52	; 0x34
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd90      	pop	{r4, r7, pc}
 80046ac:	0800a950 	.word	0x0800a950
 80046b0:	40021000 	.word	0x40021000
 80046b4:	007a1200 	.word	0x007a1200
 80046b8:	003d0900 	.word	0x003d0900
 80046bc:	aaaaaaab 	.word	0xaaaaaaab

080046c0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e084      	b.n	80047e0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7c5b      	ldrb	r3, [r3, #17]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc f98a 	bl	8000a00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f87a 	bl	80047ec <HAL_RTC_WaitForSynchro>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e06b      	b.n	80047e0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f89c 	bl	8004846 <RTC_EnterInitMode>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2204      	movs	r2, #4
 8004718:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e060      	b.n	80047e0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0207 	bic.w	r2, r2, #7
 800472c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <HAL_RTC_Init+0x128>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <HAL_RTC_Init+0x128>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004742:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_RTC_Init+0x128>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4926      	ldr	r1, [pc, #152]	; (80047e8 <HAL_RTC_Init+0x128>)
 8004750:	4313      	orrs	r3, r2
 8004752:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d003      	beq.n	8004766 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e00e      	b.n	8004784 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004766:	2001      	movs	r0, #1
 8004768:	f7ff feea 	bl	8004540 <HAL_RCCEx_GetPeriphCLKFreq>
 800476c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2204      	movs	r2, #4
 8004778:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e030      	b.n	80047e0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b01      	subs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 010f 	bic.w	r1, r3, #15
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	0c1a      	lsrs	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	b291      	uxth	r1, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f870 	bl	8004896 <RTC_ExitInitMode>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2204      	movs	r2, #4
 80047c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00c      	b.n	80047e0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40006c00 	.word	0x40006c00

080047ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e01d      	b.n	800483e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004812:	f7fc fa4d 	bl	8000cb0 <HAL_GetTick>
 8004816:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004818:	e009      	b.n	800482e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800481a:	f7fc fa49 	bl	8000cb0 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004828:	d901      	bls.n	800482e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e007      	b.n	800483e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ee      	beq.n	800481a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004852:	f7fc fa2d 	bl	8000cb0 <HAL_GetTick>
 8004856:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004858:	e009      	b.n	800486e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800485a:	f7fc fa29 	bl	8000cb0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004868:	d901      	bls.n	800486e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e00f      	b.n	800488e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ee      	beq.n	800485a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0210 	orr.w	r2, r2, #16
 800488a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0210 	bic.w	r2, r2, #16
 80048b0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80048b2:	f7fc f9fd 	bl	8000cb0 <HAL_GetTick>
 80048b6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048b8:	e009      	b.n	80048ce <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80048ba:	f7fc f9f9 	bl	8000cb0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048c8:	d901      	bls.n	80048ce <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e007      	b.n	80048de <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ee      	beq.n	80048ba <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e041      	b.n	800497c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc f89b 	bl	8000a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3304      	adds	r3, #4
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 fb57 	bl	8004fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	d001      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e03a      	b.n	8004a12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <HAL_TIM_Base_Start_IT+0x98>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00e      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x58>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d009      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x58>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_TIM_Base_Start_IT+0x9c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_TIM_Base_Start_IT+0x58>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <HAL_TIM_Base_Start_IT+0xa0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d111      	bne.n	8004a00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d010      	beq.n	8004a10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fe:	e007      	b.n	8004a10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800

08004a28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10f      	bne.n	8004a70 <HAL_TIM_Base_Stop_IT+0x48>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6a1a      	ldr	r2, [r3, #32]
 8004a56:	f240 4344 	movw	r3, #1092	; 0x444
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_Base_Stop_IT+0x48>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e041      	b.n	8004b1a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f839 	bl	8004b22 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fa88 	bl	8004fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0202 	mvn.w	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa12 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fa05 	bl	8004f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa14 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0204 	mvn.w	r2, #4
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9e8 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f9db 	bl	8004f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9ea 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f9be 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f9b1 	bl	8004f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f9c0 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f994 	bl	8004fa0 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f987 	bl	8004f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f996 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f962 	bl	8004f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fc61 	bl	80055a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f95a 	bl	8004fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0220 	mvn.w	r2, #32
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fc2c 	bl	8005594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_OC_ConfigChannel+0x1a>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e046      	b.n	8004dec <HAL_TIM_OC_ConfigChannel+0xa8>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d839      	bhi.n	8004de0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004d6c:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004de1 	.word	0x08004de1
 8004d7c:	08004de1 	.word	0x08004de1
 8004d80:	08004de1 	.word	0x08004de1
 8004d84:	08004db7 	.word	0x08004db7
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	08004de1 	.word	0x08004de1
 8004d90:	08004de1 	.word	0x08004de1
 8004d94:	08004dc5 	.word	0x08004dc5
 8004d98:	08004de1 	.word	0x08004de1
 8004d9c:	08004de1 	.word	0x08004de1
 8004da0:	08004de1 	.word	0x08004de1
 8004da4:	08004dd3 	.word	0x08004dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f974 	bl	800509c <TIM_OC1_SetConfig>
      break;
 8004db4:	e015      	b.n	8004de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f9d3 	bl	8005168 <TIM_OC2_SetConfig>
      break;
 8004dc2:	e00e      	b.n	8004de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fa36 	bl	800523c <TIM_OC3_SetConfig>
      break;
 8004dd0:	e007      	b.n	8004de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fa99 	bl	8005310 <TIM_OC4_SetConfig>
      break;
 8004dde:	e000      	b.n	8004de2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_ConfigClockSource+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0b3      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x180>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	d03e      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0xd0>
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4a:	f200 8087 	bhi.w	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	f000 8085 	beq.w	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d87f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e5c:	2b70      	cmp	r3, #112	; 0x70
 8004e5e:	d01a      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xa2>
 8004e60:	2b70      	cmp	r3, #112	; 0x70
 8004e62:	d87b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e64:	2b60      	cmp	r3, #96	; 0x60
 8004e66:	d050      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x116>
 8004e68:	2b60      	cmp	r3, #96	; 0x60
 8004e6a:	d877      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e6c:	2b50      	cmp	r3, #80	; 0x50
 8004e6e:	d03c      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0xf6>
 8004e70:	2b50      	cmp	r3, #80	; 0x50
 8004e72:	d873      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d058      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x136>
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d86f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	d064      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	d86b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d060      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d867      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d05a      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e94:	e062      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6899      	ldr	r1, [r3, #8]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f000 faf8 	bl	800549a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	609a      	str	r2, [r3, #8]
      break;
 8004ec2:	e04e      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f000 fae1 	bl	800549a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee6:	609a      	str	r2, [r3, #8]
      break;
 8004ee8:	e03b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 fa58 	bl	80053ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2150      	movs	r1, #80	; 0x50
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 faaf 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e02b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 fa76 	bl	8005408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2160      	movs	r1, #96	; 0x60
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fa9f 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004f28:	e01b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 fa38 	bl	80053ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fa8f 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004f48:	e00b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f000 fa86 	bl	8005466 <TIM_ITRx_SetConfig>
        break;
 8004f5a:	e002      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
	...

08004fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a29      	ldr	r2, [pc, #164]	; (8005090 <TIM_Base_SetConfig+0xb8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00b      	beq.n	8005008 <TIM_Base_SetConfig+0x30>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff6:	d007      	beq.n	8005008 <TIM_Base_SetConfig+0x30>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a26      	ldr	r2, [pc, #152]	; (8005094 <TIM_Base_SetConfig+0xbc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0x30>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a25      	ldr	r2, [pc, #148]	; (8005098 <TIM_Base_SetConfig+0xc0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <TIM_Base_SetConfig+0xb8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a19      	ldr	r2, [pc, #100]	; (8005094 <TIM_Base_SetConfig+0xbc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x62>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a18      	ldr	r2, [pc, #96]	; (8005098 <TIM_Base_SetConfig+0xc0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a07      	ldr	r2, [pc, #28]	; (8005090 <TIM_Base_SetConfig+0xb8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	615a      	str	r2, [r3, #20]
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800

0800509c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 0302 	bic.w	r3, r3, #2
 80050e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <TIM_OC1_SetConfig+0xc8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d10c      	bne.n	8005112 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0308 	bic.w	r3, r3, #8
 80050fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 0304 	bic.w	r3, r3, #4
 8005110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a13      	ldr	r2, [pc, #76]	; (8005164 <TIM_OC1_SetConfig+0xc8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d111      	bne.n	800513e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00

08005168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0210 	bic.w	r2, r3, #16
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0320 	bic.w	r3, r3, #32
 80051b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <TIM_OC2_SetConfig+0xd0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10d      	bne.n	80051e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <TIM_OC2_SetConfig+0xd0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d113      	bne.n	8005214 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	40012c00 	.word	0x40012c00

0800523c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1d      	ldr	r2, [pc, #116]	; (800530c <TIM_OC3_SetConfig+0xd0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d10d      	bne.n	80052b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <TIM_OC3_SetConfig+0xd0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d113      	bne.n	80052e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00

08005310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	031b      	lsls	r3, r3, #12
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <TIM_OC4_SetConfig+0x98>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d109      	bne.n	8005384 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00

080053ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 030a 	bic.w	r3, r3, #10
 80053e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f023 0210 	bic.w	r2, r3, #16
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	031b      	lsls	r3, r3, #12
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr

08005466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	f043 0307 	orr.w	r3, r3, #7
 8005488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	021a      	lsls	r2, r3, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	431a      	orrs	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	609a      	str	r2, [r3, #8]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e046      	b.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a16      	ldr	r2, [pc, #88]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553c:	d009      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a10      	ldr	r2, [pc, #64]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d10c      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4313      	orrs	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800

08005594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e03f      	b.n	800564a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fa58 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	; 0x24
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f829 	bl	8005654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800568e:	f023 030c 	bic.w	r3, r3, #12
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	430b      	orrs	r3, r1
 800569a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2c      	ldr	r2, [pc, #176]	; (8005768 <UART_SetConfig+0x114>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056bc:	f7fe fe58 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	e002      	b.n	80056ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056c4:	f7fe fe40 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 80056c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009a      	lsls	r2, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	4a22      	ldr	r2, [pc, #136]	; (800576c <UART_SetConfig+0x118>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	0119      	lsls	r1, r3, #4
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009a      	lsls	r2, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005700:	4b1a      	ldr	r3, [pc, #104]	; (800576c <UART_SetConfig+0x118>)
 8005702:	fba3 0302 	umull	r0, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2064      	movs	r0, #100	; 0x64
 800570a:	fb00 f303 	mul.w	r3, r0, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	; 0x32
 8005714:	4a15      	ldr	r2, [pc, #84]	; (800576c <UART_SetConfig+0x118>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005720:	4419      	add	r1, r3
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	009a      	lsls	r2, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	fbb2 f2f3 	udiv	r2, r2, r3
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <UART_SetConfig+0x118>)
 800573a:	fba3 0302 	umull	r0, r3, r3, r2
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2064      	movs	r0, #100	; 0x64
 8005742:	fb00 f303 	mul.w	r3, r0, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	3332      	adds	r3, #50	; 0x32
 800574c:	4a07      	ldr	r2, [pc, #28]	; (800576c <UART_SetConfig+0x118>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	440a      	add	r2, r1
 800575e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40013800 	.word	0x40013800
 800576c:	51eb851f 	.word	0x51eb851f

08005770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005770:	b084      	sub	sp, #16
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	f107 0014 	add.w	r0, r7, #20
 800577e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	b004      	add	sp, #16
 800578e:	4770      	bx	lr

08005790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	b29b      	uxth	r3, r3
 80057da:	4013      	ands	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005808:	b084      	sub	sp, #16
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	f107 0014 	add.w	r0, r7, #20
 8005816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	b004      	add	sp, #16
 8005846:	4770      	bx	lr

08005848 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005848:	b480      	push	{r7}
 800584a:	b09b      	sub	sp, #108	; 0x6c
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	78db      	ldrb	r3, [r3, #3]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d81f      	bhi.n	80058ba <USB_ActivateEndpoint+0x72>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <USB_ActivateEndpoint+0x38>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005891 	.word	0x08005891
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058c3 	.word	0x080058c3
 800588c:	0800589f 	.word	0x0800589f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005890:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005898:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800589c:	e012      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800589e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058aa:	e00b      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058b8:	e004      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80058c0:	e000      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>
      break;
 80058c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	4313      	orrs	r3, r2
 8005906:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	7b1b      	ldrb	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 8149 	bne.w	8005bc8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8084 	beq.w	8005a48 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	88db      	ldrh	r3, [r3, #6]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	b29b      	uxth	r3, r3
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	81fb      	strh	r3, [r7, #14]
 8005982:	89fb      	ldrh	r3, [r7, #14]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <USB_ActivateEndpoint+0x17c>
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	81bb      	strh	r3, [r7, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	89bb      	ldrh	r3, [r7, #12]
 80059b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	78db      	ldrb	r3, [r3, #3]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d020      	beq.n	8005a0e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e2:	813b      	strh	r3, [r7, #8]
 80059e4:	893b      	ldrh	r3, [r7, #8]
 80059e6:	f083 0320 	eor.w	r3, r3, #32
 80059ea:	813b      	strh	r3, [r7, #8]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	893b      	ldrh	r3, [r7, #8]
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]
 8005a0c:	e27f      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a24:	817b      	strh	r3, [r7, #10]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	897b      	ldrh	r3, [r7, #10]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
 8005a46:	e262      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	4413      	add	r3, r2
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	011a      	lsls	r2, r3, #4
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	4413      	add	r3, r2
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	011a      	lsls	r2, r3, #4
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	4413      	add	r3, r2
 8005a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d112      	bne.n	8005ace <USB_ActivateEndpoint+0x286>
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e02f      	b.n	8005b2e <USB_ActivateEndpoint+0x2e6>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad4:	d813      	bhi.n	8005afe <USB_ActivateEndpoint+0x2b6>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <USB_ActivateEndpoint+0x2a8>
 8005aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aec:	3301      	adds	r3, #1
 8005aee:	663b      	str	r3, [r7, #96]	; 0x60
 8005af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e017      	b.n	8005b2e <USB_ActivateEndpoint+0x2e6>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	663b      	str	r3, [r7, #96]	; 0x60
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <USB_ActivateEndpoint+0x2d0>
 8005b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b14:	3b01      	subs	r3, #1
 8005b16:	663b      	str	r3, [r7, #96]	; 0x60
 8005b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	83fb      	strh	r3, [r7, #30]
 8005b3c:	8bfb      	ldrh	r3, [r7, #30]
 8005b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01b      	beq.n	8005b7e <USB_ActivateEndpoint+0x336>
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5c:	83bb      	strh	r3, [r7, #28]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	8bbb      	ldrh	r3, [r7, #28]
 8005b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b94:	837b      	strh	r3, [r7, #26]
 8005b96:	8b7b      	ldrh	r3, [r7, #26]
 8005b98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b9c:	837b      	strh	r3, [r7, #26]
 8005b9e:	8b7b      	ldrh	r3, [r7, #26]
 8005ba0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ba4:	837b      	strh	r3, [r7, #26]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	441a      	add	r2, r3
 8005bb0:	8b7b      	ldrh	r3, [r7, #26]
 8005bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8013      	strh	r3, [r2, #0]
 8005bc6:	e1a2      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c14:	4413      	add	r3, r2
 8005c16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011a      	lsls	r2, r3, #4
 8005c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c26:	657b      	str	r3, [r7, #84]	; 0x54
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	891b      	ldrh	r3, [r3, #8]
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c48:	4413      	add	r3, r2
 8005c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	895b      	ldrh	r3, [r3, #10]
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8091 	bne.w	8005d98 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01b      	beq.n	8005cc6 <USB_ActivateEndpoint+0x47e>
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <USB_ActivateEndpoint+0x4ce>
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	441a      	add	r2, r3
 8005d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d74:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	8013      	strh	r3, [r2, #0]
 8005d96:	e0ba      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005da8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01d      	beq.n	8005df0 <USB_ActivateEndpoint+0x5a8>
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01d      	beq.n	8005e48 <USB_ActivateEndpoint+0x600>
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	441a      	add	r2, r3
 8005e30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	78db      	ldrb	r3, [r3, #3]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d024      	beq.n	8005e9a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e6e:	f083 0320 	eor.w	r3, r3, #32
 8005e72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	8013      	strh	r3, [r2, #0]
 8005e98:	e01d      	b.n	8005ed6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	376c      	adds	r7, #108	; 0x6c
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b08d      	sub	sp, #52	; 0x34
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	7b1b      	ldrb	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 808e 	bne.w	800604c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d044      	beq.n	8005fc2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	81bb      	strh	r3, [r7, #12]
 8005f46:	89bb      	ldrh	r3, [r7, #12]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <USB_DeactivateEndpoint+0x6c>
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	817b      	strh	r3, [r7, #10]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9e:	813b      	strh	r3, [r7, #8]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	893b      	ldrh	r3, [r7, #8]
 8005fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	8013      	strh	r3, [r2, #0]
 8005fc0:	e192      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	827b      	strh	r3, [r7, #18]
 8005fd0:	8a7b      	ldrh	r3, [r7, #18]
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01b      	beq.n	8006012 <USB_DeactivateEndpoint+0xf6>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	823b      	strh	r3, [r7, #16]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	8a3b      	ldrh	r3, [r7, #16]
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	81fb      	strh	r3, [r7, #14]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	89fb      	ldrh	r3, [r7, #14]
 8006036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006046:	b29b      	uxth	r3, r3
 8006048:	8013      	strh	r3, [r2, #0]
 800604a:	e14d      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 80a5 	bne.w	80061a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	843b      	strh	r3, [r7, #32]
 8006064:	8c3b      	ldrh	r3, [r7, #32]
 8006066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <USB_DeactivateEndpoint+0x18a>
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	83fb      	strh	r3, [r7, #30]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	8bfb      	ldrh	r3, [r7, #30]
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800609e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	83bb      	strh	r3, [r7, #28]
 80060b4:	8bbb      	ldrh	r3, [r7, #28]
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01b      	beq.n	80060f6 <USB_DeactivateEndpoint+0x1da>
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d4:	837b      	strh	r3, [r7, #26]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	441a      	add	r2, r3
 80060e0:	8b7b      	ldrh	r3, [r7, #26]
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	833b      	strh	r3, [r7, #24]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	8b3b      	ldrh	r3, [r7, #24]
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	82fb      	strh	r3, [r7, #22]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	8afb      	ldrh	r3, [r7, #22]
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	82bb      	strh	r3, [r7, #20]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	8abb      	ldrh	r3, [r7, #20]
 800618a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]
 800619e:	e0a3      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01b      	beq.n	80061f0 <USB_DeactivateEndpoint+0x2d4>
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	441a      	add	r2, r3
 80061da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01b      	beq.n	8006240 <USB_DeactivateEndpoint+0x324>
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3734      	adds	r7, #52	; 0x34
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b0cc      	sub	sp, #304	; 0x130
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006302:	6018      	str	r0, [r3, #0]
 8006304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800630e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b01      	cmp	r3, #1
 800631c:	f041 817d 	bne.w	800761a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	429a      	cmp	r2, r3
 800633a:	d908      	bls.n	800634e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800634c:	e007      	b.n	800635e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800634e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800635e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	7b1b      	ldrb	r3, [r3, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d152      	bne.n	8006414 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6959      	ldr	r1, [r3, #20]
 800637a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	88da      	ldrh	r2, [r3, #6]
 8006386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638a:	b29b      	uxth	r3, r3
 800638c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006390:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006394:	6800      	ldr	r0, [r0, #0]
 8006396:	f001 ff23 	bl	80081e0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800639a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80063a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063bc:	b29b      	uxth	r3, r3
 80063be:	4619      	mov	r1, r3
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80063c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063cc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	440a      	add	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	011a      	lsls	r2, r3, #4
 80063e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4413      	add	r3, r2
 80063f0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80063f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006402:	b29a      	uxth	r2, r3
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	f001 b8b5 	b.w	800757e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2b02      	cmp	r3, #2
 8006422:	f040 84c6 	bne.w	8006db2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6a1a      	ldr	r2, [r3, #32]
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	429a      	cmp	r2, r3
 8006440:	f240 8443 	bls.w	8006cca <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006494:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6a1a      	ldr	r2, [r3, #32]
 80064ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b0:	1ad2      	subs	r2, r2, r3
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 823e 	beq.w	8006962 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80064ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064f2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 809a 	bne.w	8006640 <USB_EPStartXfer+0x34c>
 800650c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006514:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006518:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800653e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	440a      	add	r2, r1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	011a      	lsls	r2, r3, #4
 8006556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4413      	add	r3, r2
 8006562:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d122      	bne.n	80065be <USB_EPStartXfer+0x2ca>
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800658a:	b29a      	uxth	r2, r3
 800658c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006590:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	e079      	b.n	80066b2 <USB_EPStartXfer+0x3be>
 80065be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c2:	2b3e      	cmp	r3, #62	; 0x3e
 80065c4:	d81b      	bhi.n	80065fe <USB_EPStartXfer+0x30a>
 80065c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <USB_EPStartXfer+0x2f2>
 80065dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065e0:	3301      	adds	r3, #1
 80065e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	029b      	lsls	r3, r3, #10
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	e059      	b.n	80066b2 <USB_EPStartXfer+0x3be>
 80065fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <USB_EPStartXfer+0x32a>
 8006614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006618:	3b01      	subs	r3, #1
 800661a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800661e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006622:	b29b      	uxth	r3, r3
 8006624:	029b      	lsls	r3, r3, #10
 8006626:	b29b      	uxth	r3, r3
 8006628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006630:	b29a      	uxth	r2, r3
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e038      	b.n	80066b2 <USB_EPStartXfer+0x3be>
 8006640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d130      	bne.n	80066b2 <USB_EPStartXfer+0x3be>
 8006650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006654:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	4619      	mov	r1, r3
 8006662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006666:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800666a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800666e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	440a      	add	r2, r1
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	011a      	lsls	r2, r3, #4
 8006686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4413      	add	r3, r2
 8006692:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	895b      	ldrh	r3, [r3, #10]
 80066be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6959      	ldr	r1, [r3, #20]
 80066ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066e0:	6800      	ldr	r0, [r0, #0]
 80066e2:	f001 fd7d 	bl	80081e0 <USB_WritePMA>
            ep->xfer_buff += len;
 80066e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f6:	441a      	add	r2, r3
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d90f      	bls.n	8006740 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	1ad2      	subs	r2, r2, r3
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	621a      	str	r2, [r3, #32]
 800673e:	e00e      	b.n	800675e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800675e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 809a 	bne.w	80068a4 <USB_EPStartXfer+0x5b0>
 8006770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006774:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006778:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800677c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006792:	b29b      	uxth	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800679e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067a2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	440a      	add	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	011a      	lsls	r2, r3, #4
 80067ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067be:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80067ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d122      	bne.n	8006822 <USB_EPStartXfer+0x52e>
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006812:	b29a      	uxth	r2, r3
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e083      	b.n	800692a <USB_EPStartXfer+0x636>
 8006822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006826:	2b3e      	cmp	r3, #62	; 0x3e
 8006828:	d81b      	bhi.n	8006862 <USB_EPStartXfer+0x56e>
 800682a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <USB_EPStartXfer+0x556>
 8006840:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006844:	3301      	adds	r3, #1
 8006846:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800684a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800684e:	b29b      	uxth	r3, r3
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	b29a      	uxth	r2, r3
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	e063      	b.n	800692a <USB_EPStartXfer+0x636>
 8006862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800686c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <USB_EPStartXfer+0x58e>
 8006878:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800687c:	3b01      	subs	r3, #1
 800687e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006882:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006886:	b29b      	uxth	r3, r3
 8006888:	029b      	lsls	r3, r3, #10
 800688a:	b29b      	uxth	r3, r3
 800688c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006894:	b29a      	uxth	r2, r3
 8006896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e042      	b.n	800692a <USB_EPStartXfer+0x636>
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d13a      	bne.n	800692a <USB_EPStartXfer+0x636>
 80068b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80068bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068c0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	4619      	mov	r1, r3
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80068e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068e6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	440a      	add	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	011a      	lsls	r2, r3, #4
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4413      	add	r3, r2
 800690a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800690e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006912:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800691c:	b29a      	uxth	r2, r3
 800691e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006922:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	891b      	ldrh	r3, [r3, #8]
 8006936:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800693a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6959      	ldr	r1, [r3, #20]
 8006946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694a:	b29b      	uxth	r3, r3
 800694c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006950:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006954:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006958:	6800      	ldr	r0, [r0, #0]
 800695a:	f001 fc41 	bl	80081e0 <USB_WritePMA>
 800695e:	f000 be0e 	b.w	800757e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d16d      	bne.n	8006a4e <USB_EPStartXfer+0x75a>
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	64bb      	str	r3, [r7, #72]	; 0x48
 800697e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698c:	b29b      	uxth	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006992:	4413      	add	r3, r2
 8006994:	64bb      	str	r3, [r7, #72]	; 0x48
 8006996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	011a      	lsls	r2, r3, #4
 80069a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069a6:	4413      	add	r3, r2
 80069a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069ac:	647b      	str	r3, [r7, #68]	; 0x44
 80069ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d112      	bne.n	80069dc <USB_EPStartXfer+0x6e8>
 80069b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e063      	b.n	8006aa4 <USB_EPStartXfer+0x7b0>
 80069dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e0:	2b3e      	cmp	r3, #62	; 0x3e
 80069e2:	d817      	bhi.n	8006a14 <USB_EPStartXfer+0x720>
 80069e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80069ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <USB_EPStartXfer+0x710>
 80069fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80069fe:	3301      	adds	r3, #1
 8006a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	029b      	lsls	r3, r3, #10
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	e047      	b.n	8006aa4 <USB_EPStartXfer+0x7b0>
 8006a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a22:	f003 031f 	and.w	r3, r3, #31
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <USB_EPStartXfer+0x740>
 8006a2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e02a      	b.n	8006aa4 <USB_EPStartXfer+0x7b0>
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d122      	bne.n	8006aa4 <USB_EPStartXfer+0x7b0>
 8006a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	653b      	str	r3, [r7, #80]	; 0x50
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a7e:	4413      	add	r3, r2
 8006a80:	653b      	str	r3, [r7, #80]	; 0x50
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	011a      	lsls	r2, r3, #4
 8006a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a92:	4413      	add	r3, r2
 8006a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	891b      	ldrh	r3, [r3, #8]
 8006ab0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6959      	ldr	r1, [r3, #20]
 8006ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006aca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ace:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ad2:	6800      	ldr	r0, [r0, #0]
 8006ad4:	f001 fb84 	bl	80081e0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae8:	441a      	add	r2, r3
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d90f      	bls.n	8006b32 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	621a      	str	r2, [r3, #32]
 8006b30:	e00e      	b.n	8006b50 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d16d      	bne.n	8006c48 <USB_EPStartXfer+0x954>
 8006b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	4413      	add	r3, r2
 8006b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	011a      	lsls	r2, r3, #4
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d112      	bne.n	8006bd6 <USB_EPStartXfer+0x8e2>
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	e05d      	b.n	8006c92 <USB_EPStartXfer+0x99e>
 8006bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bda:	2b3e      	cmp	r3, #62	; 0x3e
 8006bdc:	d817      	bhi.n	8006c0e <USB_EPStartXfer+0x91a>
 8006bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <USB_EPStartXfer+0x90a>
 8006bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006bfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	029b      	lsls	r3, r3, #10
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e041      	b.n	8006c92 <USB_EPStartXfer+0x99e>
 8006c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <USB_EPStartXfer+0x93a>
 8006c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	029b      	lsls	r3, r3, #10
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e024      	b.n	8006c92 <USB_EPStartXfer+0x99e>
 8006c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d11c      	bne.n	8006c92 <USB_EPStartXfer+0x99e>
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c6c:	4413      	add	r3, r2
 8006c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	011a      	lsls	r2, r3, #4
 8006c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c80:	4413      	add	r3, r2
 8006c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	895b      	ldrh	r3, [r3, #10]
 8006c9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6959      	ldr	r1, [r3, #20]
 8006cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cb8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006cbc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006cc0:	6800      	ldr	r0, [r0, #0]
 8006cc2:	f001 fa8d 	bl	80081e0 <USB_WritePMA>
 8006cc6:	f000 bc5a 	b.w	800757e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d56:	4413      	add	r3, r2
 8006d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	011a      	lsls	r2, r3, #4
 8006d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d70:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	891b      	ldrh	r3, [r3, #8]
 8006d88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6959      	ldr	r1, [r3, #20]
 8006d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006da2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006da6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	f001 fa18 	bl	80081e0 <USB_WritePMA>
 8006db0:	e3e5      	b.n	800757e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	441a      	add	r2, r3
 8006df6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6a1a      	ldr	r2, [r3, #32]
 8006e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 81bc 	beq.w	80071cc <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d16d      	bne.n	8006f4e <USB_EPStartXfer+0xc5a>
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e92:	4413      	add	r3, r2
 8006e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	011a      	lsls	r2, r3, #4
 8006ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eac:	677b      	str	r3, [r7, #116]	; 0x74
 8006eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d112      	bne.n	8006edc <USB_EPStartXfer+0xbe8>
 8006eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e060      	b.n	8006f9e <USB_EPStartXfer+0xcaa>
 8006edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ee2:	d817      	bhi.n	8006f14 <USB_EPStartXfer+0xc20>
 8006ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <USB_EPStartXfer+0xc10>
 8006efa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006efe:	3301      	adds	r3, #1
 8006f00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e044      	b.n	8006f9e <USB_EPStartXfer+0xcaa>
 8006f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <USB_EPStartXfer+0xc40>
 8006f2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	029b      	lsls	r3, r3, #10
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e027      	b.n	8006f9e <USB_EPStartXfer+0xcaa>
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d11f      	bne.n	8006f9e <USB_EPStartXfer+0xcaa>
 8006f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f74:	4413      	add	r3, r2
 8006f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	011a      	lsls	r2, r3, #4
 8006f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	895b      	ldrh	r3, [r3, #10]
 8006faa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6959      	ldr	r1, [r3, #20]
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fc4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fc8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f001 f907 	bl	80081e0 <USB_WritePMA>
          ep->xfer_buff += len;
 8006fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695a      	ldr	r2, [r3, #20]
 8006fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe2:	441a      	add	r2, r3
 8006fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6a1a      	ldr	r2, [r3, #32]
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	d90f      	bls.n	800702c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6a1a      	ldr	r2, [r3, #32]
 8007018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701c:	1ad2      	subs	r2, r2, r3
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	621a      	str	r2, [r3, #32]
 800702a:	e00e      	b.n	800704a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800703c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800704a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8295 	beq.w	800757e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d16d      	bne.n	8007140 <USB_EPStartXfer+0xe4c>
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007084:	4413      	add	r3, r2
 8007086:	66bb      	str	r3, [r7, #104]	; 0x68
 8007088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	011a      	lsls	r2, r3, #4
 8007096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007098:	4413      	add	r3, r2
 800709a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800709e:	667b      	str	r3, [r7, #100]	; 0x64
 80070a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d112      	bne.n	80070ce <USB_EPStartXfer+0xdda>
 80070a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b6:	801a      	strh	r2, [r3, #0]
 80070b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	e063      	b.n	8007196 <USB_EPStartXfer+0xea2>
 80070ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d2:	2b3e      	cmp	r3, #62	; 0x3e
 80070d4:	d817      	bhi.n	8007106 <USB_EPStartXfer+0xe12>
 80070d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80070e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <USB_EPStartXfer+0xe02>
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f0:	3301      	adds	r3, #1
 80070f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	029b      	lsls	r3, r3, #10
 80070fe:	b29a      	uxth	r2, r3
 8007100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007102:	801a      	strh	r2, [r3, #0]
 8007104:	e047      	b.n	8007196 <USB_EPStartXfer+0xea2>
 8007106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <USB_EPStartXfer+0xe32>
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007120:	3b01      	subs	r3, #1
 8007122:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800712a:	b29b      	uxth	r3, r3
 800712c:	029b      	lsls	r3, r3, #10
 800712e:	b29b      	uxth	r3, r3
 8007130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007138:	b29a      	uxth	r2, r3
 800713a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	e02a      	b.n	8007196 <USB_EPStartXfer+0xea2>
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d122      	bne.n	8007196 <USB_EPStartXfer+0xea2>
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	673b      	str	r3, [r7, #112]	; 0x70
 800715c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007170:	4413      	add	r3, r2
 8007172:	673b      	str	r3, [r7, #112]	; 0x70
 8007174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	011a      	lsls	r2, r3, #4
 8007182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007184:	4413      	add	r3, r2
 8007186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800718a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800718c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007190:	b29a      	uxth	r2, r3
 8007192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007194:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	891b      	ldrh	r3, [r3, #8]
 80071a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6959      	ldr	r1, [r3, #20]
 80071b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071c4:	6800      	ldr	r0, [r0, #0]
 80071c6:	f001 f80b 	bl	80081e0 <USB_WritePMA>
 80071ca:	e1d8      	b.n	800757e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d178      	bne.n	80072ce <USB_EPStartXfer+0xfda>
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007200:	4413      	add	r3, r2
 8007202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	011a      	lsls	r2, r3, #4
 8007214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007218:	4413      	add	r3, r2
 800721a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800721e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d116      	bne.n	8007258 <USB_EPStartXfer+0xf64>
 800722a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007236:	b29a      	uxth	r2, r3
 8007238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	e06b      	b.n	8007330 <USB_EPStartXfer+0x103c>
 8007258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725c:	2b3e      	cmp	r3, #62	; 0x3e
 800725e:	d818      	bhi.n	8007292 <USB_EPStartXfer+0xf9e>
 8007260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d004      	beq.n	8007280 <USB_EPStartXfer+0xf8c>
 8007276:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800727a:	3301      	adds	r3, #1
 800727c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007280:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007284:	b29b      	uxth	r3, r3
 8007286:	029b      	lsls	r3, r3, #10
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e04e      	b.n	8007330 <USB_EPStartXfer+0x103c>
 8007292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800729c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <USB_EPStartXfer+0xfbe>
 80072a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80072ac:	3b01      	subs	r3, #1
 80072ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80072b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	029b      	lsls	r3, r3, #10
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	e030      	b.n	8007330 <USB_EPStartXfer+0x103c>
 80072ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d128      	bne.n	8007330 <USB_EPStartXfer+0x103c>
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80072ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007302:	4413      	add	r3, r2
 8007304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	011a      	lsls	r2, r3, #4
 8007316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800731a:	4413      	add	r3, r2
 800731c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007320:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800732e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	891b      	ldrh	r3, [r3, #8]
 800733c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6959      	ldr	r1, [r3, #20]
 800734c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007350:	b29b      	uxth	r3, r3
 8007352:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007356:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800735a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	f000 ff3e 	bl	80081e0 <USB_WritePMA>
          ep->xfer_buff += len;
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695a      	ldr	r2, [r3, #20]
 8007370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007374:	441a      	add	r2, r3
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6a1a      	ldr	r2, [r3, #32]
 800738e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d90f      	bls.n	80073be <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800739e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6a1a      	ldr	r2, [r3, #32]
 80073aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	621a      	str	r2, [r3, #32]
 80073bc:	e00e      	b.n	80073dc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80073be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80073ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2200      	movs	r2, #0
 80073da:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80073dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80cc 	beq.w	800757e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d178      	bne.n	80074f6 <USB_EPStartXfer+0x1202>
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007420:	b29b      	uxth	r3, r3
 8007422:	461a      	mov	r2, r3
 8007424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007428:	4413      	add	r3, r2
 800742a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800742e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	011a      	lsls	r2, r3, #4
 800743c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007440:	4413      	add	r3, r2
 8007442:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800744a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d116      	bne.n	8007480 <USB_EPStartXfer+0x118c>
 8007452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800745e:	b29a      	uxth	r2, r3
 8007460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007476:	b29a      	uxth	r2, r3
 8007478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	e064      	b.n	800754a <USB_EPStartXfer+0x1256>
 8007480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007484:	2b3e      	cmp	r3, #62	; 0x3e
 8007486:	d818      	bhi.n	80074ba <USB_EPStartXfer+0x11c6>
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <USB_EPStartXfer+0x11b4>
 800749e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074a2:	3301      	adds	r3, #1
 80074a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80074a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	029b      	lsls	r3, r3, #10
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074b6:	801a      	strh	r2, [r3, #0]
 80074b8:	e047      	b.n	800754a <USB_EPStartXfer+0x1256>
 80074ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80074c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <USB_EPStartXfer+0x11e6>
 80074d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074d4:	3b01      	subs	r3, #1
 80074d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80074da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074de:	b29b      	uxth	r3, r3
 80074e0:	029b      	lsls	r3, r3, #10
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e029      	b.n	800754a <USB_EPStartXfer+0x1256>
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d121      	bne.n	800754a <USB_EPStartXfer+0x1256>
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007514:	b29b      	uxth	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800751c:	4413      	add	r3, r2
 800751e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	011a      	lsls	r2, r3, #4
 8007530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007534:	4413      	add	r3, r2
 8007536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800753a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800753e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007542:	b29a      	uxth	r2, r3
 8007544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007548:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	895b      	ldrh	r3, [r3, #10]
 8007556:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6959      	ldr	r1, [r3, #20]
 8007566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756a:	b29b      	uxth	r3, r3
 800756c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007570:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007574:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007578:	6800      	ldr	r0, [r0, #0]
 800757a:	f000 fe31 	bl	80081e0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800757e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075a0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80075a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ac:	8013      	strh	r3, [r2, #0]
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80075b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075ba:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80075be:	8812      	ldrh	r2, [r2, #0]
 80075c0:	f082 0210 	eor.w	r2, r2, #16
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ca:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80075ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075d2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80075d6:	8812      	ldrh	r2, [r2, #0]
 80075d8:	f082 0220 	eor.w	r2, r2, #32
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	441a      	add	r2, r3
 80075f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800760a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007612:	b29b      	uxth	r3, r3
 8007614:	8013      	strh	r3, [r2, #0]
 8007616:	f000 bc9f 	b.w	8007f58 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	7b1b      	ldrb	r3, [r3, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f040 80ae 	bne.w	8007788 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800762c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699a      	ldr	r2, [r3, #24]
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	429a      	cmp	r2, r3
 8007646:	d917      	bls.n	8007678 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	619a      	str	r2, [r3, #24]
 8007676:	e00e      	b.n	8007696 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076ba:	4413      	add	r3, r2
 80076bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	011a      	lsls	r2, r3, #4
 80076ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076d2:	4413      	add	r3, r2
 80076d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d116      	bne.n	8007712 <USB_EPStartXfer+0x141e>
 80076e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076f6:	801a      	strh	r2, [r3, #0]
 80076f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e3e8      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
 8007712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007716:	2b3e      	cmp	r3, #62	; 0x3e
 8007718:	d818      	bhi.n	800774c <USB_EPStartXfer+0x1458>
 800771a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771e:	085b      	lsrs	r3, r3, #1
 8007720:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <USB_EPStartXfer+0x1446>
 8007730:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007734:	3301      	adds	r3, #1
 8007736:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800773a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800773e:	b29b      	uxth	r3, r3
 8007740:	029b      	lsls	r3, r3, #10
 8007742:	b29a      	uxth	r2, r3
 8007744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007748:	801a      	strh	r2, [r3, #0]
 800774a:	e3cb      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
 800774c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775a:	f003 031f 	and.w	r3, r3, #31
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <USB_EPStartXfer+0x1478>
 8007762:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007766:	3b01      	subs	r3, #1
 8007768:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800776c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007770:	b29b      	uxth	r3, r3
 8007772:	029b      	lsls	r3, r3, #10
 8007774:	b29b      	uxth	r3, r3
 8007776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800777a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777e:	b29a      	uxth	r2, r3
 8007780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007784:	801a      	strh	r2, [r3, #0]
 8007786:	e3ad      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	78db      	ldrb	r3, [r3, #3]
 8007794:	2b02      	cmp	r3, #2
 8007796:	f040 8200 	bne.w	8007b9a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800779a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f040 8091 	bne.w	80078ce <USB_EPStartXfer+0x15da>
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077d0:	4413      	add	r3, r2
 80077d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	011a      	lsls	r2, r3, #4
 80077e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077e8:	4413      	add	r3, r2
 80077ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d116      	bne.n	8007830 <USB_EPStartXfer+0x153c>
 8007802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780e:	b29a      	uxth	r2, r3
 8007810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007826:	b29a      	uxth	r2, r3
 8007828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e083      	b.n	8007938 <USB_EPStartXfer+0x1644>
 8007830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b3e      	cmp	r3, #62	; 0x3e
 800783e:	d820      	bhi.n	8007882 <USB_EPStartXfer+0x158e>
 8007840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <USB_EPStartXfer+0x157c>
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786a:	3301      	adds	r3, #1
 800786c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007874:	b29b      	uxth	r3, r3
 8007876:	029b      	lsls	r3, r3, #10
 8007878:	b29a      	uxth	r2, r3
 800787a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	e05a      	b.n	8007938 <USB_EPStartXfer+0x1644>
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <USB_EPStartXfer+0x15be>
 80078a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ac:	3b01      	subs	r3, #1
 80078ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	029b      	lsls	r3, r3, #10
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	e034      	b.n	8007938 <USB_EPStartXfer+0x1644>
 80078ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d12c      	bne.n	8007938 <USB_EPStartXfer+0x1644>
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80078ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007902:	4413      	add	r3, r2
 8007904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	011a      	lsls	r2, r3, #4
 8007916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800791a:	4413      	add	r3, r2
 800791c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	b29a      	uxth	r2, r3
 8007932:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007936:	801a      	strh	r2, [r3, #0]
 8007938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 8091 	bne.w	8007a7a <USB_EPStartXfer+0x1786>
 8007958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007974:	b29b      	uxth	r3, r3
 8007976:	461a      	mov	r2, r3
 8007978:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800797c:	4413      	add	r3, r2
 800797e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	011a      	lsls	r2, r3, #4
 8007990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007994:	4413      	add	r3, r2
 8007996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800799a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d116      	bne.n	80079dc <USB_EPStartXfer+0x16e8>
 80079ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e07c      	b.n	8007ad6 <USB_EPStartXfer+0x17e2>
 80079dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b3e      	cmp	r3, #62	; 0x3e
 80079ea:	d820      	bhi.n	8007a2e <USB_EPStartXfer+0x173a>
 80079ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <USB_EPStartXfer+0x1728>
 8007a12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a16:	3301      	adds	r3, #1
 8007a18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	029b      	lsls	r3, r3, #10
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e053      	b.n	8007ad6 <USB_EPStartXfer+0x17e2>
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <USB_EPStartXfer+0x176a>
 8007a54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	029b      	lsls	r3, r3, #10
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a76:	801a      	strh	r2, [r3, #0]
 8007a78:	e02d      	b.n	8007ad6 <USB_EPStartXfer+0x17e2>
 8007a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d125      	bne.n	8007ad6 <USB_EPStartXfer+0x17e2>
 8007a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	011a      	lsls	r2, r3, #4
 8007ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ab8:	4413      	add	r3, r2
 8007aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ad4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 81fe 	beq.w	8007ee4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b08:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <USB_EPStartXfer+0x182c>
 8007b14:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10d      	bne.n	8007b3c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b20:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f040 81db 	bne.w	8007ee4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b2e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 81d4 	bne.w	8007ee4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	441a      	add	r2, r3
 8007b80:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	8013      	strh	r3, [r2, #0]
 8007b98:	e1a4      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	78db      	ldrb	r3, [r3, #3]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	f040 819a 	bne.w	8007ee0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699a      	ldr	r2, [r3, #24]
 8007bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d917      	bls.n	8007bf8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	1ad2      	subs	r2, r2, r3
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	619a      	str	r2, [r3, #24]
 8007bf6:	e00e      	b.n	8007c16 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2200      	movs	r2, #0
 8007c14:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d178      	bne.n	8007d18 <USB_EPStartXfer+0x1a24>
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	011a      	lsls	r2, r3, #4
 8007c5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c62:	4413      	add	r3, r2
 8007c64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d116      	bne.n	8007ca2 <USB_EPStartXfer+0x19ae>
 8007c74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	e06b      	b.n	8007d7a <USB_EPStartXfer+0x1a86>
 8007ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca8:	d818      	bhi.n	8007cdc <USB_EPStartXfer+0x19e8>
 8007caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <USB_EPStartXfer+0x19d6>
 8007cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	029b      	lsls	r3, r3, #10
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cd8:	801a      	strh	r2, [r3, #0]
 8007cda:	e04e      	b.n	8007d7a <USB_EPStartXfer+0x1a86>
 8007cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <USB_EPStartXfer+0x1a08>
 8007cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	029b      	lsls	r3, r3, #10
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e030      	b.n	8007d7a <USB_EPStartXfer+0x1a86>
 8007d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d128      	bne.n	8007d7a <USB_EPStartXfer+0x1a86>
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	011a      	lsls	r2, r3, #4
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d64:	4413      	add	r3, r2
 8007d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	785b      	ldrb	r3, [r3, #1]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d178      	bne.n	8007e8a <USB_EPStartXfer+0x1b96>
 8007d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	011a      	lsls	r2, r3, #4
 8007dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d116      	bne.n	8007e14 <USB_EPStartXfer+0x1b20>
 8007de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007df8:	801a      	strh	r2, [r3, #0]
 8007dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e067      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
 8007e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e18:	2b3e      	cmp	r3, #62	; 0x3e
 8007e1a:	d818      	bhi.n	8007e4e <USB_EPStartXfer+0x1b5a>
 8007e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e20:	085b      	lsrs	r3, r3, #1
 8007e22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d004      	beq.n	8007e3c <USB_EPStartXfer+0x1b48>
 8007e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e36:	3301      	adds	r3, #1
 8007e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	029b      	lsls	r3, r3, #10
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	e04a      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
 8007e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e52:	095b      	lsrs	r3, r3, #5
 8007e54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <USB_EPStartXfer+0x1b7a>
 8007e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	029b      	lsls	r3, r3, #10
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e86:	801a      	strh	r2, [r3, #0]
 8007e88:	e02c      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
 8007e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d124      	bne.n	8007ee4 <USB_EPStartXfer+0x1bf0>
 8007e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	011a      	lsls	r2, r3, #4
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec8:	4413      	add	r3, r2
 8007eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ece:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	e001      	b.n	8007ee4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e03a      	b.n	8007f5a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f0e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f16:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f1a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	441a      	add	r2, r3
 8007f40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	785b      	ldrb	r3, [r3, #1]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d020      	beq.n	8007fb8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8c:	81bb      	strh	r3, [r7, #12]
 8007f8e:	89bb      	ldrh	r3, [r7, #12]
 8007f90:	f083 0310 	eor.w	r3, r3, #16
 8007f94:	81bb      	strh	r3, [r7, #12]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	441a      	add	r2, r3
 8007fa0:	89bb      	ldrh	r3, [r7, #12]
 8007fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	8013      	strh	r3, [r2, #0]
 8007fb6:	e01f      	b.n	8007ff8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fce:	81fb      	strh	r3, [r7, #14]
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
 8007fd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fd6:	81fb      	strh	r3, [r7, #14]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	441a      	add	r2, r3
 8007fe2:	89fb      	ldrh	r3, [r7, #14]
 8007fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	7b1b      	ldrb	r3, [r3, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 809d 	bne.w	8008152 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d04c      	beq.n	80080ba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	823b      	strh	r3, [r7, #16]
 800802e:	8a3b      	ldrh	r3, [r7, #16]
 8008030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <USB_EPClearStall+0x6c>
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804e:	81fb      	strh	r3, [r7, #14]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	89fb      	ldrh	r3, [r7, #14]
 800805c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008068:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800806c:	b29b      	uxth	r3, r3
 800806e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	78db      	ldrb	r3, [r3, #3]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d06c      	beq.n	8008152 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800808e:	81bb      	strh	r3, [r7, #12]
 8008090:	89bb      	ldrh	r3, [r7, #12]
 8008092:	f083 0320 	eor.w	r3, r3, #32
 8008096:	81bb      	strh	r3, [r7, #12]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	441a      	add	r2, r3
 80080a2:	89bb      	ldrh	r3, [r7, #12]
 80080a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]
 80080b8:	e04b      	b.n	8008152 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	82fb      	strh	r3, [r7, #22]
 80080c8:	8afb      	ldrh	r3, [r7, #22]
 80080ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d01b      	beq.n	800810a <USB_EPClearStall+0x106>
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e8:	82bb      	strh	r3, [r7, #20]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	441a      	add	r2, r3
 80080f4:	8abb      	ldrh	r3, [r7, #20]
 80080f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008106:	b29b      	uxth	r3, r3
 8008108:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800811c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008120:	827b      	strh	r3, [r7, #18]
 8008122:	8a7b      	ldrh	r3, [r7, #18]
 8008124:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008128:	827b      	strh	r3, [r7, #18]
 800812a:	8a7b      	ldrh	r3, [r7, #18]
 800812c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008130:	827b      	strh	r3, [r7, #18]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	441a      	add	r2, r3
 800813c:	8a7b      	ldrh	r3, [r7, #18]
 800813e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814e:	b29b      	uxth	r3, r3
 8008150:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr

0800815e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2280      	movs	r2, #128	; 0x80
 8008174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr

08008198 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bc80      	pop	{r7}
 80081aa:	4770      	bx	lr

080081ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081be:	68fb      	ldr	r3, [r7, #12]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bc80      	pop	{r7}
 80081c8:	4770      	bx	lr

080081ca <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr

080081e0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b08d      	sub	sp, #52	; 0x34
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	460b      	mov	r3, r1
 80081f0:	80fb      	strh	r3, [r7, #6]
 80081f2:	4613      	mov	r3, r2
 80081f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081f6:	88bb      	ldrh	r3, [r7, #4]
 80081f8:	3301      	adds	r3, #1
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	005a      	lsls	r2, r3, #1
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008218:	e01e      	b.n	8008258 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	3301      	adds	r3, #1
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	b29b      	uxth	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	b29a      	uxth	r2, r3
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	3302      	adds	r3, #2
 8008244:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008248:	3302      	adds	r3, #2
 800824a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	3301      	adds	r3, #1
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	3b01      	subs	r3, #1
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1dd      	bne.n	800821a <USB_WritePMA+0x3a>
  }
}
 800825e:	bf00      	nop
 8008260:	bf00      	nop
 8008262:	3734      	adds	r7, #52	; 0x34
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	4770      	bx	lr

0800826a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800826a:	b480      	push	{r7}
 800826c:	b08b      	sub	sp, #44	; 0x2c
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	4611      	mov	r1, r2
 8008276:	461a      	mov	r2, r3
 8008278:	460b      	mov	r3, r1
 800827a:	80fb      	strh	r3, [r7, #6]
 800827c:	4613      	mov	r3, r2
 800827e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008280:	88bb      	ldrh	r3, [r7, #4]
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	b29b      	uxth	r3, r3
 8008286:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	005a      	lsls	r2, r3, #1
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800829c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
 80082a2:	e01b      	b.n	80082dc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	3302      	adds	r3, #2
 80082b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	3301      	adds	r3, #1
 80082be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	3301      	adds	r3, #1
 80082ce:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	3302      	adds	r3, #2
 80082d4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	3b01      	subs	r3, #1
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e0      	bne.n	80082a4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80082e2:	88bb      	ldrh	r3, [r7, #4]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	701a      	strb	r2, [r3, #0]
  }
}
 80082fe:	bf00      	nop
 8008300:	372c      	adds	r7, #44	; 0x2c
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7c1b      	ldrb	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d115      	bne.n	800834c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008324:	2202      	movs	r2, #2
 8008326:	2181      	movs	r1, #129	; 0x81
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 fe30 	bl	8009f8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008338:	2202      	movs	r2, #2
 800833a:	2101      	movs	r1, #1
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fe26 	bl	8009f8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800834a:	e012      	b.n	8008372 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800834c:	2340      	movs	r3, #64	; 0x40
 800834e:	2202      	movs	r2, #2
 8008350:	2181      	movs	r1, #129	; 0x81
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 fe1b 	bl	8009f8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	2202      	movs	r2, #2
 8008362:	2101      	movs	r1, #1
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fe12 	bl	8009f8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008372:	2308      	movs	r3, #8
 8008374:	2203      	movs	r2, #3
 8008376:	2182      	movs	r1, #130	; 0x82
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fe08 	bl	8009f8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008384:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008388:	f001 ff28 	bl	800a1dc <USBD_static_malloc>
 800838c:	4602      	mov	r2, r0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]
 80083a2:	e026      	b.n	80083f2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083aa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	7c1b      	ldrb	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d8:	2101      	movs	r1, #1
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fec8 	bl	800a170 <USBD_LL_PrepareReceive>
 80083e0:	e007      	b.n	80083f2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083e8:	2340      	movs	r3, #64	; 0x40
 80083ea:	2101      	movs	r1, #1
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 febf 	bl	800a170 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800840c:	2181      	movs	r1, #129	; 0x81
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 fde3 	bl	8009fda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800841a:	2101      	movs	r1, #1
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fddc 	bl	8009fda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800842a:	2182      	movs	r1, #130	; 0x82
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 fdd4 	bl	8009fda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00e      	beq.n	8008460 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008452:	4618      	mov	r0, r3
 8008454:	f001 fece 	bl	800a1f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008490:	2b00      	cmp	r3, #0
 8008492:	d039      	beq.n	8008508 <USBD_CDC_Setup+0x9e>
 8008494:	2b20      	cmp	r3, #32
 8008496:	d17f      	bne.n	8008598 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	88db      	ldrh	r3, [r3, #6]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d029      	beq.n	80084f4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	b25b      	sxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da11      	bge.n	80084ce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80084b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	88d2      	ldrh	r2, [r2, #6]
 80084bc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80084be:	6939      	ldr	r1, [r7, #16]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	88db      	ldrh	r3, [r3, #6]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 f9d9 	bl	800987e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80084cc:	e06b      	b.n	80085a6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	785a      	ldrb	r2, [r3, #1]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	88db      	ldrh	r3, [r3, #6]
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80084e4:	6939      	ldr	r1, [r7, #16]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	461a      	mov	r2, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 f9f4 	bl	80098da <USBD_CtlPrepareRx>
      break;
 80084f2:	e058      	b.n	80085a6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	7850      	ldrb	r0, [r2, #1]
 8008500:	2200      	movs	r2, #0
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	4798      	blx	r3
      break;
 8008506:	e04e      	b.n	80085a6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b0b      	cmp	r3, #11
 800850e:	d02e      	beq.n	800856e <USBD_CDC_Setup+0x104>
 8008510:	2b0b      	cmp	r3, #11
 8008512:	dc38      	bgt.n	8008586 <USBD_CDC_Setup+0x11c>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <USBD_CDC_Setup+0xb4>
 8008518:	2b0a      	cmp	r3, #10
 800851a:	d014      	beq.n	8008546 <USBD_CDC_Setup+0xdc>
 800851c:	e033      	b.n	8008586 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008524:	2b03      	cmp	r3, #3
 8008526:	d107      	bne.n	8008538 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008528:	f107 030c 	add.w	r3, r7, #12
 800852c:	2202      	movs	r2, #2
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f9a4 	bl	800987e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008536:	e02e      	b.n	8008596 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 f935 	bl	80097aa <USBD_CtlError>
            ret = USBD_FAIL;
 8008540:	2302      	movs	r3, #2
 8008542:	75fb      	strb	r3, [r7, #23]
          break;
 8008544:	e027      	b.n	8008596 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854c:	2b03      	cmp	r3, #3
 800854e:	d107      	bne.n	8008560 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008550:	f107 030f 	add.w	r3, r7, #15
 8008554:	2201      	movs	r2, #1
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 f990 	bl	800987e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800855e:	e01a      	b.n	8008596 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 f921 	bl	80097aa <USBD_CtlError>
            ret = USBD_FAIL;
 8008568:	2302      	movs	r3, #2
 800856a:	75fb      	strb	r3, [r7, #23]
          break;
 800856c:	e013      	b.n	8008596 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008574:	2b03      	cmp	r3, #3
 8008576:	d00d      	beq.n	8008594 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 f915 	bl	80097aa <USBD_CtlError>
            ret = USBD_FAIL;
 8008580:	2302      	movs	r3, #2
 8008582:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008584:	e006      	b.n	8008594 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 f90e 	bl	80097aa <USBD_CtlError>
          ret = USBD_FAIL;
 800858e:	2302      	movs	r3, #2
 8008590:	75fb      	strb	r3, [r7, #23]
          break;
 8008592:	e000      	b.n	8008596 <USBD_CDC_Setup+0x12c>
          break;
 8008594:	bf00      	nop
      }
      break;
 8008596:	e006      	b.n	80085a6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 f905 	bl	80097aa <USBD_CtlError>
      ret = USBD_FAIL;
 80085a0:	2302      	movs	r3, #2
 80085a2:	75fb      	strb	r3, [r7, #23]
      break;
 80085a4:	bf00      	nop
  }

  return ret;
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ca:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d03a      	beq.n	800864c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	331c      	adds	r3, #28
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d029      	beq.n	8008640 <USBD_CDC_DataIn+0x90>
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	440b      	add	r3, r1
 80085fa:	331c      	adds	r3, #28
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	78f9      	ldrb	r1, [r7, #3]
 8008600:	68b8      	ldr	r0, [r7, #8]
 8008602:	460b      	mov	r3, r1
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4403      	add	r3, r0
 800860c:	3338      	adds	r3, #56	; 0x38
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	fbb2 f1f3 	udiv	r1, r2, r3
 8008614:	fb01 f303 	mul.w	r3, r1, r3
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d110      	bne.n	8008640 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	331c      	adds	r3, #28
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008632:	78f9      	ldrb	r1, [r7, #3]
 8008634:	2300      	movs	r3, #0
 8008636:	2200      	movs	r2, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fd76 	bl	800a12a <USBD_LL_Transmit>
 800863e:	e003      	b.n	8008648 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008668:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fda1 	bl	800a1b6 <USBD_LL_GetRxDataSize>
 8008674:	4602      	mov	r2, r0
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00d      	beq.n	80086a2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800869a:	4611      	mov	r1, r2
 800869c:	4798      	blx	r3

    return USBD_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	e000      	b.n	80086a4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80086a2:	2302      	movs	r3, #2
  }
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d015      	beq.n	80086f2 <USBD_CDC_EP0_RxReady+0x46>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80086cc:	2bff      	cmp	r3, #255	; 0xff
 80086ce:	d010      	beq.n	80086f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80086de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086e6:	b292      	uxth	r2, r2
 80086e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	22ff      	movs	r2, #255	; 0xff
 80086ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2243      	movs	r2, #67	; 0x43
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	; (8008718 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	20000094 	.word	0x20000094

0800871c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2243      	movs	r2, #67	; 0x43
 8008728:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800872a:	4b03      	ldr	r3, [pc, #12]	; (8008738 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000050 	.word	0x20000050

0800873c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2243      	movs	r2, #67	; 0x43
 8008748:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800874a:	4b03      	ldr	r3, [pc, #12]	; (8008758 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	200000d8 	.word	0x200000d8

0800875c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	220a      	movs	r2, #10
 8008768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800876a:	4b03      	ldr	r3, [pc, #12]	; (8008778 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	2000000c 	.word	0x2000000c

0800877c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008786:	2302      	movs	r3, #2
 8008788:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr

080087da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008816:	2b00      	cmp	r3, #0
 8008818:	d017      	beq.n	800884a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	7c1b      	ldrb	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800882c:	2101      	movs	r1, #1
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 fc9e 	bl	800a170 <USBD_LL_PrepareReceive>
 8008834:	e007      	b.n	8008846 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800883c:	2340      	movs	r3, #64	; 0x40
 800883e:	2101      	movs	r1, #1
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fc95 	bl	800a170 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	e000      	b.n	800884c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800884a:	2302      	movs	r3, #2
  }
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4613      	mov	r3, r2
 8008860:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008868:	2302      	movs	r3, #2
 800886a:	e01a      	b.n	80088a2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	79fa      	ldrb	r2, [r7, #7]
 8008898:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f001 fb02 	bl	8009ea4 <USBD_LL_Init>

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
 80088ca:	e001      	b.n	80088d0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088cc:	2302      	movs	r3, #2
 80088ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr

080088dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 fb37 	bl	8009f58 <USBD_LL_Start>

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008914:	2302      	movs	r3, #2
 8008916:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00c      	beq.n	800893c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	4611      	mov	r1, r2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	4611      	mov	r1, r2
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	4798      	blx	r3

  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fed7 	bl	8009732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80089a0:	f003 031f 	and.w	r3, r3, #31
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d016      	beq.n	80089d6 <USBD_LL_SetupStage+0x6a>
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d81c      	bhi.n	80089e6 <USBD_LL_SetupStage+0x7a>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <USBD_LL_SetupStage+0x4a>
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d008      	beq.n	80089c6 <USBD_LL_SetupStage+0x5a>
 80089b4:	e017      	b.n	80089e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f9ca 	bl	8008d58 <USBD_StdDevReq>
      break;
 80089c4:	e01a      	b.n	80089fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa2c 	bl	8008e2c <USBD_StdItfReq>
      break;
 80089d4:	e012      	b.n	80089fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa6c 	bl	8008ebc <USBD_StdEPReq>
      break;
 80089e4:	e00a      	b.n	80089fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80089ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 fb0f 	bl	800a018 <USBD_LL_StallEP>
      break;
 80089fa:	bf00      	nop
  }

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b086      	sub	sp, #24
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d14b      	bne.n	8008ab2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d134      	bne.n	8008a96 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d919      	bls.n	8008a6c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	1ad2      	subs	r2, r2, r3
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d203      	bcs.n	8008a5a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	e002      	b.n	8008a60 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 ff56 	bl	8009916 <USBD_CtlContinueRx>
 8008a6a:	e038      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00a      	beq.n	8008a8e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d105      	bne.n	8008a8e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 ff53 	bl	800993a <USBD_CtlSendStatus>
 8008a94:	e023      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a9c:	2b05      	cmp	r3, #5
 8008a9e:	d11e      	bne.n	8008ade <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f001 fab4 	bl	800a018 <USBD_LL_StallEP>
 8008ab0:	e015      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00d      	beq.n	8008ada <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d108      	bne.n	8008ada <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	7afa      	ldrb	r2, [r7, #11]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	4798      	blx	r3
 8008ad8:	e001      	b.n	8008ade <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ada:	2302      	movs	r3, #2
 8008adc:	e000      	b.n	8008ae0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	460b      	mov	r3, r1
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008af6:	7afb      	ldrb	r3, [r7, #11]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d17f      	bne.n	8008bfc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3314      	adds	r3, #20
 8008b00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d15c      	bne.n	8008bc6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d915      	bls.n	8008b44 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	1ad2      	subs	r2, r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fec0 	bl	80098b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b36:	2300      	movs	r3, #0
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f001 fb17 	bl	800a170 <USBD_LL_PrepareReceive>
 8008b42:	e04e      	b.n	8008be2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	6912      	ldr	r2, [r2, #16]
 8008b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b50:	fb01 f202 	mul.w	r2, r1, r2
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d11c      	bne.n	8008b94 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d316      	bcc.n	8008b94 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	689a      	ldr	r2, [r3, #8]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d20f      	bcs.n	8008b94 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b74:	2200      	movs	r2, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 fe9c 	bl	80098b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b86:	2300      	movs	r3, #0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f001 faef 	bl	800a170 <USBD_LL_PrepareReceive>
 8008b92:	e026      	b.n	8008be2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d105      	bne.n	8008bb6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008bb6:	2180      	movs	r1, #128	; 0x80
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f001 fa2d 	bl	800a018 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fece 	bl	8009960 <USBD_CtlReceiveStatus>
 8008bc4:	e00d      	b.n	8008be2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d004      	beq.n	8008bda <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d103      	bne.n	8008be2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bda:	2180      	movs	r1, #128	; 0x80
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f001 fa1b 	bl	800a018 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d11d      	bne.n	8008c28 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fe81 	bl	80088f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008bfa:	e015      	b.n	8008c28 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00d      	beq.n	8008c24 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d108      	bne.n	8008c24 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	7afa      	ldrb	r2, [r7, #11]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	4798      	blx	r3
 8008c22:	e001      	b.n	8008c28 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c24:	2302      	movs	r3, #2
 8008c26:	e000      	b.n	8008c2a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c3a:	2340      	movs	r3, #64	; 0x40
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 f9a4 	bl	8009f8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2240      	movs	r2, #64	; 0x40
 8008c52:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c56:	2340      	movs	r3, #64	; 0x40
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2180      	movs	r1, #128	; 0x80
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 f996 	bl	8009f8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2240      	movs	r2, #64	; 0x40
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
  }

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	78fa      	ldrb	r2, [r7, #3]
 8008cc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr

08008cd2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2204      	movs	r2, #4
 8008cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bc80      	pop	{r7}
 8008cf8:	4770      	bx	lr

08008cfa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d105      	bne.n	8008d18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d10b      	bne.n	8008d4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d6e:	2b40      	cmp	r3, #64	; 0x40
 8008d70:	d005      	beq.n	8008d7e <USBD_StdDevReq+0x26>
 8008d72:	2b40      	cmp	r3, #64	; 0x40
 8008d74:	d84f      	bhi.n	8008e16 <USBD_StdDevReq+0xbe>
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <USBD_StdDevReq+0x36>
 8008d7a:	2b20      	cmp	r3, #32
 8008d7c:	d14b      	bne.n	8008e16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
      break;
 8008d8c:	e048      	b.n	8008e20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	2b09      	cmp	r3, #9
 8008d94:	d839      	bhi.n	8008e0a <USBD_StdDevReq+0xb2>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <USBD_StdDevReq+0x44>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008ded 	.word	0x08008ded
 8008da0:	08008e01 	.word	0x08008e01
 8008da4:	08008e0b 	.word	0x08008e0b
 8008da8:	08008df7 	.word	0x08008df7
 8008dac:	08008e0b 	.word	0x08008e0b
 8008db0:	08008dcf 	.word	0x08008dcf
 8008db4:	08008dc5 	.word	0x08008dc5
 8008db8:	08008e0b 	.word	0x08008e0b
 8008dbc:	08008de3 	.word	0x08008de3
 8008dc0:	08008dd9 	.word	0x08008dd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f9dc 	bl	8009184 <USBD_GetDescriptor>
          break;
 8008dcc:	e022      	b.n	8008e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fb3f 	bl	8009454 <USBD_SetAddress>
          break;
 8008dd6:	e01d      	b.n	8008e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fb7e 	bl	80094dc <USBD_SetConfig>
          break;
 8008de0:	e018      	b.n	8008e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fc07 	bl	80095f8 <USBD_GetConfig>
          break;
 8008dea:	e013      	b.n	8008e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fc37 	bl	8009662 <USBD_GetStatus>
          break;
 8008df4:	e00e      	b.n	8008e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fc65 	bl	80096c8 <USBD_SetFeature>
          break;
 8008dfe:	e009      	b.n	8008e14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fc74 	bl	80096f0 <USBD_ClrFeature>
          break;
 8008e08:	e004      	b.n	8008e14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fccc 	bl	80097aa <USBD_CtlError>
          break;
 8008e12:	bf00      	nop
      }
      break;
 8008e14:	e004      	b.n	8008e20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fcc6 	bl	80097aa <USBD_CtlError>
      break;
 8008e1e:	bf00      	nop
  }

  return ret;
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop

08008e2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e42:	2b40      	cmp	r3, #64	; 0x40
 8008e44:	d005      	beq.n	8008e52 <USBD_StdItfReq+0x26>
 8008e46:	2b40      	cmp	r3, #64	; 0x40
 8008e48:	d82e      	bhi.n	8008ea8 <USBD_StdItfReq+0x7c>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <USBD_StdItfReq+0x26>
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d12a      	bne.n	8008ea8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d81d      	bhi.n	8008e9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	889b      	ldrh	r3, [r3, #4]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d813      	bhi.n	8008e90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
 8008e76:	4603      	mov	r3, r0
 8008e78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	88db      	ldrh	r3, [r3, #6]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d110      	bne.n	8008ea4 <USBD_StdItfReq+0x78>
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10d      	bne.n	8008ea4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fd56 	bl	800993a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e8e:	e009      	b.n	8008ea4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fc89 	bl	80097aa <USBD_CtlError>
          break;
 8008e98:	e004      	b.n	8008ea4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fc84 	bl	80097aa <USBD_CtlError>
          break;
 8008ea2:	e000      	b.n	8008ea6 <USBD_StdItfReq+0x7a>
          break;
 8008ea4:	bf00      	nop
      }
      break;
 8008ea6:	e004      	b.n	8008eb2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fc7d 	bl	80097aa <USBD_CtlError>
      break;
 8008eb0:	bf00      	nop
  }

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	889b      	ldrh	r3, [r3, #4]
 8008ece:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed8:	2b40      	cmp	r3, #64	; 0x40
 8008eda:	d007      	beq.n	8008eec <USBD_StdEPReq+0x30>
 8008edc:	2b40      	cmp	r3, #64	; 0x40
 8008ede:	f200 8146 	bhi.w	800916e <USBD_StdEPReq+0x2b2>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <USBD_StdEPReq+0x40>
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	f040 8141 	bne.w	800916e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	4798      	blx	r3
      break;
 8008efa:	e13d      	b.n	8009178 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d10a      	bne.n	8008f1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	e12d      	b.n	800917a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	785b      	ldrb	r3, [r3, #1]
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d007      	beq.n	8008f36 <USBD_StdEPReq+0x7a>
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	f300 811b 	bgt.w	8009162 <USBD_StdEPReq+0x2a6>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d072      	beq.n	8009016 <USBD_StdEPReq+0x15a>
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d03a      	beq.n	8008faa <USBD_StdEPReq+0xee>
 8008f34:	e115      	b.n	8009162 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d002      	beq.n	8008f46 <USBD_StdEPReq+0x8a>
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d015      	beq.n	8008f70 <USBD_StdEPReq+0xb4>
 8008f44:	e02b      	b.n	8008f9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00c      	beq.n	8008f66 <USBD_StdEPReq+0xaa>
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b80      	cmp	r3, #128	; 0x80
 8008f50:	d009      	beq.n	8008f66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 f85e 	bl	800a018 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f5c:	2180      	movs	r1, #128	; 0x80
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f85a 	bl	800a018 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f64:	e020      	b.n	8008fa8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc1e 	bl	80097aa <USBD_CtlError>
              break;
 8008f6e:	e01b      	b.n	8008fa8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	885b      	ldrh	r3, [r3, #2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10e      	bne.n	8008f96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <USBD_StdEPReq+0xda>
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b80      	cmp	r3, #128	; 0x80
 8008f82:	d008      	beq.n	8008f96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	88db      	ldrh	r3, [r3, #6]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 f841 	bl	800a018 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fccf 	bl	800993a <USBD_CtlSendStatus>

              break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fc02 	bl	80097aa <USBD_CtlError>
              break;
 8008fa6:	bf00      	nop
          }
          break;
 8008fa8:	e0e0      	b.n	800916c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d002      	beq.n	8008fba <USBD_StdEPReq+0xfe>
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d015      	beq.n	8008fe4 <USBD_StdEPReq+0x128>
 8008fb8:	e026      	b.n	8009008 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00c      	beq.n	8008fda <USBD_StdEPReq+0x11e>
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d009      	beq.n	8008fda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 f824 	bl	800a018 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008fd0:	2180      	movs	r1, #128	; 0x80
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 f820 	bl	800a018 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fd8:	e01c      	b.n	8009014 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fbe4 	bl	80097aa <USBD_CtlError>
              break;
 8008fe2:	e017      	b.n	8009014 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	885b      	ldrh	r3, [r3, #2]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d112      	bne.n	8009012 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d004      	beq.n	8009000 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 f82b 	bl	800a056 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fc9a 	bl	800993a <USBD_CtlSendStatus>
              }
              break;
 8009006:	e004      	b.n	8009012 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fbcd 	bl	80097aa <USBD_CtlError>
              break;
 8009010:	e000      	b.n	8009014 <USBD_StdEPReq+0x158>
              break;
 8009012:	bf00      	nop
          }
          break;
 8009014:	e0aa      	b.n	800916c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800901c:	2b02      	cmp	r3, #2
 800901e:	d002      	beq.n	8009026 <USBD_StdEPReq+0x16a>
 8009020:	2b03      	cmp	r3, #3
 8009022:	d032      	beq.n	800908a <USBD_StdEPReq+0x1ce>
 8009024:	e097      	b.n	8009156 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <USBD_StdEPReq+0x180>
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	2b80      	cmp	r3, #128	; 0x80
 8009030:	d004      	beq.n	800903c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fbb8 	bl	80097aa <USBD_CtlError>
                break;
 800903a:	e091      	b.n	8009160 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800903c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009040:	2b00      	cmp	r3, #0
 8009042:	da0b      	bge.n	800905c <USBD_StdEPReq+0x1a0>
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800904a:	4613      	mov	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	3310      	adds	r3, #16
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	4413      	add	r3, r2
 8009058:	3304      	adds	r3, #4
 800905a:	e00b      	b.n	8009074 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	4413      	add	r3, r2
 8009072:	3304      	adds	r3, #4
 8009074:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2202      	movs	r2, #2
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fbfb 	bl	800987e <USBD_CtlSendData>
              break;
 8009088:	e06a      	b.n	8009160 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800908a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da11      	bge.n	80090b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	3318      	adds	r3, #24
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d117      	bne.n	80090dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb7b 	bl	80097aa <USBD_CtlError>
                  break;
 80090b4:	e054      	b.n	8009160 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fb68 	bl	80097aa <USBD_CtlError>
                  break;
 80090da:	e041      	b.n	8009160 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da0b      	bge.n	80090fc <USBD_StdEPReq+0x240>
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	3310      	adds	r3, #16
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	e00b      	b.n	8009114 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	4413      	add	r3, r2
 8009112:	3304      	adds	r3, #4
 8009114:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <USBD_StdEPReq+0x266>
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	2b80      	cmp	r3, #128	; 0x80
 8009120:	d103      	bne.n	800912a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	e00e      	b.n	8009148 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 ffb0 	bl	800a094 <USBD_LL_IsStallEP>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2201      	movs	r2, #1
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e002      	b.n	8009148 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2202      	movs	r2, #2
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fb95 	bl	800987e <USBD_CtlSendData>
              break;
 8009154:	e004      	b.n	8009160 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fb26 	bl	80097aa <USBD_CtlError>
              break;
 800915e:	bf00      	nop
          }
          break;
 8009160:	e004      	b.n	800916c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fb20 	bl	80097aa <USBD_CtlError>
          break;
 800916a:	bf00      	nop
      }
      break;
 800916c:	e004      	b.n	8009178 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fb1a 	bl	80097aa <USBD_CtlError>
      break;
 8009176:	bf00      	nop
  }

  return ret;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	885b      	ldrh	r3, [r3, #2]
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	2b06      	cmp	r3, #6
 80091a6:	f200 8128 	bhi.w	80093fa <USBD_GetDescriptor+0x276>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <USBD_GetDescriptor+0x2c>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091cd 	.word	0x080091cd
 80091b4:	080091e5 	.word	0x080091e5
 80091b8:	08009225 	.word	0x08009225
 80091bc:	080093fb 	.word	0x080093fb
 80091c0:	080093fb 	.word	0x080093fb
 80091c4:	0800939b 	.word	0x0800939b
 80091c8:	080093c7 	.word	0x080093c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	7c12      	ldrb	r2, [r2, #16]
 80091d8:	f107 0108 	add.w	r1, r7, #8
 80091dc:	4610      	mov	r0, r2
 80091de:	4798      	blx	r3
 80091e0:	60f8      	str	r0, [r7, #12]
      break;
 80091e2:	e112      	b.n	800940a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7c1b      	ldrb	r3, [r3, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10d      	bne.n	8009208 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	f107 0208 	add.w	r2, r7, #8
 80091f8:	4610      	mov	r0, r2
 80091fa:	4798      	blx	r3
 80091fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	2202      	movs	r2, #2
 8009204:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009206:	e100      	b.n	800940a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	f107 0208 	add.w	r2, r7, #8
 8009214:	4610      	mov	r0, r2
 8009216:	4798      	blx	r3
 8009218:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3301      	adds	r3, #1
 800921e:	2202      	movs	r2, #2
 8009220:	701a      	strb	r2, [r3, #0]
      break;
 8009222:	e0f2      	b.n	800940a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	885b      	ldrh	r3, [r3, #2]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b05      	cmp	r3, #5
 800922c:	f200 80ac 	bhi.w	8009388 <USBD_GetDescriptor+0x204>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <USBD_GetDescriptor+0xb4>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009251 	.word	0x08009251
 800923c:	08009285 	.word	0x08009285
 8009240:	080092b9 	.word	0x080092b9
 8009244:	080092ed 	.word	0x080092ed
 8009248:	08009321 	.word	0x08009321
 800924c:	08009355 	.word	0x08009355
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	7c12      	ldrb	r2, [r2, #16]
 8009268:	f107 0108 	add.w	r1, r7, #8
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
 8009270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009272:	e091      	b.n	8009398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fa97 	bl	80097aa <USBD_CtlError>
            err++;
 800927c:	7afb      	ldrb	r3, [r7, #11]
 800927e:	3301      	adds	r3, #1
 8009280:	72fb      	strb	r3, [r7, #11]
          break;
 8009282:	e089      	b.n	8009398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	7c12      	ldrb	r2, [r2, #16]
 800929c:	f107 0108 	add.w	r1, r7, #8
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
 80092a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092a6:	e077      	b.n	8009398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa7d 	bl	80097aa <USBD_CtlError>
            err++;
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	3301      	adds	r3, #1
 80092b4:	72fb      	strb	r3, [r7, #11]
          break;
 80092b6:	e06f      	b.n	8009398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00b      	beq.n	80092dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
 80092d0:	f107 0108 	add.w	r1, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092da:	e05d      	b.n	8009398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fa63 	bl	80097aa <USBD_CtlError>
            err++;
 80092e4:	7afb      	ldrb	r3, [r7, #11]
 80092e6:	3301      	adds	r3, #1
 80092e8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ea:	e055      	b.n	8009398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	7c12      	ldrb	r2, [r2, #16]
 8009304:	f107 0108 	add.w	r1, r7, #8
 8009308:	4610      	mov	r0, r2
 800930a:	4798      	blx	r3
 800930c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800930e:	e043      	b.n	8009398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa49 	bl	80097aa <USBD_CtlError>
            err++;
 8009318:	7afb      	ldrb	r3, [r7, #11]
 800931a:	3301      	adds	r3, #1
 800931c:	72fb      	strb	r3, [r7, #11]
          break;
 800931e:	e03b      	b.n	8009398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	7c12      	ldrb	r2, [r2, #16]
 8009338:	f107 0108 	add.w	r1, r7, #8
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009342:	e029      	b.n	8009398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa2f 	bl	80097aa <USBD_CtlError>
            err++;
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	3301      	adds	r3, #1
 8009350:	72fb      	strb	r3, [r7, #11]
          break;
 8009352:	e021      	b.n	8009398 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	7c12      	ldrb	r2, [r2, #16]
 800936c:	f107 0108 	add.w	r1, r7, #8
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009376:	e00f      	b.n	8009398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa15 	bl	80097aa <USBD_CtlError>
            err++;
 8009380:	7afb      	ldrb	r3, [r7, #11]
 8009382:	3301      	adds	r3, #1
 8009384:	72fb      	strb	r3, [r7, #11]
          break;
 8009386:	e007      	b.n	8009398 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa0d 	bl	80097aa <USBD_CtlError>
          err++;
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	3301      	adds	r3, #1
 8009394:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009396:	e038      	b.n	800940a <USBD_GetDescriptor+0x286>
 8009398:	e037      	b.n	800940a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	7c1b      	ldrb	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d109      	bne.n	80093b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093aa:	f107 0208 	add.w	r2, r7, #8
 80093ae:	4610      	mov	r0, r2
 80093b0:	4798      	blx	r3
 80093b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093b4:	e029      	b.n	800940a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f9f6 	bl	80097aa <USBD_CtlError>
        err++;
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	3301      	adds	r3, #1
 80093c2:	72fb      	strb	r3, [r7, #11]
      break;
 80093c4:	e021      	b.n	800940a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	7c1b      	ldrb	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10d      	bne.n	80093ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d6:	f107 0208 	add.w	r2, r7, #8
 80093da:	4610      	mov	r0, r2
 80093dc:	4798      	blx	r3
 80093de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	2207      	movs	r2, #7
 80093e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093e8:	e00f      	b.n	800940a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f9dc 	bl	80097aa <USBD_CtlError>
        err++;
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	3301      	adds	r3, #1
 80093f6:	72fb      	strb	r3, [r7, #11]
      break;
 80093f8:	e007      	b.n	800940a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f9d4 	bl	80097aa <USBD_CtlError>
      err++;
 8009402:	7afb      	ldrb	r3, [r7, #11]
 8009404:	3301      	adds	r3, #1
 8009406:	72fb      	strb	r3, [r7, #11]
      break;
 8009408:	bf00      	nop
  }

  if (err != 0U)
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d11c      	bne.n	800944a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009410:	893b      	ldrh	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d011      	beq.n	800943a <USBD_GetDescriptor+0x2b6>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	88db      	ldrh	r3, [r3, #6]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	88da      	ldrh	r2, [r3, #6]
 8009422:	893b      	ldrh	r3, [r7, #8]
 8009424:	4293      	cmp	r3, r2
 8009426:	bf28      	it	cs
 8009428:	4613      	movcs	r3, r2
 800942a:	b29b      	uxth	r3, r3
 800942c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800942e:	893b      	ldrh	r3, [r7, #8]
 8009430:	461a      	mov	r2, r3
 8009432:	68f9      	ldr	r1, [r7, #12]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fa22 	bl	800987e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d104      	bne.n	800944c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fa79 	bl	800993a <USBD_CtlSendStatus>
 8009448:	e000      	b.n	800944c <USBD_GetDescriptor+0x2c8>
    return;
 800944a:	bf00      	nop
    }
  }
}
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop

08009454 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	889b      	ldrh	r3, [r3, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d130      	bne.n	80094c8 <USBD_SetAddress+0x74>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	88db      	ldrh	r3, [r3, #6]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d12c      	bne.n	80094c8 <USBD_SetAddress+0x74>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	885b      	ldrh	r3, [r3, #2]
 8009472:	2b7f      	cmp	r3, #127	; 0x7f
 8009474:	d828      	bhi.n	80094c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	885b      	ldrh	r3, [r3, #2]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009488:	2b03      	cmp	r3, #3
 800948a:	d104      	bne.n	8009496 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f98b 	bl	80097aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009494:	e01d      	b.n	80094d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	7bfa      	ldrb	r2, [r7, #15]
 800949a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fe22 	bl	800a0ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fa46 	bl	800993a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d004      	beq.n	80094be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094bc:	e009      	b.n	80094d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	e004      	b.n	80094d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f96d 	bl	80097aa <USBD_CtlError>
  }
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	4b41      	ldr	r3, [pc, #260]	; (80095f4 <USBD_SetConfig+0x118>)
 80094ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094f0:	4b40      	ldr	r3, [pc, #256]	; (80095f4 <USBD_SetConfig+0x118>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d904      	bls.n	8009502 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f955 	bl	80097aa <USBD_CtlError>
 8009500:	e075      	b.n	80095ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009508:	2b02      	cmp	r3, #2
 800950a:	d002      	beq.n	8009512 <USBD_SetConfig+0x36>
 800950c:	2b03      	cmp	r3, #3
 800950e:	d023      	beq.n	8009558 <USBD_SetConfig+0x7c>
 8009510:	e062      	b.n	80095d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009512:	4b38      	ldr	r3, [pc, #224]	; (80095f4 <USBD_SetConfig+0x118>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d01a      	beq.n	8009550 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800951a:	4b36      	ldr	r3, [pc, #216]	; (80095f4 <USBD_SetConfig+0x118>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2203      	movs	r2, #3
 8009528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800952c:	4b31      	ldr	r3, [pc, #196]	; (80095f4 <USBD_SetConfig+0x118>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff f9e8 	bl	8008908 <USBD_SetClassConfig>
 8009538:	4603      	mov	r3, r0
 800953a:	2b02      	cmp	r3, #2
 800953c:	d104      	bne.n	8009548 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f932 	bl	80097aa <USBD_CtlError>
            return;
 8009546:	e052      	b.n	80095ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f9f6 	bl	800993a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800954e:	e04e      	b.n	80095ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f9f2 	bl	800993a <USBD_CtlSendStatus>
        break;
 8009556:	e04a      	b.n	80095ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009558:	4b26      	ldr	r3, [pc, #152]	; (80095f4 <USBD_SetConfig+0x118>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d112      	bne.n	8009586 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009568:	4b22      	ldr	r3, [pc, #136]	; (80095f4 <USBD_SetConfig+0x118>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009572:	4b20      	ldr	r3, [pc, #128]	; (80095f4 <USBD_SetConfig+0x118>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff f9e4 	bl	8008946 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f9db 	bl	800993a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009584:	e033      	b.n	80095ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009586:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <USBD_SetConfig+0x118>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d01d      	beq.n	80095d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff f9d2 	bl	8008946 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <USBD_SetConfig+0x118>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095ac:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <USBD_SetConfig+0x118>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff f9a8 	bl	8008908 <USBD_SetClassConfig>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d104      	bne.n	80095c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f8f2 	bl	80097aa <USBD_CtlError>
            return;
 80095c6:	e012      	b.n	80095ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f9b6 	bl	800993a <USBD_CtlSendStatus>
        break;
 80095ce:	e00e      	b.n	80095ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f9b2 	bl	800993a <USBD_CtlSendStatus>
        break;
 80095d6:	e00a      	b.n	80095ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f8e5 	bl	80097aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095e0:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <USBD_SetConfig+0x118>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff f9ad 	bl	8008946 <USBD_ClrClassConfig>
        break;
 80095ec:	bf00      	nop
    }
  }
}
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	20000550 	.word	0x20000550

080095f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	88db      	ldrh	r3, [r3, #6]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d004      	beq.n	8009614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f8cc 	bl	80097aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009612:	e022      	b.n	800965a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961a:	2b02      	cmp	r3, #2
 800961c:	dc02      	bgt.n	8009624 <USBD_GetConfig+0x2c>
 800961e:	2b00      	cmp	r3, #0
 8009620:	dc03      	bgt.n	800962a <USBD_GetConfig+0x32>
 8009622:	e015      	b.n	8009650 <USBD_GetConfig+0x58>
 8009624:	2b03      	cmp	r3, #3
 8009626:	d00b      	beq.n	8009640 <USBD_GetConfig+0x48>
 8009628:	e012      	b.n	8009650 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3308      	adds	r3, #8
 8009634:	2201      	movs	r2, #1
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f920 	bl	800987e <USBD_CtlSendData>
        break;
 800963e:	e00c      	b.n	800965a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3304      	adds	r3, #4
 8009644:	2201      	movs	r2, #1
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f918 	bl	800987e <USBD_CtlSendData>
        break;
 800964e:	e004      	b.n	800965a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f8a9 	bl	80097aa <USBD_CtlError>
        break;
 8009658:	bf00      	nop
}
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009672:	3b01      	subs	r3, #1
 8009674:	2b02      	cmp	r3, #2
 8009676:	d81e      	bhi.n	80096b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	88db      	ldrh	r3, [r3, #6]
 800967c:	2b02      	cmp	r3, #2
 800967e:	d004      	beq.n	800968a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f891 	bl	80097aa <USBD_CtlError>
        break;
 8009688:	e01a      	b.n	80096c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	f043 0202 	orr.w	r2, r3, #2
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	330c      	adds	r3, #12
 80096aa:	2202      	movs	r2, #2
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f8e5 	bl	800987e <USBD_CtlSendData>
      break;
 80096b4:	e004      	b.n	80096c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f876 	bl	80097aa <USBD_CtlError>
      break;
 80096be:	bf00      	nop
  }
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	885b      	ldrh	r3, [r3, #2]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d106      	bne.n	80096e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f929 	bl	800993a <USBD_CtlSendStatus>
  }
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009700:	3b01      	subs	r3, #1
 8009702:	2b02      	cmp	r3, #2
 8009704:	d80b      	bhi.n	800971e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	885b      	ldrh	r3, [r3, #2]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d10c      	bne.n	8009728 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f90f 	bl	800993a <USBD_CtlSendStatus>
      }
      break;
 800971c:	e004      	b.n	8009728 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f842 	bl	80097aa <USBD_CtlError>
      break;
 8009726:	e000      	b.n	800972a <USBD_ClrFeature+0x3a>
      break;
 8009728:	bf00      	nop
  }
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781a      	ldrb	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	785a      	ldrb	r2, [r3, #1]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	3302      	adds	r3, #2
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b29a      	uxth	r2, r3
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	3303      	adds	r3, #3
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	b29b      	uxth	r3, r3
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	b29b      	uxth	r3, r3
 8009760:	4413      	add	r3, r2
 8009762:	b29a      	uxth	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	3304      	adds	r3, #4
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	b29a      	uxth	r2, r3
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	3305      	adds	r3, #5
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	b29b      	uxth	r3, r3
 8009778:	021b      	lsls	r3, r3, #8
 800977a:	b29b      	uxth	r3, r3
 800977c:	4413      	add	r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	3306      	adds	r3, #6
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	b29a      	uxth	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	3307      	adds	r3, #7
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	021b      	lsls	r3, r3, #8
 8009796:	b29b      	uxth	r3, r3
 8009798:	4413      	add	r3, r2
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	80da      	strh	r2, [r3, #6]

}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc80      	pop	{r7}
 80097a8:	4770      	bx	lr

080097aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80097b4:	2180      	movs	r1, #128	; 0x80
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fc2e 	bl	800a018 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097bc:	2100      	movs	r1, #0
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fc2a 	bl	800a018 <USBD_LL_StallEP>
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d032      	beq.n	8009848 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 f834 	bl	8009850 <USBD_GetLen>
 80097e8:	4603      	mov	r3, r0
 80097ea:	3301      	adds	r3, #1
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	75fa      	strb	r2, [r7, #23]
 80097fc:	461a      	mov	r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	4413      	add	r3, r2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	75fa      	strb	r2, [r7, #23]
 800980e:	461a      	mov	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4413      	add	r3, r2
 8009814:	2203      	movs	r2, #3
 8009816:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009818:	e012      	b.n	8009840 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	60fa      	str	r2, [r7, #12]
 8009820:	7dfa      	ldrb	r2, [r7, #23]
 8009822:	1c51      	adds	r1, r2, #1
 8009824:	75f9      	strb	r1, [r7, #23]
 8009826:	4611      	mov	r1, r2
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	440a      	add	r2, r1
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	75fa      	strb	r2, [r7, #23]
 8009836:	461a      	mov	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4413      	add	r3, r2
 800983c:	2200      	movs	r2, #0
 800983e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1e8      	bne.n	800981a <USBD_GetString+0x4e>
    }
  }
}
 8009848:	bf00      	nop
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800985c:	e005      	b.n	800986a <USBD_GetLen+0x1a>
  {
    len++;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	3301      	adds	r3, #1
 8009862:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3301      	adds	r3, #1
 8009868:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1f5      	bne.n	800985e <USBD_GetLen+0xe>
  }

  return len;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	bc80      	pop	{r7}
 800987c:	4770      	bx	lr

0800987e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	4613      	mov	r3, r2
 800988a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2202      	movs	r2, #2
 8009890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800989a:	88fa      	ldrh	r2, [r7, #6]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	2100      	movs	r1, #0
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fc3f 	bl	800a12a <USBD_LL_Transmit>

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	60f8      	str	r0, [r7, #12]
 80098be:	60b9      	str	r1, [r7, #8]
 80098c0:	4613      	mov	r3, r2
 80098c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098c4:	88fb      	ldrh	r3, [r7, #6]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	2100      	movs	r1, #0
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fc2d 	bl	800a12a <USBD_LL_Transmit>

  return USBD_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	4613      	mov	r3, r2
 80098e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2203      	movs	r2, #3
 80098ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098f0:	88fa      	ldrh	r2, [r7, #6]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80098f8:	88fa      	ldrh	r2, [r7, #6]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009900:	88fb      	ldrh	r3, [r7, #6]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	2100      	movs	r1, #0
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fc32 	bl	800a170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	4613      	mov	r3, r2
 8009922:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009924:	88fb      	ldrh	r3, [r7, #6]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	2100      	movs	r1, #0
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f000 fc20 	bl	800a170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2204      	movs	r2, #4
 8009946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800994a:	2300      	movs	r3, #0
 800994c:	2200      	movs	r2, #0
 800994e:	2100      	movs	r1, #0
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fbea 	bl	800a12a <USBD_LL_Transmit>

  return USBD_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2205      	movs	r2, #5
 800996c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009970:	2300      	movs	r3, #0
 8009972:	2200      	movs	r2, #0
 8009974:	2100      	movs	r1, #0
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fbfa 	bl	800a170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800998c:	2200      	movs	r2, #0
 800998e:	4912      	ldr	r1, [pc, #72]	; (80099d8 <MX_USB_DEVICE_Init+0x50>)
 8009990:	4812      	ldr	r0, [pc, #72]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 8009992:	f7fe ff5f 	bl	8008854 <USBD_Init>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800999c:	f7f6 ff60 	bl	8000860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099a0:	490f      	ldr	r1, [pc, #60]	; (80099e0 <MX_USB_DEVICE_Init+0x58>)
 80099a2:	480e      	ldr	r0, [pc, #56]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 80099a4:	f7fe ff81 	bl	80088aa <USBD_RegisterClass>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099ae:	f7f6 ff57 	bl	8000860 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099b2:	490c      	ldr	r1, [pc, #48]	; (80099e4 <MX_USB_DEVICE_Init+0x5c>)
 80099b4:	4809      	ldr	r0, [pc, #36]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 80099b6:	f7fe fee1 	bl	800877c <USBD_CDC_RegisterInterface>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099c0:	f7f6 ff4e 	bl	8000860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099c4:	4805      	ldr	r0, [pc, #20]	; (80099dc <MX_USB_DEVICE_Init+0x54>)
 80099c6:	f7fe ff89 	bl	80088dc <USBD_Start>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099d0:	f7f6 ff46 	bl	8000860 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099d4:	bf00      	nop
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	2000012c 	.word	0x2000012c
 80099dc:	20000554 	.word	0x20000554
 80099e0:	20000018 	.word	0x20000018
 80099e4:	2000011c 	.word	0x2000011c

080099e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099ec:	2200      	movs	r2, #0
 80099ee:	4905      	ldr	r1, [pc, #20]	; (8009a04 <CDC_Init_FS+0x1c>)
 80099f0:	4805      	ldr	r0, [pc, #20]	; (8009a08 <CDC_Init_FS+0x20>)
 80099f2:	f7fe fed9 	bl	80087a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099f6:	4905      	ldr	r1, [pc, #20]	; (8009a0c <CDC_Init_FS+0x24>)
 80099f8:	4803      	ldr	r0, [pc, #12]	; (8009a08 <CDC_Init_FS+0x20>)
 80099fa:	f7fe feee 	bl	80087da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000c00 	.word	0x20000c00
 8009a08:	20000554 	.word	0x20000554
 8009a0c:	20000818 	.word	0x20000818

08009a10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bc80      	pop	{r7}
 8009a1c:	4770      	bx	lr
	...

08009a20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	6039      	str	r1, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b23      	cmp	r3, #35	; 0x23
 8009a34:	d84a      	bhi.n	8009acc <CDC_Control_FS+0xac>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <CDC_Control_FS+0x1c>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009acd 	.word	0x08009acd
 8009a40:	08009acd 	.word	0x08009acd
 8009a44:	08009acd 	.word	0x08009acd
 8009a48:	08009acd 	.word	0x08009acd
 8009a4c:	08009acd 	.word	0x08009acd
 8009a50:	08009acd 	.word	0x08009acd
 8009a54:	08009acd 	.word	0x08009acd
 8009a58:	08009acd 	.word	0x08009acd
 8009a5c:	08009acd 	.word	0x08009acd
 8009a60:	08009acd 	.word	0x08009acd
 8009a64:	08009acd 	.word	0x08009acd
 8009a68:	08009acd 	.word	0x08009acd
 8009a6c:	08009acd 	.word	0x08009acd
 8009a70:	08009acd 	.word	0x08009acd
 8009a74:	08009acd 	.word	0x08009acd
 8009a78:	08009acd 	.word	0x08009acd
 8009a7c:	08009acd 	.word	0x08009acd
 8009a80:	08009acd 	.word	0x08009acd
 8009a84:	08009acd 	.word	0x08009acd
 8009a88:	08009acd 	.word	0x08009acd
 8009a8c:	08009acd 	.word	0x08009acd
 8009a90:	08009acd 	.word	0x08009acd
 8009a94:	08009acd 	.word	0x08009acd
 8009a98:	08009acd 	.word	0x08009acd
 8009a9c:	08009acd 	.word	0x08009acd
 8009aa0:	08009acd 	.word	0x08009acd
 8009aa4:	08009acd 	.word	0x08009acd
 8009aa8:	08009acd 	.word	0x08009acd
 8009aac:	08009acd 	.word	0x08009acd
 8009ab0:	08009acd 	.word	0x08009acd
 8009ab4:	08009acd 	.word	0x08009acd
 8009ab8:	08009acd 	.word	0x08009acd
 8009abc:	08009acd 	.word	0x08009acd
 8009ac0:	08009acd 	.word	0x08009acd
 8009ac4:	08009acd 	.word	0x08009acd
 8009ac8:	08009acd 	.word	0x08009acd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009acc:	bf00      	nop
  }

  return (USBD_OK);
 8009ace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bc80      	pop	{r7}
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop

08009adc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	4805      	ldr	r0, [pc, #20]	; (8009b00 <CDC_Receive_FS+0x24>)
 8009aea:	f7fe fe76 	bl	80087da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009aee:	4804      	ldr	r0, [pc, #16]	; (8009b00 <CDC_Receive_FS+0x24>)
 8009af0:	f7fe fe86 	bl	8008800 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009af4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000554 	.word	0x20000554

08009b04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	6039      	str	r1, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2212      	movs	r2, #18
 8009b14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b16:	4b03      	ldr	r3, [pc, #12]	; (8009b24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bc80      	pop	{r7}
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000148 	.word	0x20000148

08009b28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	6039      	str	r1, [r7, #0]
 8009b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2204      	movs	r2, #4
 8009b38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b3a:	4b03      	ldr	r3, [pc, #12]	; (8009b48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	2000015c 	.word	0x2000015c

08009b4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	6039      	str	r1, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b58:	79fb      	ldrb	r3, [r7, #7]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d105      	bne.n	8009b6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4907      	ldr	r1, [pc, #28]	; (8009b80 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b62:	4808      	ldr	r0, [pc, #32]	; (8009b84 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b64:	f7ff fe32 	bl	80097cc <USBD_GetString>
 8009b68:	e004      	b.n	8009b74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	4904      	ldr	r1, [pc, #16]	; (8009b80 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b6e:	4805      	ldr	r0, [pc, #20]	; (8009b84 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b70:	f7ff fe2c 	bl	80097cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000fe8 	.word	0x20000fe8
 8009b84:	0800a960 	.word	0x0800a960

08009b88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	4904      	ldr	r1, [pc, #16]	; (8009ba8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b98:	4804      	ldr	r0, [pc, #16]	; (8009bac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b9a:	f7ff fe17 	bl	80097cc <USBD_GetString>
  return USBD_StrDesc;
 8009b9e:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000fe8 	.word	0x20000fe8
 8009bac:	0800a978 	.word	0x0800a978

08009bb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	221a      	movs	r2, #26
 8009bc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bc2:	f000 f843 	bl	8009c4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009bc6:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20000160 	.word	0x20000160

08009bd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	6039      	str	r1, [r7, #0]
 8009bde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d105      	bne.n	8009bf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	4907      	ldr	r1, [pc, #28]	; (8009c08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bea:	4808      	ldr	r0, [pc, #32]	; (8009c0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bec:	f7ff fdee 	bl	80097cc <USBD_GetString>
 8009bf0:	e004      	b.n	8009bfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	4904      	ldr	r1, [pc, #16]	; (8009c08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bf6:	4805      	ldr	r0, [pc, #20]	; (8009c0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bf8:	f7ff fde8 	bl	80097cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bfc:	4b02      	ldr	r3, [pc, #8]	; (8009c08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000fe8 	.word	0x20000fe8
 8009c0c:	0800a98c 	.word	0x0800a98c

08009c10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4907      	ldr	r1, [pc, #28]	; (8009c44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c26:	4808      	ldr	r0, [pc, #32]	; (8009c48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c28:	f7ff fdd0 	bl	80097cc <USBD_GetString>
 8009c2c:	e004      	b.n	8009c38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4904      	ldr	r1, [pc, #16]	; (8009c44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c32:	4805      	ldr	r0, [pc, #20]	; (8009c48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c34:	f7ff fdca 	bl	80097cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c38:	4b02      	ldr	r3, [pc, #8]	; (8009c44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20000fe8 	.word	0x20000fe8
 8009c48:	0800a998 	.word	0x0800a998

08009c4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <Get_SerialNum+0x44>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c58:	4b0e      	ldr	r3, [pc, #56]	; (8009c94 <Get_SerialNum+0x48>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <Get_SerialNum+0x4c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4413      	add	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d009      	beq.n	8009c86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c72:	2208      	movs	r2, #8
 8009c74:	4909      	ldr	r1, [pc, #36]	; (8009c9c <Get_SerialNum+0x50>)
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f814 	bl	8009ca4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c7c:	2204      	movs	r2, #4
 8009c7e:	4908      	ldr	r1, [pc, #32]	; (8009ca0 <Get_SerialNum+0x54>)
 8009c80:	68b8      	ldr	r0, [r7, #8]
 8009c82:	f000 f80f 	bl	8009ca4 <IntToUnicode>
  }
}
 8009c86:	bf00      	nop
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	1ffff7e8 	.word	0x1ffff7e8
 8009c94:	1ffff7ec 	.word	0x1ffff7ec
 8009c98:	1ffff7f0 	.word	0x1ffff7f0
 8009c9c:	20000162 	.word	0x20000162
 8009ca0:	20000172 	.word	0x20000172

08009ca4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	75fb      	strb	r3, [r7, #23]
 8009cba:	e027      	b.n	8009d0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	0f1b      	lsrs	r3, r3, #28
 8009cc0:	2b09      	cmp	r3, #9
 8009cc2:	d80b      	bhi.n	8009cdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	0f1b      	lsrs	r3, r3, #28
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	440b      	add	r3, r1
 8009cd4:	3230      	adds	r2, #48	; 0x30
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	701a      	strb	r2, [r3, #0]
 8009cda:	e00a      	b.n	8009cf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	0f1b      	lsrs	r3, r3, #28
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	440b      	add	r3, r1
 8009cec:	3237      	adds	r2, #55	; 0x37
 8009cee:	b2d2      	uxtb	r2, r2
 8009cf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	4413      	add	r3, r2
 8009d02:	2200      	movs	r2, #0
 8009d04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	75fb      	strb	r3, [r7, #23]
 8009d0c:	7dfa      	ldrb	r2, [r7, #23]
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d3d3      	bcc.n	8009cbc <IntToUnicode+0x18>
  }
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	371c      	adds	r7, #28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bc80      	pop	{r7}
 8009d1e:	4770      	bx	lr

08009d20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a0d      	ldr	r2, [pc, #52]	; (8009d64 <HAL_PCD_MspInit+0x44>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d113      	bne.n	8009d5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d32:	4b0d      	ldr	r3, [pc, #52]	; (8009d68 <HAL_PCD_MspInit+0x48>)
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	4a0c      	ldr	r2, [pc, #48]	; (8009d68 <HAL_PCD_MspInit+0x48>)
 8009d38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d3c:	61d3      	str	r3, [r2, #28]
 8009d3e:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <HAL_PCD_MspInit+0x48>)
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	2014      	movs	r0, #20
 8009d50:	f7f7 fac5 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009d54:	2014      	movs	r0, #20
 8009d56:	f7f7 fade 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	40005c00 	.word	0x40005c00
 8009d68:	40021000 	.word	0x40021000

08009d6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009d80:	4619      	mov	r1, r3
 8009d82:	4610      	mov	r0, r2
 8009d84:	f7fe fdf2 	bl	800896c <USBD_LL_SetupStage>
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	440b      	add	r3, r1
 8009db0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	78fb      	ldrb	r3, [r7, #3]
 8009db8:	4619      	mov	r1, r3
 8009dba:	f7fe fe24 	bl	8008a06 <USBD_LL_DataOutStage>
}
 8009dbe:	bf00      	nop
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b082      	sub	sp, #8
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009dd8:	78fa      	ldrb	r2, [r7, #3]
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	440b      	add	r3, r1
 8009de6:	333c      	adds	r3, #60	; 0x3c
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	78fb      	ldrb	r3, [r7, #3]
 8009dec:	4619      	mov	r1, r3
 8009dee:	f7fe fe7b 	bl	8008ae8 <USBD_LL_DataInStage>
}
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe ff8b 	bl	8008d24 <USBD_LL_SOF>
}
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d001      	beq.n	8009e2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e2a:	f7f6 fd19 	bl	8000860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e34:	7bfa      	ldrb	r2, [r7, #15]
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe ff3b 	bl	8008cb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fef4 	bl	8008c32 <USBD_LL_Reset>
}
 8009e4a:	bf00      	nop
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe ff35 	bl	8008cd2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d005      	beq.n	8009e7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e70:	4b04      	ldr	r3, [pc, #16]	; (8009e84 <HAL_PCD_SuspendCallback+0x30>)
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	4a03      	ldr	r2, [pc, #12]	; (8009e84 <HAL_PCD_SuspendCallback+0x30>)
 8009e76:	f043 0306 	orr.w	r3, r3, #6
 8009e7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	e000ed00 	.word	0xe000ed00

08009e88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe ff2f 	bl	8008cfa <USBD_LL_Resume>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009eac:	4a28      	ldr	r2, [pc, #160]	; (8009f50 <USBD_LL_Init+0xac>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a26      	ldr	r2, [pc, #152]	; (8009f50 <USBD_LL_Init+0xac>)
 8009eb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ebc:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <USBD_LL_Init+0xac>)
 8009ebe:	4a25      	ldr	r2, [pc, #148]	; (8009f54 <USBD_LL_Init+0xb0>)
 8009ec0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ec2:	4b23      	ldr	r3, [pc, #140]	; (8009f50 <USBD_LL_Init+0xac>)
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ec8:	4b21      	ldr	r3, [pc, #132]	; (8009f50 <USBD_LL_Init+0xac>)
 8009eca:	2202      	movs	r2, #2
 8009ecc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ece:	4b20      	ldr	r3, [pc, #128]	; (8009f50 <USBD_LL_Init+0xac>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ed4:	4b1e      	ldr	r3, [pc, #120]	; (8009f50 <USBD_LL_Init+0xac>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009eda:	4b1d      	ldr	r3, [pc, #116]	; (8009f50 <USBD_LL_Init+0xac>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ee0:	481b      	ldr	r0, [pc, #108]	; (8009f50 <USBD_LL_Init+0xac>)
 8009ee2:	f7f8 f98d 	bl	8002200 <HAL_PCD_Init>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009eec:	f7f6 fcb8 	bl	8000860 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ef6:	2318      	movs	r3, #24
 8009ef8:	2200      	movs	r2, #0
 8009efa:	2100      	movs	r1, #0
 8009efc:	f7f9 fe01 	bl	8003b02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f06:	2358      	movs	r3, #88	; 0x58
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2180      	movs	r1, #128	; 0x80
 8009f0c:	f7f9 fdf9 	bl	8003b02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f16:	23c0      	movs	r3, #192	; 0xc0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2181      	movs	r1, #129	; 0x81
 8009f1c:	f7f9 fdf1 	bl	8003b02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	f7f9 fde8 	bl	8003b02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2182      	movs	r1, #130	; 0x82
 8009f40:	f7f9 fddf 	bl	8003b02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	200011e8 	.word	0x200011e8
 8009f54:	40005c00 	.word	0x40005c00

08009f58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7f8 fa51 	bl	8002416 <HAL_PCD_Start>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 f94e 	bl	800a21c <USBD_Get_USB_Status>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b084      	sub	sp, #16
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	70fb      	strb	r3, [r7, #3]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70bb      	strb	r3, [r7, #2]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009fb6:	78bb      	ldrb	r3, [r7, #2]
 8009fb8:	883a      	ldrh	r2, [r7, #0]
 8009fba:	78f9      	ldrb	r1, [r7, #3]
 8009fbc:	f7f8 fbc9 	bl	8002752 <HAL_PCD_EP_Open>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f928 	bl	800a21c <USBD_Get_USB_Status>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f8 fc10 	bl	800281e <HAL_PCD_EP_Close>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	4618      	mov	r0, r3
 800a006:	f000 f909 	bl	800a21c <USBD_Get_USB_Status>
 800a00a:	4603      	mov	r3, r0
 800a00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	4611      	mov	r1, r2
 800a036:	4618      	mov	r0, r3
 800a038:	f7f8 fcd0 	bl	80029dc <HAL_PCD_EP_SetStall>
 800a03c:	4603      	mov	r3, r0
 800a03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	4618      	mov	r0, r3
 800a044:	f000 f8ea 	bl	800a21c <USBD_Get_USB_Status>
 800a048:	4603      	mov	r3, r0
 800a04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a070:	78fa      	ldrb	r2, [r7, #3]
 800a072:	4611      	mov	r1, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f7f8 fd11 	bl	8002a9c <HAL_PCD_EP_ClrStall>
 800a07a:	4603      	mov	r3, r0
 800a07c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	4618      	mov	r0, r3
 800a082:	f000 f8cb 	bl	800a21c <USBD_Get_USB_Status>
 800a086:	4603      	mov	r3, r0
 800a088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	da0c      	bge.n	800a0ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b6:	68f9      	ldr	r1, [r7, #12]
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	440b      	add	r3, r1
 800a0c4:	3302      	adds	r3, #2
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	e00b      	b.n	800a0e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0d0:	68f9      	ldr	r1, [r7, #12]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	440b      	add	r3, r1
 800a0dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a0e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bc80      	pop	{r7}
 800a0ea:	4770      	bx	lr

0800a0ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a106:	78fa      	ldrb	r2, [r7, #3]
 800a108:	4611      	mov	r1, r2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f8 fafc 	bl	8002708 <HAL_PCD_SetAddress>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a114:	7bfb      	ldrb	r3, [r7, #15]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f880 	bl	800a21c <USBD_Get_USB_Status>
 800a11c:	4603      	mov	r3, r0
 800a11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a120:	7bbb      	ldrb	r3, [r7, #14]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b086      	sub	sp, #24
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	461a      	mov	r2, r3
 800a136:	460b      	mov	r3, r1
 800a138:	72fb      	strb	r3, [r7, #11]
 800a13a:	4613      	mov	r3, r2
 800a13c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a14c:	893b      	ldrh	r3, [r7, #8]
 800a14e:	7af9      	ldrb	r1, [r7, #11]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	f7f8 fc00 	bl	8002956 <HAL_PCD_EP_Transmit>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f85d 	bl	800a21c <USBD_Get_USB_Status>
 800a162:	4603      	mov	r3, r0
 800a164:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a166:	7dbb      	ldrb	r3, [r7, #22]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	461a      	mov	r2, r3
 800a17c:	460b      	mov	r3, r1
 800a17e:	72fb      	strb	r3, [r7, #11]
 800a180:	4613      	mov	r3, r2
 800a182:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a192:	893b      	ldrh	r3, [r7, #8]
 800a194:	7af9      	ldrb	r1, [r7, #11]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	f7f8 fb89 	bl	80028ae <HAL_PCD_EP_Receive>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f83a 	bl	800a21c <USBD_Get_USB_Status>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7f8 fbab 	bl	8002928 <HAL_PCD_EP_GetRxCount>
 800a1d2:	4603      	mov	r3, r0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1e4:	4b02      	ldr	r3, [pc, #8]	; (800a1f0 <USBD_static_malloc+0x14>)
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bc80      	pop	{r7}
 800a1ee:	4770      	bx	lr
 800a1f0:	200014d4 	.word	0x200014d4

0800a1f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr

0800a206 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	bc80      	pop	{r7}
 800a21a:	4770      	bx	lr

0800a21c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d817      	bhi.n	800a260 <USBD_Get_USB_Status+0x44>
 800a230:	a201      	add	r2, pc, #4	; (adr r2, 800a238 <USBD_Get_USB_Status+0x1c>)
 800a232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a236:	bf00      	nop
 800a238:	0800a249 	.word	0x0800a249
 800a23c:	0800a24f 	.word	0x0800a24f
 800a240:	0800a255 	.word	0x0800a255
 800a244:	0800a25b 	.word	0x0800a25b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73fb      	strb	r3, [r7, #15]
    break;
 800a24c:	e00b      	b.n	800a266 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a24e:	2302      	movs	r3, #2
 800a250:	73fb      	strb	r3, [r7, #15]
    break;
 800a252:	e008      	b.n	800a266 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a254:	2301      	movs	r3, #1
 800a256:	73fb      	strb	r3, [r7, #15]
    break;
 800a258:	e005      	b.n	800a266 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a25a:	2302      	movs	r3, #2
 800a25c:	73fb      	strb	r3, [r7, #15]
    break;
 800a25e:	e002      	b.n	800a266 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a260:	2302      	movs	r3, #2
 800a262:	73fb      	strb	r3, [r7, #15]
    break;
 800a264:	bf00      	nop
  }
  return usb_status;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bc80      	pop	{r7}
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop

0800a274 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency an desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 800a27c:	4a18      	ldr	r2, [pc, #96]	; (800a2e0 <si5351_Init+0x6c>)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800a282:	21ff      	movs	r1, #255	; 0xff
 800a284:	2003      	movs	r0, #3
 800a286:	f000 f9e5 	bl	800a654 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 800a28a:	2180      	movs	r1, #128	; 0x80
 800a28c:	2010      	movs	r0, #16
 800a28e:	f000 f9e1 	bl	800a654 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800a292:	2180      	movs	r1, #128	; 0x80
 800a294:	2011      	movs	r0, #17
 800a296:	f000 f9dd 	bl	800a654 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 800a29a:	2180      	movs	r1, #128	; 0x80
 800a29c:	2012      	movs	r0, #18
 800a29e:	f000 f9d9 	bl	800a654 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800a2a2:	2180      	movs	r1, #128	; 0x80
 800a2a4:	2013      	movs	r0, #19
 800a2a6:	f000 f9d5 	bl	800a654 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 800a2aa:	2180      	movs	r1, #128	; 0x80
 800a2ac:	2014      	movs	r0, #20
 800a2ae:	f000 f9d1 	bl	800a654 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800a2b2:	2180      	movs	r1, #128	; 0x80
 800a2b4:	2015      	movs	r0, #21
 800a2b6:	f000 f9cd 	bl	800a654 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 800a2ba:	2180      	movs	r1, #128	; 0x80
 800a2bc:	2016      	movs	r0, #22
 800a2be:	f000 f9c9 	bl	800a654 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800a2c2:	2180      	movs	r1, #128	; 0x80
 800a2c4:	2017      	movs	r0, #23
 800a2c6:	f000 f9c5 	bl	800a654 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 800a2ca:	23c0      	movs	r3, #192	; 0xc0
 800a2cc:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	20b7      	movs	r0, #183	; 0xb7
 800a2d4:	f000 f9be 	bl	800a654 <si5351_write>
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	200016f4 	.word	0x200016f4

0800a2e4 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08c      	sub	sp, #48	; 0x30
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t num = conf->num;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 800a302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a304:	01da      	lsls	r2, r3, #7
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	01d9      	lsls	r1, r3, #7
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	fb91 f3f3 	sdiv	r3, r1, r3
 800a310:	4413      	add	r3, r2
 800a312:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a316:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	01db      	lsls	r3, r3, #7
 800a31c:	69fa      	ldr	r2, [r7, #28]
 800a31e:	fb93 f2f2 	sdiv	r2, r3, r2
 800a322:	69f9      	ldr	r1, [r7, #28]
 800a324:	fb01 f202 	mul.w	r2, r1, r2
 800a328:	1a9b      	subs	r3, r3, r2
 800a32a:	617b      	str	r3, [r7, #20]
    P3 = denom;
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <si5351_SetupPLL+0x56>
 800a336:	231a      	movs	r3, #26
 800a338:	e000      	b.n	800a33c <si5351_SetupPLL+0x58>
 800a33a:	2322      	movs	r3, #34	; 0x22
 800a33c:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800a33e:	7bf8      	ldrb	r0, [r7, #15]
 800a340:	2300      	movs	r3, #0
 800a342:	9301      	str	r3, [sp, #4]
 800a344:	2300      	movs	r3, #0
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	69b9      	ldr	r1, [r7, #24]
 800a34e:	f000 f9a9 	bl	800a6a4 <si5351_writeBulk>

    // Reset both PLLs
    //si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
}
 800a352:	bf00      	nop
 800a354:	3728      	adds	r7, #40	; 0x28
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b08c      	sub	sp, #48	; 0x30
 800a35e:	af02      	add	r7, sp, #8
 800a360:	603b      	str	r3, [r7, #0]
 800a362:	4603      	mov	r3, r0
 800a364:	71fb      	strb	r3, [r7, #7]
 800a366:	460b      	mov	r3, r1
 800a368:	71bb      	strb	r3, [r7, #6]
 800a36a:	4613      	mov	r3, r2
 800a36c:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d901      	bls.n	800a390 <si5351_SetupOutput+0x36>
        return 1;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e08d      	b.n	800a4ac <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <si5351_SetupOutput+0x54>
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b07      	cmp	r3, #7
 800a39c:	dd05      	ble.n	800a3aa <si5351_SetupOutput+0x50>
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d104      	bne.n	800a3ae <si5351_SetupOutput+0x54>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e07e      	b.n	800a4ac <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d109      	bne.n	800a3c8 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3c6:	e016      	b.n	800a3f6 <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	01da      	lsls	r2, r3, #7
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	01d9      	lsls	r1, r3, #7
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	fb91 f3f3 	sdiv	r3, r1, r3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a3dc:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	01db      	lsls	r3, r3, #7
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	fb93 f2f2 	sdiv	r2, r3, r2
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	fb01 f202 	mul.w	r2, r1, r2
 800a3ee:	1a9b      	subs	r3, r3, r2
 800a3f0:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	757b      	strb	r3, [r7, #21]
    switch (output) {
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d014      	beq.n	800a432 <si5351_SetupOutput+0xd8>
 800a408:	2b02      	cmp	r3, #2
 800a40a:	dc19      	bgt.n	800a440 <si5351_SetupOutput+0xe6>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <si5351_SetupOutput+0xbc>
 800a410:	2b01      	cmp	r3, #1
 800a412:	d007      	beq.n	800a424 <si5351_SetupOutput+0xca>
 800a414:	e014      	b.n	800a440 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 800a416:	232a      	movs	r3, #42	; 0x2a
 800a418:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 800a41a:	23a5      	movs	r3, #165	; 0xa5
 800a41c:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 800a41e:	2310      	movs	r3, #16
 800a420:	757b      	strb	r3, [r7, #21]
        break;
 800a422:	e00d      	b.n	800a440 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800a424:	2332      	movs	r3, #50	; 0x32
 800a426:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 800a428:	23a6      	movs	r3, #166	; 0xa6
 800a42a:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 800a42c:	2311      	movs	r3, #17
 800a42e:	757b      	strb	r3, [r7, #21]
        break;
 800a430:	e006      	b.n	800a440 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800a432:	233a      	movs	r3, #58	; 0x3a
 800a434:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800a436:	23a7      	movs	r3, #167	; 0xa7
 800a438:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800a43a:	2312      	movs	r3, #18
 800a43c:	757b      	strb	r3, [r7, #21]
        break;
 800a43e:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 800a440:	797b      	ldrb	r3, [r7, #5]
 800a442:	f043 030c 	orr.w	r3, r3, #12
 800a446:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 800a448:	79bb      	ldrb	r3, [r7, #6]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d103      	bne.n	800a456 <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 800a44e:	7d3b      	ldrb	r3, [r7, #20]
 800a450:	f043 0320 	orr.w	r3, r3, #32
 800a454:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d009      	beq.n	800a472 <si5351_SetupOutput+0x118>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <si5351_SetupOutput+0x110>
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	2b04      	cmp	r3, #4
 800a468:	d103      	bne.n	800a472 <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800a46a:	7d3b      	ldrb	r3, [r7, #20]
 800a46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a470:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800a472:	7d3a      	ldrb	r2, [r7, #20]
 800a474:	7d7b      	ldrb	r3, [r7, #21]
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 f8eb 	bl	800a654 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	7c1b      	ldrb	r3, [r3, #16]
 800a482:	7df8      	ldrb	r0, [r7, #23]
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	69fa      	ldr	r2, [r7, #28]
 800a490:	6a39      	ldr	r1, [r7, #32]
 800a492:	f000 f907 	bl	800a6a4 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800a496:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a49a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	7dbb      	ldrb	r3, [r7, #22]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 f8d5 	bl	800a654 <si5351_write>

    return 0;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3728      	adds	r7, #40	; 0x28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 800a4b4:	b480      	push	{r7}
 800a4b6:	b08f      	sub	sp, #60	; 0x3c
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a4c6:	da03      	bge.n	800a4d0 <si5351_Calc+0x1c>
 800a4c8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	e005      	b.n	800a4dc <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4a4e      	ldr	r2, [pc, #312]	; (800a60c <si5351_Calc+0x158>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	dd01      	ble.n	800a4dc <si5351_Calc+0x28>
 800a4d8:	4b4c      	ldr	r3, [pc, #304]	; (800a60c <si5351_Calc+0x158>)
 800a4da:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4a4a      	ldr	r2, [pc, #296]	; (800a610 <si5351_Calc+0x15c>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	dc06      	bgt.n	800a4f8 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	019b      	lsls	r3, r3, #6
 800a4ee:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2206      	movs	r2, #6
 800a4f4:	741a      	strb	r2, [r3, #16]
 800a4f6:	e002      	b.n	800a4fe <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - ((Fclk/1000000)*si5351Correction)/100;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4a44      	ldr	r2, [pc, #272]	; (800a614 <si5351_Calc+0x160>)
 800a502:	fb82 1203 	smull	r1, r2, r2, r3
 800a506:	1492      	asrs	r2, r2, #18
 800a508:	17db      	asrs	r3, r3, #31
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	4a42      	ldr	r2, [pc, #264]	; (800a618 <si5351_Calc+0x164>)
 800a50e:	6812      	ldr	r2, [r2, #0]
 800a510:	fb02 f303 	mul.w	r3, r2, r3
 800a514:	4a41      	ldr	r2, [pc, #260]	; (800a61c <si5351_Calc+0x168>)
 800a516:	fb82 1203 	smull	r1, r2, r2, r3
 800a51a:	1152      	asrs	r2, r2, #5
 800a51c:	17db      	asrs	r3, r3, #31
 800a51e:	1a9b      	subs	r3, r3, r2
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4413      	add	r3, r2
 800a524:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800a526:	4b3e      	ldr	r3, [pc, #248]	; (800a620 <si5351_Calc+0x16c>)
 800a528:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4a3d      	ldr	r2, [pc, #244]	; (800a624 <si5351_Calc+0x170>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	dc22      	bgt.n	800a578 <si5351_Calc+0xc4>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 800a532:	2324      	movs	r3, #36	; 0x24
 800a534:	637b      	str	r3, [r7, #52]	; 0x34
        b = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	633b      	str	r3, [r7, #48]	; 0x30
        c = 1;
 800a53a:	2301      	movs	r3, #1
 800a53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t Fpll = 900000000;
 800a53e:	4b3a      	ldr	r3, [pc, #232]	; (800a628 <si5351_Calc+0x174>)
 800a540:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	fb92 f3f3 	sdiv	r3, r2, r3
 800a54a:	62bb      	str	r3, [r7, #40]	; 0x28
        t = (Fclk >> 20) + 1;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	151b      	asrs	r3, r3, #20
 800a550:	3301      	adds	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	fb93 f2f2 	sdiv	r2, r3, r2
 800a55c:	68f9      	ldr	r1, [r7, #12]
 800a55e:	fb01 f202 	mul.w	r2, r1, r2
 800a562:	1a9a      	subs	r2, r3, r2
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	fb92 f3f3 	sdiv	r3, r2, r3
 800a56a:	627b      	str	r3, [r7, #36]	; 0x24
        z = Fclk / t;
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	fb92 f3f3 	sdiv	r3, r2, r3
 800a574:	623b      	str	r3, [r7, #32]
 800a576:	e032      	b.n	800a5de <si5351_Calc+0x12a>
    }

    else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4a2c      	ldr	r2, [pc, #176]	; (800a62c <si5351_Calc+0x178>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	dd02      	ble.n	800a586 <si5351_Calc+0xd2>
            x = 4;
 800a580:	2304      	movs	r3, #4
 800a582:	62bb      	str	r3, [r7, #40]	; 0x28
 800a584:	e008      	b.n	800a598 <si5351_Calc+0xe4>
        } else if (Fclk >= 100000000) {
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	4a29      	ldr	r2, [pc, #164]	; (800a630 <si5351_Calc+0x17c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	dd02      	ble.n	800a594 <si5351_Calc+0xe0>
            x = 6;
 800a58e:	2306      	movs	r3, #6
 800a590:	62bb      	str	r3, [r7, #40]	; 0x28
 800a592:	e001      	b.n	800a598 <si5351_Calc+0xe4>
        } else {
            x = 8;
 800a594:	2308      	movs	r3, #8
 800a596:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        y = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
        z = 1;
 800a59c:	2301      	movs	r3, #1
 800a59e:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	fb02 f303 	mul.w	r3, r2, r3
 800a5a8:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	fb92 f3f3 	sdiv	r3, r2, r3
 800a5b2:	637b      	str	r3, [r7, #52]	; 0x34
        t = (Fxtal >> 20) + 1;
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	151b      	asrs	r3, r3, #20
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	fb93 f2f2 	sdiv	r2, r3, r2
 800a5c4:	69f9      	ldr	r1, [r7, #28]
 800a5c6:	fb01 f202 	mul.w	r2, r1, r2
 800a5ca:	1a9a      	subs	r2, r3, r2
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	fb92 f3f3 	sdiv	r3, r2, r3
 800a5d2:	633b      	str	r3, [r7, #48]	; 0x30
        c = Fxtal / t;
 800a5d4:	69fa      	ldr	r2, [r7, #28]
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	fb92 f3f3 	sdiv	r3, r2, r3
 800a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    pll_conf->mult = a;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5e2:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e8:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ee:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f4:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fa:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a3a      	ldr	r2, [r7, #32]
 800a600:	60da      	str	r2, [r3, #12]
}
 800a602:	bf00      	nop
 800a604:	373c      	adds	r7, #60	; 0x3c
 800a606:	46bd      	mov	sp, r7
 800a608:	bc80      	pop	{r7}
 800a60a:	4770      	bx	lr
 800a60c:	09896800 	.word	0x09896800
 800a610:	000f423f 	.word	0x000f423f
 800a614:	431bde83 	.word	0x431bde83
 800a618:	200016f4 	.word	0x200016f4
 800a61c:	51eb851f 	.word	0x51eb851f
 800a620:	017d7840 	.word	0x017d7840
 800a624:	04d3f63f 	.word	0x04d3f63f
 800a628:	35a4e900 	.word	0x35a4e900
 800a62c:	08f0d17f 	.word	0x08f0d17f
 800a630:	05f5e0ff 	.word	0x05f5e0ff

0800a634 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	43db      	mvns	r3, r3
 800a642:	b2db      	uxtb	r3, r3
 800a644:	4619      	mov	r1, r3
 800a646:	2003      	movs	r0, #3
 800a648:	f000 f804 	bl	800a654 <si5351_write>
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af04      	add	r7, sp, #16
 800a65a:	4603      	mov	r3, r0
 800a65c:	460a      	mov	r2, r1
 800a65e:	71fb      	strb	r3, [r7, #7]
 800a660:	4613      	mov	r3, r2
 800a662:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 800a664:	bf00      	nop
 800a666:	f04f 33ff 	mov.w	r3, #4294967295
 800a66a:	2203      	movs	r2, #3
 800a66c:	21c0      	movs	r1, #192	; 0xc0
 800a66e:	480c      	ldr	r0, [pc, #48]	; (800a6a0 <si5351_write+0x4c>)
 800a670:	f7f7 fa7c 	bl	8001b6c <HAL_I2C_IsDeviceReady>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1f5      	bne.n	800a666 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	9302      	str	r3, [sp, #8]
 800a684:	2301      	movs	r3, #1
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	1dbb      	adds	r3, r7, #6
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	2301      	movs	r3, #1
 800a68e:	21c0      	movs	r1, #192	; 0xc0
 800a690:	4803      	ldr	r0, [pc, #12]	; (800a6a0 <si5351_write+0x4c>)
 800a692:	f7f7 f971 	bl	8001978 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000458 	.word	0x20000458

0800a6a4 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60b9      	str	r1, [r7, #8]
 800a6ac:	607a      	str	r2, [r7, #4]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	121b      	asrs	r3, r3, #8
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff ffc8 	bl	800a654 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	b2d2      	uxtb	r2, r2
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff ffbf 	bl	800a654 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	3302      	adds	r3, #2
 800a6da:	b2d8      	uxtb	r0, r3
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	141b      	asrs	r3, r3, #16
 800a6e0:	b25b      	sxtb	r3, r3
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	b25a      	sxtb	r2, r3
 800a6e8:	7e3b      	ldrb	r3, [r7, #24]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	b25b      	sxtb	r3, r3
 800a6ee:	f003 030c 	and.w	r3, r3, #12
 800a6f2:	b25b      	sxtb	r3, r3
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	b25a      	sxtb	r2, r3
 800a6f8:	7f3b      	ldrb	r3, [r7, #28]
 800a6fa:	011b      	lsls	r3, r3, #4
 800a6fc:	b25b      	sxtb	r3, r3
 800a6fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a702:	b25b      	sxtb	r3, r3
 800a704:	4313      	orrs	r3, r2
 800a706:	b25b      	sxtb	r3, r3
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	4619      	mov	r1, r3
 800a70c:	f7ff ffa2 	bl	800a654 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	3303      	adds	r3, #3
 800a714:	b2da      	uxtb	r2, r3
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	121b      	asrs	r3, r3, #8
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7ff ff98 	bl	800a654 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	3304      	adds	r3, #4
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff ff8f 	bl	800a654 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	3305      	adds	r3, #5
 800a73a:	b2d8      	uxtb	r0, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	131b      	asrs	r3, r3, #12
 800a740:	b25b      	sxtb	r3, r3
 800a742:	f023 030f 	bic.w	r3, r3, #15
 800a746:	b25a      	sxtb	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	141b      	asrs	r3, r3, #16
 800a74c:	b25b      	sxtb	r3, r3
 800a74e:	f003 030f 	and.w	r3, r3, #15
 800a752:	b25b      	sxtb	r3, r3
 800a754:	4313      	orrs	r3, r2
 800a756:	b25b      	sxtb	r3, r3
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	4619      	mov	r1, r3
 800a75c:	f7ff ff7a 	bl	800a654 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	3306      	adds	r3, #6
 800a764:	b2da      	uxtb	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	121b      	asrs	r3, r3, #8
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	4619      	mov	r1, r3
 800a76e:	4610      	mov	r0, r2
 800a770:	f7ff ff70 	bl	800a654 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	3307      	adds	r3, #7
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	b2d2      	uxtb	r2, r2
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff ff67 	bl	800a654 <si5351_write>
}
 800a786:	bf00      	nop
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <wsprStartTx>:
#include "wspr.h"
#include "main.h"
#include "si5351.h"
#include <stdint.h>

void wsprStartTx(void){
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 800a794:	4803      	ldr	r0, [pc, #12]	; (800a7a4 <wsprStartTx+0x14>)
 800a796:	f7fa f8f5 	bl	8004984 <HAL_TIM_Base_Start_IT>
	si5351_EnableOutputs(1);
 800a79a:	2001      	movs	r0, #1
 800a79c:	f7ff ff4a 	bl	800a634 <si5351_EnableOutputs>
}
 800a7a0:	bf00      	nop
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	200004c0 	.word	0x200004c0

0800a7a8 <wsprStopTx>:

int wsprToneCounter = 0;



void wsprStopTx(void){
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
	wsprToneCounter = 0;
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <wsprStopTx+0x1c>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3);
 800a7b2:	4805      	ldr	r0, [pc, #20]	; (800a7c8 <wsprStopTx+0x20>)
 800a7b4:	f7fa f938 	bl	8004a28 <HAL_TIM_Base_Stop_IT>
	si5351_EnableOutputs(0);
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	f7ff ff3b 	bl	800a634 <si5351_EnableOutputs>
}
 800a7be:	bf00      	nop
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200016f8 	.word	0x200016f8
 800a7c8:	200004c0 	.word	0x200004c0

0800a7cc <wsprInit>:
float wsprFreqs[4] = { };

si5351PLLConfig_t pll_conf[4];
si5351OutputConfig_t out_conf[4];

void wsprInit(uint32_t baseFreq){
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	for(int i=0; i<4; i++){
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	e02a      	b.n	800a830 <wsprInit+0x64>
		wsprFreqs[i] = baseFreq+i * 1000;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7e0:	fb02 f303 	mul.w	r3, r2, r3
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7f5 fd64 	bl	80002b8 <__aeabi_ui2f>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	4913      	ldr	r1, [pc, #76]	; (800a840 <wsprInit+0x74>)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		si5351_Calc(wsprFreqs[i], &pll_conf[i], &out_conf[i]);
 800a7fa:	4a11      	ldr	r2, [pc, #68]	; (800a840 <wsprInit+0x74>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a802:	4618      	mov	r0, r3
 800a804:	f7f5 fdb0 	bl	8000368 <__aeabi_f2iz>
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4613      	mov	r3, r2
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4a0c      	ldr	r2, [pc, #48]	; (800a844 <wsprInit+0x78>)
 800a814:	1899      	adds	r1, r3, r2
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4a09      	ldr	r2, [pc, #36]	; (800a848 <wsprInit+0x7c>)
 800a822:	4413      	add	r3, r2
 800a824:	461a      	mov	r2, r3
 800a826:	f7ff fe45 	bl	800a4b4 <si5351_Calc>
	for(int i=0; i<4; i++){
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3301      	adds	r3, #1
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b03      	cmp	r3, #3
 800a834:	ddd1      	ble.n	800a7da <wsprInit+0xe>
	}
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	200016fc 	.word	0x200016fc
 800a844:	2000170c 	.word	0x2000170c
 800a848:	2000173c 	.word	0x2000173c

0800a84c <wsprIntCall>:


inline void wsprIntCall(void){
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af02      	add	r7, sp, #8
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800a852:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a856:	4819      	ldr	r0, [pc, #100]	; (800a8bc <wsprIntCall+0x70>)
 800a858:	f7f6 ff30 	bl	80016bc <HAL_GPIO_TogglePin>
	//si5351_SetupCLK0(wsprFreqs[wsprTones[wsprToneCounter]], SI5351_DRIVE_STRENGTH_4MA);

	si5351_SetupPLL(SI5351_PLL_A, &pll_conf[wsprTones[wsprToneCounter]]);
 800a85c:	4b18      	ldr	r3, [pc, #96]	; (800a8c0 <wsprIntCall+0x74>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a18      	ldr	r2, [pc, #96]	; (800a8c4 <wsprIntCall+0x78>)
 800a862:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a866:	4613      	mov	r3, r2
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4a16      	ldr	r2, [pc, #88]	; (800a8c8 <wsprIntCall+0x7c>)
 800a870:	4413      	add	r3, r2
 800a872:	4619      	mov	r1, r3
 800a874:	2000      	movs	r0, #0
 800a876:	f7ff fd35 	bl	800a2e4 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &out_conf[wsprTones[wsprToneCounter]], 0);
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <wsprIntCall+0x74>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a11      	ldr	r2, [pc, #68]	; (800a8c4 <wsprIntCall+0x78>)
 800a880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4a0f      	ldr	r2, [pc, #60]	; (800a8cc <wsprIntCall+0x80>)
 800a88e:	4413      	add	r3, r2
 800a890:	2200      	movs	r2, #0
 800a892:	9200      	str	r2, [sp, #0]
 800a894:	2201      	movs	r2, #1
 800a896:	2100      	movs	r1, #0
 800a898:	2000      	movs	r0, #0
 800a89a:	f7ff fd5e 	bl	800a35a <si5351_SetupOutput>

	if (wsprToneCounter < 162) wsprToneCounter++;
 800a89e:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <wsprIntCall+0x74>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2ba1      	cmp	r3, #161	; 0xa1
 800a8a4:	dc05      	bgt.n	800a8b2 <wsprIntCall+0x66>
 800a8a6:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <wsprIntCall+0x74>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <wsprIntCall+0x74>)
 800a8ae:	6013      	str	r3, [r2, #0]
	else wsprStopTx();
};
 800a8b0:	e001      	b.n	800a8b6 <wsprIntCall+0x6a>
	else wsprStopTx();
 800a8b2:	f7ff ff79 	bl	800a7a8 <wsprStopTx>
};
 800a8b6:	bf00      	nop
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40010c00 	.word	0x40010c00
 800a8c0:	200016f8 	.word	0x200016f8
 800a8c4:	2000017c 	.word	0x2000017c
 800a8c8:	2000170c 	.word	0x2000170c
 800a8cc:	2000173c 	.word	0x2000173c

0800a8d0 <__libc_init_array>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	2600      	movs	r6, #0
 800a8d4:	4d0c      	ldr	r5, [pc, #48]	; (800a908 <__libc_init_array+0x38>)
 800a8d6:	4c0d      	ldr	r4, [pc, #52]	; (800a90c <__libc_init_array+0x3c>)
 800a8d8:	1b64      	subs	r4, r4, r5
 800a8da:	10a4      	asrs	r4, r4, #2
 800a8dc:	42a6      	cmp	r6, r4
 800a8de:	d109      	bne.n	800a8f4 <__libc_init_array+0x24>
 800a8e0:	f000 f822 	bl	800a928 <_init>
 800a8e4:	2600      	movs	r6, #0
 800a8e6:	4d0a      	ldr	r5, [pc, #40]	; (800a910 <__libc_init_array+0x40>)
 800a8e8:	4c0a      	ldr	r4, [pc, #40]	; (800a914 <__libc_init_array+0x44>)
 800a8ea:	1b64      	subs	r4, r4, r5
 800a8ec:	10a4      	asrs	r4, r4, #2
 800a8ee:	42a6      	cmp	r6, r4
 800a8f0:	d105      	bne.n	800a8fe <__libc_init_array+0x2e>
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8f8:	4798      	blx	r3
 800a8fa:	3601      	adds	r6, #1
 800a8fc:	e7ee      	b.n	800a8dc <__libc_init_array+0xc>
 800a8fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a902:	4798      	blx	r3
 800a904:	3601      	adds	r6, #1
 800a906:	e7f2      	b.n	800a8ee <__libc_init_array+0x1e>
 800a908:	0800a9c0 	.word	0x0800a9c0
 800a90c:	0800a9c0 	.word	0x0800a9c0
 800a910:	0800a9c0 	.word	0x0800a9c0
 800a914:	0800a9c4 	.word	0x0800a9c4

0800a918 <memset>:
 800a918:	4603      	mov	r3, r0
 800a91a:	4402      	add	r2, r0
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d100      	bne.n	800a922 <memset+0xa>
 800a920:	4770      	bx	lr
 800a922:	f803 1b01 	strb.w	r1, [r3], #1
 800a926:	e7f9      	b.n	800a91c <memset+0x4>

0800a928 <_init>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	bf00      	nop
 800a92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92e:	bc08      	pop	{r3}
 800a930:	469e      	mov	lr, r3
 800a932:	4770      	bx	lr

0800a934 <_fini>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr
